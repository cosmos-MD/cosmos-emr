{
  "version": 3,
  "sources": ["../../../../node_modules/@medplum/core/src/fhirlexer/parse.ts", "../../../../node_modules/@medplum/core/src/utils.ts", "../../../../node_modules/@medplum/core/src/format.ts", "../../../../node_modules/@medplum/core/src/base-schema.ts", "../../../../node_modules/@medplum/core/src/base-schema.json", "../../../../node_modules/@medplum/core/src/fhirpath/utils.ts", "../../../../node_modules/@medplum/core/src/outcomes.ts", "../../../../node_modules/@medplum/core/src/typeschema/types.ts", "../../../../node_modules/@medplum/core/src/types.ts", "../../../../node_modules/@medplum/core/src/fhirpath/date.ts", "../../../../node_modules/@medplum/core/src/fhirpath/functions.ts", "../../../../node_modules/@medplum/core/src/fhirpath/atoms.ts", "../../../../node_modules/@medplum/core/src/fhirlexer/tokenize.ts", "../../../../node_modules/@medplum/core/src/fhirpath/tokenize.ts", "../../../../node_modules/@medplum/core/src/fhirpath/parse.ts", "../../../../node_modules/@medplum/core/src/search/details.ts", "../../../../node_modules/@medplum/core/src/search/search.ts", "../../../../node_modules/@medplum/core/src/search/match.ts", "../../../../node_modules/@medplum/core/src/access.ts", "../../../../node_modules/@medplum/core/src/base64.ts", "../../../../node_modules/@medplum/core/src/crypto.ts", "../../../../node_modules/@medplum/core/src/bundle.ts", "../../../../node_modules/@medplum/core/src/cache.ts", "../../../../node_modules/@medplum/core/src/contenttype.ts", "../../../../node_modules/@medplum/core/src/eventtarget.ts", "../../../../node_modules/@medplum/core/src/fhircast/index.ts", "../../../../node_modules/@medplum/core/src/jwt.ts", "../../../../node_modules/@medplum/core/src/readablepromise.ts", "../../../../node_modules/@medplum/core/src/storage.ts", "../../../../node_modules/@medplum/core/src/client.ts", "../../../../node_modules/@medplum/core/src/config.ts", "../../../../node_modules/@medplum/core/src/constants.ts", "../../../../node_modules/@medplum/core/src/fhirmapper/tokenize.ts", "../../../../node_modules/@medplum/core/src/fhirmapper/parse.ts", "../../../../node_modules/@medplum/core/src/filter/tokenize.ts", "../../../../node_modules/@medplum/core/src/filter/types.ts", "../../../../node_modules/@medplum/core/src/filter/parse.ts", "../../../../node_modules/@medplum/core/src/hl7.ts", "../../../../node_modules/@medplum/core/src/schema.ts", "../../../../node_modules/@medplum/core/src/sftp.ts", "../../../../node_modules/@medplum/core/src/typeschema/crawler.ts", "../../../../node_modules/@medplum/core/src/typeschema/validation.ts"],
  "sourcesContent": ["import { TypedValue } from '../types';\nimport { Token } from './tokenize';\n\nexport interface AtomContext {\n  parent?: AtomContext;\n  variables: Record<string, TypedValue>;\n}\nexport interface Atom {\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string;\n}\n\nexport abstract class PrefixOperatorAtom implements Atom {\n  constructor(\n    public readonly operator: string,\n    public readonly child: Atom\n  ) {}\n\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.operator}(${this.child.toString()})`;\n  }\n}\n\nexport abstract class InfixOperatorAtom implements Atom {\n  constructor(\n    public readonly operator: string,\n    public readonly left: Atom,\n    public readonly right: Atom\n  ) {}\n\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n  }\n}\n\nexport interface PrefixParselet {\n  parse(parser: Parser, token: Token): Atom;\n}\n\nexport interface InfixParselet {\n  precedence: number;\n  parse?(parser: Parser, left: Atom, token: Token): Atom;\n}\n\nexport class ParserBuilder {\n  private readonly prefixParselets: Record<string, PrefixParselet> = {};\n  private readonly infixParselets: Record<string, InfixParselet> = {};\n\n  public registerInfix(tokenType: string, parselet: InfixParselet): this {\n    this.infixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public registerPrefix(tokenType: string, parselet: PrefixParselet): this {\n    this.prefixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public prefix(tokenType: string, precedence: number, builder: (token: Token, right: Atom) => Atom): this {\n    return this.registerPrefix(tokenType, {\n      parse(parser, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(token, right);\n      },\n    });\n  }\n\n  public infixLeft(\n    tokenType: string,\n    precedence: number,\n    builder: (left: Atom, token: Token, right: Atom) => Atom\n  ): this {\n    return this.registerInfix(tokenType, {\n      parse(parser, left, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(left, token, right);\n      },\n      precedence,\n    });\n  }\n\n  public construct(input: Token[]): Parser {\n    return new Parser(input, this.prefixParselets, this.infixParselets);\n  }\n}\n\nexport class Parser {\n  private tokens: Token[];\n  private prefixParselets: Record<string, PrefixParselet>;\n  private infixParselets: Record<string, InfixParselet>;\n\n  constructor(\n    tokens: Token[],\n    prefixParselets: Record<string, PrefixParselet>,\n    infixParselets: Record<string, InfixParselet>\n  ) {\n    this.tokens = tokens;\n    this.prefixParselets = prefixParselets;\n    this.infixParselets = infixParselets;\n  }\n\n  hasMore(): boolean {\n    return this.tokens.length > 0;\n  }\n\n  match(expected: string): boolean {\n    const token = this.peek();\n    if (token?.id !== expected) {\n      return false;\n    }\n\n    this.consume();\n    return true;\n  }\n\n  consumeAndParse(precedence = Infinity): Atom {\n    const token = this.consume();\n    const prefix = this.prefixParselets[token.id];\n    if (!prefix) {\n      throw Error(\n        `Parse error at \"${token.value}\" (line ${token.line}, column ${token.column}). No matching prefix parselet.`\n      );\n    }\n\n    let left = prefix.parse(this, token);\n\n    while (precedence > this.getPrecedence()) {\n      const next = this.consume();\n      const infix = this.getInfixParselet(next) as InfixParselet;\n      left = (infix.parse as (parser: Parser, left: Atom, token: Token) => Atom)(this, left, next);\n    }\n\n    return left;\n  }\n\n  getPrecedence(): number {\n    const nextToken = this.peek();\n    if (!nextToken) {\n      return Infinity;\n    }\n    const parser = this.getInfixParselet(nextToken);\n    if (parser) {\n      return parser.precedence;\n    }\n    return Infinity;\n  }\n\n  consume(expectedId?: string, expectedValue?: string): Token {\n    if (!this.tokens.length) {\n      throw Error('Cant consume unknown more tokens.');\n    }\n    if (expectedId && this.peek()?.id !== expectedId) {\n      const actual = this.peek() as Token;\n      throw Error(`Expected ${expectedId} but got \"${actual.id}\" at line ${actual.line} column ${actual.column}.`);\n    }\n    if (expectedValue && this.peek()?.value !== expectedValue) {\n      const actual = this.peek() as Token;\n      throw Error(\n        `Expected \"${expectedValue}\" but got \"${actual.value}\" at line ${actual.line} column ${actual.column}.`\n      );\n    }\n    return this.tokens.shift() as Token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens.length > 0 ? this.tokens[0] : undefined;\n  }\n\n  removeComments(): void {\n    this.tokens = this.tokens.filter((t) => t.id !== 'Comment');\n  }\n\n  getInfixParselet(token: Token): InfixParselet | undefined {\n    return this.infixParselets[token.id === 'Symbol' ? token.value : token.id];\n  }\n}\n", "import {\n  Attachment,\n  CodeableConcept,\n  Device,\n  Extension,\n  Identifier,\n  ObservationDefinition,\n  ObservationDefinitionQualifiedInterval,\n  Patient,\n  Practitioner,\n  QuestionnaireResponse,\n  QuestionnaireResponseItem,\n  QuestionnaireResponseItemAnswer,\n  Range,\n  Reference,\n  RelatedPerson,\n  Resource,\n  ResourceType,\n} from '@medplum/fhirtypes';\nimport { formatHumanName } from './format';\nimport { isReference } from './types';\n\nexport type ProfileResource = Patient | Practitioner | RelatedPerson;\n\n/**\n * Allowed values for `code_challenge_method` in a PKCE exchange.\n */\nexport type CodeChallengeMethod = 'plain' | 'S256';\n\nexport interface Code {\n  code?: CodeableConcept;\n}\n\nexport type ResourceWithCode = Resource & Code;\n\n/**\n * Creates a reference resource.\n * @param resource - The FHIR reesource.\n * @returns A reference resource.\n */\nexport function createReference<T extends Resource>(resource: T): Reference<T> {\n  const reference = getReferenceString(resource);\n  const display = getDisplayString(resource);\n  return display === reference ? { reference } : { reference, display };\n}\n\n/**\n * Returns a reference string for a resource.\n * @param input - The FHIR resource or reference.\n * @returns A reference string of the form resourceType/id.\n */\nexport function getReferenceString(input: Reference | Resource): string {\n  if (isReference(input)) {\n    return input.reference;\n  }\n  return `${(input as Resource).resourceType}/${input.id}`;\n}\n\n/**\n * Returns the ID portion of a reference.\n * @param input - A FHIR reference or resource.\n * @returns The ID portion of a reference.\n */\nexport function resolveId(input: Reference | Resource | undefined): string | undefined {\n  if (!input) {\n    return undefined;\n  }\n  if (isReference(input)) {\n    return input.reference.split('/')[1];\n  }\n  return input.id;\n}\n\n/**\n * Parses a reference and returns a tuple of [ResourceType, ID].\n * @param reference - A reference to a FHIR resource.\n * @returns A tuple containing the `ResourceType` and the ID of the resource or `undefined` when `undefined` or an invalid reference is passed.\n */\nexport function parseReference(reference: Reference): [ResourceType, string] | undefined;\nexport function parseReference(reference: undefined): undefined;\nexport function parseReference(reference: Reference | undefined): [ResourceType, string] | undefined {\n  if (reference?.reference === undefined) {\n    return undefined;\n  }\n  const [type, id] = reference.reference.split('/');\n  if (type === '' || id === '' || id === undefined) {\n    return undefined;\n  }\n  return [type as ResourceType, id];\n}\n\n/**\n * Returns true if the resource is a \"ProfileResource\".\n * @param resource - The FHIR resource.\n * @returns True if the resource is a \"ProfileResource\".\n */\nexport function isProfileResource(resource: Resource): resource is ProfileResource {\n  return (\n    resource.resourceType === 'Patient' ||\n    resource.resourceType === 'Practitioner' ||\n    resource.resourceType === 'RelatedPerson'\n  );\n}\n\n/**\n * Returns a display string for the resource.\n * @param resource - The input resource.\n * @returns Human friendly display string.\n */\nexport function getDisplayString(resource: Resource): string {\n  if (isProfileResource(resource)) {\n    const profileName = getProfileResourceDisplayString(resource);\n    if (profileName) {\n      return profileName;\n    }\n  }\n  if (resource.resourceType === 'Device') {\n    const deviceName = getDeviceDisplayString(resource);\n    if (deviceName) {\n      return deviceName;\n    }\n  }\n  if (resource.resourceType === 'Observation') {\n    if ('code' in resource && resource.code?.text) {\n      return resource.code.text;\n    }\n  }\n  if (resource.resourceType === 'User') {\n    if (resource.email) {\n      return resource.email;\n    }\n  }\n  if ('name' in resource && resource.name && typeof resource.name === 'string') {\n    return resource.name;\n  }\n  return getReferenceString(resource);\n}\n\n/**\n * Returns a display string for a profile resource if one is found.\n * @param resource - The profile resource.\n * @returns The display name if one is found.\n */\nfunction getProfileResourceDisplayString(resource: ProfileResource): string | undefined {\n  const names = resource.name;\n  if (names && names.length > 0) {\n    return formatHumanName(names[0]);\n  }\n  return undefined;\n}\n\n/**\n * Returns a display string for a device resource if one is found.\n * @param device - The device resource.\n * @returns The display name if one is found.\n */\nfunction getDeviceDisplayString(device: Device): string | undefined {\n  const names = device.deviceName;\n  if (names && names.length > 0) {\n    return names[0].name;\n  }\n  return undefined;\n}\n\n/**\n * Returns an image URL for the resource, if one is available.\n * @param resource - The input resource.\n * @returns The image URL for the resource or undefined.\n */\nexport function getImageSrc(resource: Resource): string | undefined {\n  if (!('photo' in resource)) {\n    return undefined;\n  }\n\n  const photo = resource.photo;\n  if (!photo) {\n    return undefined;\n  }\n\n  if (Array.isArray(photo)) {\n    for (const p of photo) {\n      const url = getPhotoImageSrc(p);\n      if (url) {\n        return url;\n      }\n    }\n  } else {\n    return getPhotoImageSrc(photo);\n  }\n\n  return undefined;\n}\n\nfunction getPhotoImageSrc(photo: Attachment): string | undefined {\n  if (photo.url && photo.contentType && photo.contentType.startsWith('image/')) {\n    return photo.url;\n  }\n  return undefined;\n}\n\n/**\n * Returns a Date property as a Date.\n * When working with JSON objects, Dates are often serialized as ISO-8601 strings.\n * When that happens, we need to safely convert to a proper Date object.\n * @param date - The date property value, which could be a string or a Date object.\n * @returns A Date object.\n */\nexport function getDateProperty(date: string | undefined): Date | undefined {\n  return date ? new Date(date) : undefined;\n}\n\n/**\n * Calculates the age in years from the birth date.\n * @param birthDateStr - The birth date or start date in ISO-8601 format YYYY-MM-DD.\n * @param endDateStr - Optional end date in ISO-8601 format YYYY-MM-DD. Default value is today.\n * @returns The age in years, months, and days.\n */\nexport function calculateAge(\n  birthDateStr: string,\n  endDateStr?: string\n): { years: number; months: number; days: number } {\n  const startDate = new Date(birthDateStr);\n  startDate.setUTCHours(0, 0, 0, 0);\n\n  const endDate = endDateStr ? new Date(endDateStr) : new Date();\n  endDate.setUTCHours(0, 0, 0, 0);\n\n  const startYear = startDate.getUTCFullYear();\n  const startMonth = startDate.getUTCMonth();\n  const startDay = startDate.getUTCDate();\n\n  const endYear = endDate.getUTCFullYear();\n  const endMonth = endDate.getUTCMonth();\n  const endDay = endDate.getUTCDate();\n\n  let years = endYear - startYear;\n  if (endMonth < startMonth || (endMonth === startMonth && endDay < startDay)) {\n    years--;\n  }\n\n  let months = endYear * 12 + endMonth - (startYear * 12 + startMonth);\n  if (endDay < startDay) {\n    months--;\n  }\n\n  const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n  return { years, months, days };\n}\n\n/**\n * Calculates the age string for display using the age appropriate units.\n * If the age is greater than or equal to 2 years, then the age is displayed in years.\n * If the age is greater than or equal to 1 month, then the age is displayed in months.\n * Otherwise, the age is displayed in days.\n * @param birthDateStr - The birth date or start date in ISO-8601 format YYYY-MM-DD.\n * @param endDateStr - Optional end date in ISO-8601 format YYYY-MM-DD. Default value is today.\n * @returns The age string.\n */\nexport function calculateAgeString(birthDateStr: string, endDateStr?: string): string | undefined {\n  const { years, months, days } = calculateAge(birthDateStr, endDateStr);\n  if (years >= 2) {\n    return years.toString().padStart(3, '0') + 'Y';\n  } else if (months >= 1) {\n    return months.toString().padStart(3, '0') + 'M';\n  } else {\n    return days.toString().padStart(3, '0') + 'D';\n  }\n}\n\n/**\n * Returns all questionnaire answers as a map by link ID.\n * @param response - The questionnaire response resource.\n * @returns Questionnaire answers mapped by link ID.\n */\nexport function getQuestionnaireAnswers(\n  response: QuestionnaireResponse\n): Record<string, QuestionnaireResponseItemAnswer> {\n  const result: Record<string, QuestionnaireResponseItemAnswer> = {};\n  buildQuestionnaireAnswerItems(response.item, result);\n  return result;\n}\n\nfunction buildQuestionnaireAnswerItems(\n  items: QuestionnaireResponseItem[] | undefined,\n  result: Record<string, QuestionnaireResponseItemAnswer>\n): void {\n  if (items) {\n    for (const item of items) {\n      if (item.linkId && item.answer && item.answer.length > 0) {\n        result[item.linkId] = item.answer[0];\n      }\n      buildQuestionnaireAnswerItems(item.item, result);\n    }\n  }\n}\n\n/**\n * Returns an array of  questionnaire answers as a map by link ID.\n * @param response - The questionnaire response resource.\n * @returns Questionnaire answer arrays mapped by link ID.\n */\nexport function getAllQuestionnaireAnswers(\n  response: QuestionnaireResponse\n): Record<string, QuestionnaireResponseItemAnswer[]> {\n  const result: Record<string, QuestionnaireResponseItemAnswer[]> = {};\n  buildAllQuestionnaireAnswerItems(response.item, result);\n  return result;\n}\n\n/**\n * Recursively builds the questionnaire answer items map.\n * @param items - The current questionnaire response items.\n * @param result - The cumulative result map of answers.\n */\nfunction buildAllQuestionnaireAnswerItems(\n  items: QuestionnaireResponseItem[] | undefined,\n  result: Record<string, QuestionnaireResponseItemAnswer[]>\n): void {\n  if (items) {\n    for (const item of items) {\n      if (item.linkId && item.answer && item.answer.length > 0) {\n        result[item.linkId] = item.answer;\n      }\n      buildAllQuestionnaireAnswerItems(item.item, result);\n    }\n  }\n}\n\n/**\n * Returns the resource identifier for the given system.\n *\n * If multiple identifiers exist with the same system, the first one is returned.\n *\n * If the system is not found, then returns undefined.\n * @param resource - The resource to check.\n * @param system - The identifier system.\n * @returns The identifier value if found; otherwise undefined.\n */\nexport function getIdentifier(resource: Resource, system: string): string | undefined {\n  const identifiers = (resource as any).identifier;\n  if (!identifiers) {\n    return undefined;\n  }\n  const array = Array.isArray(identifiers) ? identifiers : [identifiers];\n  for (const identifier of array) {\n    if (identifier.system === system) {\n      return identifier.value;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Sets a resource identifier for the given system.\n *\n * Note that this method is only available on resources that have an \"identifier\" property,\n * and that property must be an array of Identifier objects,\n * which is not true for all FHIR resources.\n *\n * If the identifier already exists, then the value is updated.\n *\n * Otherwise a new identifier is added.\n *\n * @param resource - The resource to add the identifier to.\n * @param system - The identifier system.\n * @param value - The identifier value.\n */\nexport function setIdentifier(resource: Resource & { identifier?: Identifier[] }, system: string, value: string): void {\n  const identifiers = resource.identifier;\n  if (!identifiers) {\n    resource.identifier = [{ system, value }];\n    return;\n  }\n  for (const identifier of identifiers) {\n    if (identifier.system === system) {\n      identifier.value = value;\n      return;\n    }\n  }\n  identifiers.push({ system, value });\n}\n\n/**\n * Returns an extension value by extension URLs.\n * @param resource - The base resource.\n * @param urls - Array of extension URLs.  Each entry represents a nested extension.\n * @returns The extension value if found; undefined otherwise.\n */\nexport function getExtensionValue(resource: any, ...urls: string[]): string | undefined {\n  // Let curr be the current resource or extension. Extensions can be nested.\n  let curr: any = resource;\n\n  // For each of the urls, try to find a matching nested extension.\n  for (let i = 0; i < urls.length && curr; i++) {\n    curr = (curr?.extension as Extension[] | undefined)?.find((e) => e.url === urls[i]);\n  }\n\n  return curr?.valueString as string | undefined;\n}\n\n/**\n * Returns an extension by extension URLs.\n * @param resource - The base resource.\n * @param urls - Array of extension URLs. Each entry represents a nested extension.\n * @returns The extension object if found; undefined otherwise.\n */\nexport function getExtension(resource: any, ...urls: string[]): Extension | undefined {\n  // Let curr be the current resource or extension. Extensions can be nested.\n  let curr: any = resource;\n\n  // For each of the urls, try to find a matching nested extension.\n  for (let i = 0; i < urls.length && curr; i++) {\n    curr = (curr?.extension as Extension[] | undefined)?.find((e) => e.url === urls[i]);\n  }\n\n  return curr;\n}\n\n/**\n * FHIR JSON stringify.\n * Removes properties with empty string values.\n * Removes objects with zero properties.\n * See: https://www.hl7.org/fhir/json.html\n * @param value - The input value.\n * @param pretty - Optional flag to pretty-print the JSON.\n * @returns The resulting JSON string.\n */\nexport function stringify(value: any, pretty?: boolean): string {\n  return JSON.stringify(value, stringifyReplacer, pretty ? 2 : undefined);\n}\n\n/**\n * Evaluates JSON key/value pairs for FHIR JSON stringify.\n * Removes properties with empty string values.\n * Removes objects with zero properties.\n * @param k - Property key.\n * @param v - Property value.\n * @returns The replaced value.\n */\nfunction stringifyReplacer(k: string, v: any): any {\n  return !isArrayKey(k) && isEmpty(v) ? undefined : v;\n}\n\n/**\n * Returns true if the key is an array key.\n * @param k - The property key.\n * @returns True if the key is an array key.\n */\nfunction isArrayKey(k: string): boolean {\n  return !!/\\d+$/.exec(k);\n}\n\n/**\n * Returns true if the value is empty (null, undefined, empty string, or empty object).\n * @param v - Any value.\n * @returns True if the value is an empty string or an empty object.\n */\nexport function isEmpty(v: any): boolean {\n  if (v === null || v === undefined) {\n    return true;\n  }\n  const t = typeof v;\n  return (t === 'string' && v === '') || (t === 'object' && Object.keys(v).length === 0);\n}\n\n/**\n * Resource equality.\n * Ignores meta.versionId and meta.lastUpdated.\n * @param object1 - The first object.\n * @param object2 - The second object.\n * @param path - Optional path string.\n * @returns True if the objects are equal.\n */\nexport function deepEquals(object1: unknown, object2: unknown, path?: string): boolean {\n  if (object1 === object2) {\n    return true;\n  }\n  if (isEmpty(object1) && isEmpty(object2)) {\n    return true;\n  }\n  if (isEmpty(object1) || isEmpty(object2)) {\n    return false;\n  }\n  if (Array.isArray(object1) && Array.isArray(object2)) {\n    return deepEqualsArray(object1, object2);\n  }\n  if (Array.isArray(object1) || Array.isArray(object2)) {\n    return false;\n  }\n  if (isObject(object1) && isObject(object2)) {\n    return deepEqualsObject(object1, object2, path);\n  }\n  if (isObject(object1) || isObject(object2)) {\n    return false;\n  }\n  return false;\n}\n\nfunction deepEqualsArray(array1: unknown[], array2: unknown[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (!deepEquals(array1[i], array2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction deepEqualsObject(\n  object1: Record<string, unknown>,\n  object2: Record<string, unknown>,\n  path: string | undefined\n): boolean {\n  const keySet = new Set<string>();\n  Object.keys(object1).forEach((k) => keySet.add(k));\n  Object.keys(object2).forEach((k) => keySet.add(k));\n  if (path === 'meta') {\n    keySet.delete('versionId');\n    keySet.delete('lastUpdated');\n    keySet.delete('author');\n  }\n  for (const key of keySet) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    if (!deepEquals(val1, val2, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if object2 includes all fields and values of object1.\n * It doesn't matter if object2 has extra fields.\n * @param value - The object to test if contained in pattern.\n * @param pattern - The object to test against.\n * @returns True if pattern includes all fields and values of value.\n */\nexport function deepIncludes(value: any, pattern: any): boolean {\n  if (isEmpty(value)) {\n    return true;\n  }\n  if (isEmpty(pattern)) {\n    return false;\n  }\n  if (Array.isArray(value) && Array.isArray(pattern)) {\n    return deepIncludesArray(value, pattern);\n  }\n  if (Array.isArray(value) || Array.isArray(pattern)) {\n    return false;\n  }\n  if (isObject(value) && isObject(pattern)) {\n    return deepIncludesObject(value, pattern);\n  } else if (isObject(value) || isObject(pattern)) {\n    return false;\n  }\n  return value === pattern;\n}\n\nfunction deepIncludesArray(array1: any[], array2: any[]): boolean {\n  return array1.every((value1) => array2.some((value2) => deepIncludes(value1, value2)));\n}\n\nfunction deepIncludesObject(object1: { [key: string]: unknown }, object2: { [key: string]: unknown }): boolean {\n  return Object.entries(object1).every(([key, value]) => key in object2 && deepIncludes(value, object2[key]));\n}\n\n/**\n * Creates a deep clone of the input value.\n *\n * Limitations:\n *  - Only supports JSON primitives and arrays.\n *  - Does not support Functions, lambdas, etc.\n *  - Does not support circular references.\n *\n * See: https://web.dev/structured-clone/\n * See: https://stackoverflow.com/questions/40488190/how-is-structured-clone-algorithm-different-from-deep-copy\n * @param input - The input to clone.\n * @returns A deep clone of the input.\n */\nexport function deepClone<T>(input: T): T {\n  return JSON.parse(JSON.stringify(input)) as T;\n}\n\n/**\n * Returns true if the input string is a UUID.\n * @param input - The input string.\n * @returns True if the input string matches the UUID format.\n */\nexport function isUUID(input: string): input is `${string}-${string}-${string}-${string}-${string}` {\n  return !!/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/i.exec(input);\n}\n\n/**\n * Returns true if the input is an object.\n * @param obj - The candidate object.\n * @returns True if the input is a non-null non-undefined object.\n */\nexport function isObject(obj: unknown): obj is Record<string, unknown> {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Returns true if the input array is an array of strings.\n * @param arr - Input array.\n * @returns True if the input array is an array of strings.\n */\nexport function isStringArray(arr: any[]): arr is string[] {\n  return arr.every((e) => typeof e === 'string');\n}\n\n// Precompute hex octets\n// See: https://stackoverflow.com/a/55200387\nconst byteToHex: string[] = [];\nfor (let n = 0; n < 256; n++) {\n  byteToHex.push(n.toString(16).padStart(2, '0'));\n}\n\n/**\n * Converts an ArrayBuffer to hex string.\n * See: https://stackoverflow.com/a/55200387\n * @param arrayBuffer - The input array buffer.\n * @returns The resulting hex string.\n */\nexport function arrayBufferToHex(arrayBuffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(arrayBuffer);\n  const result: string[] = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    result[i] = byteToHex[bytes[i]];\n  }\n  return result.join('');\n}\n\n/**\n * Converts an ArrayBuffer to a base-64 encoded string.\n * @param arrayBuffer - The input array buffer.\n * @returns The base-64 encoded string.\n */\nexport function arrayBufferToBase64(arrayBuffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(arrayBuffer);\n  const result: string[] = [];\n  for (let i = 0; i < bytes.length; i++) {\n    result[i] = String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(result.join(''));\n}\n\nexport function capitalize(word: string): string {\n  return word.charAt(0).toUpperCase() + word.substring(1);\n}\n\nexport function isLowerCase(c: string): boolean {\n  return c === c.toLowerCase() && c !== c.toUpperCase();\n}\n\n/**\n * Tries to find a code string for a given system within a given codeable concept.\n * @param concept - The codeable concept.\n * @param system - The system string.\n * @returns The code if found; otherwise undefined.\n */\nexport function getCodeBySystem(concept: CodeableConcept, system: string): string | undefined {\n  return concept.coding?.find((coding) => coding.system === system)?.code;\n}\n\n/**\n * Sets a code for a given system within a given codeable concept.\n * @param concept - The codeable concept.\n * @param system - The system string.\n * @param code - The code value.\n */\nexport function setCodeBySystem(concept: CodeableConcept, system: string, code: string): void {\n  if (!concept.coding) {\n    concept.coding = [];\n  }\n  const coding = concept.coding.find((c) => c.system === system);\n  if (coding) {\n    coding.code = code;\n  } else {\n    concept.coding.push({ system, code });\n  }\n}\n\n/**\n * Tries to find an observation interval for the given patient and value.\n * @param definition - The observation definition.\n * @param patient - The patient.\n * @param value - The observation value.\n * @param category - Optional interval category restriction.\n * @returns The observation interval if found; otherwise undefined.\n */\nexport function findObservationInterval(\n  definition: ObservationDefinition,\n  patient: Patient,\n  value: number,\n  category?: 'reference' | 'critical' | 'absolute'\n): ObservationDefinitionQualifiedInterval | undefined {\n  return definition.qualifiedInterval?.find(\n    (interval) =>\n      observationIntervalMatchesPatient(interval, patient) &&\n      observationIntervalMatchesValue(interval, value, definition.quantitativeDetails?.decimalPrecision) &&\n      (category === undefined || interval.category === category)\n  );\n}\n\n/**\n * Tries to find an observation reference range for the given patient and condition names.\n * @param definition - The observation definition.\n * @param patient - The patient.\n * @param names - The condition names.\n * @returns The observation interval if found; otherwise undefined.\n */\nexport function findObservationReferenceRange(\n  definition: ObservationDefinition,\n  patient: Patient,\n  names: string[]\n): ObservationDefinitionQualifiedInterval | undefined {\n  return definition.qualifiedInterval?.find(\n    (interval) => observationIntervalMatchesPatient(interval, patient) && names.includes(interval.condition as string)\n  );\n}\n\n/**\n * Returns true if the patient matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient matches the observation interval.\n */\nfunction observationIntervalMatchesPatient(\n  interval: ObservationDefinitionQualifiedInterval,\n  patient: Patient\n): boolean {\n  return observationIntervalMatchesGender(interval, patient) && observationIntervalMatchesAge(interval, patient);\n}\n\n/**\n * Returns true if the patient gender matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient gender matches the observation interval.\n */\nfunction observationIntervalMatchesGender(interval: ObservationDefinitionQualifiedInterval, patient: Patient): boolean {\n  return !interval.gender || interval.gender === patient.gender;\n}\n\n/**\n * Returns true if the patient age matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient age matches the observation interval.\n */\nfunction observationIntervalMatchesAge(interval: ObservationDefinitionQualifiedInterval, patient: Patient): boolean {\n  return !interval.age || matchesRange(calculateAge(patient.birthDate as string).years, interval.age);\n}\n\n/**\n * Returns true if the value matches the observation interval.\n * @param interval - The observation interval.\n * @param value - The observation value.\n * @param precision - Optional precision in number of digits.\n * @returns True if the value matches the observation interval.\n */\nfunction observationIntervalMatchesValue(\n  interval: ObservationDefinitionQualifiedInterval,\n  value: number,\n  precision?: number\n): boolean {\n  return !!interval.range && matchesRange(value, interval.range, precision);\n}\n\n/**\n * Returns true if the value is in the range accounting for precision.\n * @param value - The numeric value.\n * @param range - The numeric range.\n * @param precision - Optional precision in number of digits.\n * @returns True if the value is within the range.\n */\nexport function matchesRange(value: number, range: Range, precision?: number): boolean {\n  return (\n    (range.low?.value === undefined || preciseGreaterThanOrEquals(value, range.low.value, precision)) &&\n    (range.high?.value === undefined || preciseLessThanOrEquals(value, range.high.value, precision))\n  );\n}\n\n/**\n * Returns the input number rounded to the specified number of digits.\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @returns The number rounded to the specified number of digits.\n */\nexport function preciseRound(a: number, precision: number): number {\n  return parseFloat(a.toFixed(precision));\n}\n\n/**\n * Returns true if the two numbers are equal to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the two numbers are equal to the given precision.\n */\nexport function preciseEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) === toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is less than the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is less than the second number to the given precision.\n */\nexport function preciseLessThan(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) < toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is greater than the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is greater than the second number to the given precision.\n */\nexport function preciseGreaterThan(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) > toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is less than or equal to the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is less than or equal to the second number to the given precision.\n */\nexport function preciseLessThanOrEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) <= toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is greater than or equal to the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is greater than or equal to the second number to the given precision.\n */\nexport function preciseGreaterThanOrEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) >= toPreciseInteger(b, precision);\n}\n\n/**\n * Returns an integer representation of the number with the given precision.\n * For example, if precision is 2, then 1.2345 will be returned as 123.\n * @param a - The number.\n * @param precision - Optional precision in number of digits.\n * @returns The integer with the given precision.\n */\nfunction toPreciseInteger(a: number, precision?: number): number {\n  if (precision === undefined) {\n    return a;\n  }\n  return Math.round(a * Math.pow(10, precision));\n}\n\n/**\n * Finds the first resource in the input array that matches the specified code and system.\n * @param resources - The array of resources to search.\n * @param code - The code to search for.\n * @param system - The system to search for.\n * @returns The first resource in the input array that matches the specified code and system, or undefined if no such resource is found.\n */\nexport function findResourceByCode(\n  resources: ResourceWithCode[],\n  code: CodeableConcept | string,\n  system: string\n): ResourceWithCode | undefined {\n  return resources.find((r) =>\n    typeof code === 'string'\n      ? getCodeBySystem(r.code || {}, system) === code\n      : getCodeBySystem(r.code || {}, system) === getCodeBySystem(code, system)\n  );\n}\n\nexport function arrayify<T>(value: T | T[] | undefined): T[] | undefined {\n  if (!value) {\n    return undefined;\n  } else if (Array.isArray(value)) {\n    return value;\n  } else {\n    return [value];\n  }\n}\n\n/**\n * Sleeps for the specified number of milliseconds.\n * @param ms - Time delay in milliseconds\n * @returns A promise that resolves after the specified number of milliseconds.\n */\nexport const sleep = (ms: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n\nexport function splitN(str: string, delim: string, n: number): string[] {\n  const result: string[] = [];\n  for (let i = 0; i < n - 1; i++) {\n    let delimIndex = str.indexOf(delim);\n    if (delimIndex < 0) {\n      delimIndex = str.length;\n    }\n    result.push(str.slice(0, delimIndex));\n    str = str.slice(delimIndex + delim.length);\n  }\n  if (str) {\n    result.push(str);\n  }\n  return result;\n}\n", "import {\n  Address,\n  CodeableConcept,\n  Coding,\n  HumanName,\n  Money,\n  Observation,\n  ObservationComponent,\n  Period,\n  Quantity,\n  Range,\n  Timing,\n  TimingRepeat,\n} from '@medplum/fhirtypes';\nimport { capitalize } from './utils';\n\nexport interface AddressFormatOptions {\n  all?: boolean;\n  use?: boolean;\n  lineSeparator?: string;\n}\n\nexport interface HumanNameFormatOptions {\n  all?: boolean;\n  prefix?: boolean;\n  suffix?: boolean;\n  use?: boolean;\n}\n\n/**\n * Formats a FHIR Address as a string.\n * @param address - The address to format.\n * @param options - Optional address format options.\n * @returns The formatted address string.\n */\nexport function formatAddress(address: Address, options?: AddressFormatOptions): string {\n  const builder = [];\n\n  if (address.line) {\n    builder.push(...address.line);\n  }\n\n  if (address.city || address.state || address.postalCode) {\n    const cityStateZip = [];\n    if (address.city) {\n      cityStateZip.push(address.city);\n    }\n    if (address.state) {\n      cityStateZip.push(address.state);\n    }\n    if (address.postalCode) {\n      cityStateZip.push(address.postalCode);\n    }\n    builder.push(cityStateZip.join(', '));\n  }\n\n  if (address.use && (options?.all || options?.use)) {\n    builder.push('[' + address.use + ']');\n  }\n\n  return builder.join(options?.lineSeparator ?? ', ').trim();\n}\n\n/**\n * Formats a FHIR HumanName as a string.\n * @param name - The name to format.\n * @param options - Optional name format options.\n * @returns The formatted name string.\n */\nexport function formatHumanName(name: HumanName, options?: HumanNameFormatOptions): string {\n  const builder = [];\n\n  if (name.prefix && options?.prefix !== false) {\n    builder.push(...name.prefix);\n  }\n\n  if (name.given) {\n    builder.push(...name.given);\n  }\n\n  if (name.family) {\n    builder.push(name.family);\n  }\n\n  if (name.suffix && options?.suffix !== false) {\n    builder.push(...name.suffix);\n  }\n\n  if (name.use && (options?.all || options?.use)) {\n    builder.push('[' + name.use + ']');\n  }\n\n  if (builder.length === 0 && name.text) {\n    return name.text;\n  }\n\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the given name portion of a FHIR HumanName element.\n * @param name - The name to format.\n * @returns The formatted given name string.\n */\nexport function formatGivenName(name: HumanName): string {\n  const builder: string[] = [];\n  if (name.given) {\n    builder.push(...name.given);\n  }\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the family name portion of a FHIR HumanName element.\n * @param name - The name to format.\n * @returns The formatted family name string.\n */\nexport function formatFamilyName(name: HumanName): string {\n  return name.family ?? '';\n}\n\n/**\n * Returns true if the given date object is a valid date.\n * Dates can be invalid if created by parsing an invalid string.\n * @param date - A date object.\n * @returns Returns true if the date is a valid date.\n */\nexport function isValidDate(date: Date): boolean {\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\n/**\n * Formats a FHIR date string as a human readable string.\n * Handles missing values and invalid dates.\n * @param date - The date to format.\n * @param locales - Optional locales.\n * @param options - Optional date format options.\n * @returns The formatted date string.\n */\nexport function formatDate(\n  date: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!date) {\n    return '';\n  }\n  const d = new Date(date);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  d.setUTCHours(0, 0, 0, 0);\n  return d.toLocaleDateString(locales, { timeZone: 'UTC', ...options });\n}\n\n/**\n * Formats a FHIR time string as a human readable string.\n * Handles missing values and invalid dates.\n * @param time - The date to format.\n * @param locales - Optional locales.\n * @param options - Optional time format options.\n * @returns The formatted time string.\n */\nexport function formatTime(\n  time: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!time) {\n    return '';\n  }\n  const d = new Date('2000-01-01T' + time + 'Z');\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleTimeString(locales, options);\n}\n\n/**\n * Formats a FHIR dateTime string as a human readable string.\n * Handles missing values and invalid dates.\n * @param dateTime - The dateTime to format.\n * @param locales - Optional locales.\n * @param options - Optional dateTime format options.\n * @returns The formatted dateTime string.\n */\nexport function formatDateTime(\n  dateTime: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!dateTime) {\n    return '';\n  }\n  const d = new Date(dateTime);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleString(locales, options);\n}\n\n/**\n * Formats a FHIR Period as a human readable string.\n * @param period - The period to format.\n * @param locales - Optional locales.\n * @param options - Optional period format options.\n * @returns The formatted period string.\n */\nexport function formatPeriod(\n  period: Period | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!period || (!period.start && !period.end)) {\n    return '';\n  }\n  return formatDateTime(period.start, locales, options) + ' - ' + formatDateTime(period.end, locales, options);\n}\n\nconst unitAdverbForm: Record<string, string> = {\n  s: 'every second',\n  min: 'every minute',\n  h: 'hourly',\n  d: 'daily',\n  wk: 'weekly',\n  mo: 'monthly',\n  a: 'annually',\n};\n\nconst singularUnits: Record<string, string> = {\n  s: 'second',\n  min: 'minute',\n  h: 'hour',\n  d: 'day',\n  wk: 'week',\n  mo: 'month',\n  a: 'year',\n};\n\nconst pluralUnits: Record<string, string> = {\n  s: 'seconds',\n  min: 'minutes',\n  h: 'hours',\n  d: 'days',\n  wk: 'weeks',\n  mo: 'months',\n  a: 'years',\n};\n\n/**\n * Formats a FHIR Timing as a human readable string.\n * @param timing - The timing to format.\n * @returns The formatted timing string.\n */\nexport function formatTiming(timing: Timing | undefined): string {\n  if (!timing) {\n    return '';\n  }\n\n  const builder: string[] = [];\n  formatTimingRepeat(builder, timing.repeat);\n\n  if (timing.event) {\n    builder.push(timing.event.map((d) => formatDateTime(d)).join(', '));\n  }\n\n  return capitalize(builder.join(' ').trim());\n}\n\n/**\n * Formats a FHIR Timing repeat element as a human readable string.\n * @param builder - The output string builder.\n * @param repeat - The timing repeat element.\n */\nfunction formatTimingRepeat(builder: string[], repeat: TimingRepeat | undefined): void {\n  if (!repeat?.periodUnit) {\n    // Period unit is the only required field\n    return;\n  }\n\n  const frequency = repeat.frequency ?? 1;\n  const period = repeat.period ?? 1;\n  const periodUnit = repeat.periodUnit;\n\n  if (frequency === 1 && period === 1) {\n    builder.push(unitAdverbForm[periodUnit]);\n  } else {\n    if (frequency === 1) {\n      builder.push('once');\n    } else {\n      builder.push(frequency + ' times');\n    }\n\n    if (period === 1) {\n      builder.push('per ' + singularUnits[periodUnit]);\n    } else {\n      builder.push('per ' + period + ' ' + pluralUnits[periodUnit]);\n    }\n  }\n\n  if (repeat.dayOfWeek) {\n    builder.push('on ' + repeat.dayOfWeek.map(capitalize).join(', '));\n  }\n\n  if (repeat.timeOfDay) {\n    builder.push('at ' + repeat.timeOfDay.map((t) => formatTime(t)).join(', '));\n  }\n}\n\n/**\n * Returns a human-readable string for a FHIR Range datatype, taking into account one-sided ranges\n * @param range - A FHIR Range element\n * @param precision - Number of decimal places to display in the rendered quantity values\n * @param exclusive - If true, one-sided ranges will be rendered with the `>` or `<` bounds rather than `>=` or `<=`\n * @returns A human-readable string representation of the Range\n */\nexport function formatRange(range: Range | undefined, precision?: number, exclusive = false): string {\n  if (exclusive && precision === undefined) {\n    throw new Error('Precision must be specified for exclusive ranges');\n  }\n\n  // Extract high and low range endpoints, explicitly ignoring any comparator\n  // since Range uses SimpleQuantity variants (see http://www.hl7.org/fhir/datatypes.html#Range)\n  const low = range?.low && { ...range.low, comparator: undefined };\n  const high = range?.high && { ...range.high, comparator: undefined };\n  if (low?.value === undefined && high?.value === undefined) {\n    return '';\n  }\n\n  if (low?.value !== undefined && high?.value === undefined) {\n    // Lower bound only\n    if (exclusive && precision !== undefined) {\n      low.value = preciseDecrement(low.value, precision);\n      return `> ${formatQuantity(low, precision)}`;\n    }\n    return `>= ${formatQuantity(low, precision)}`;\n  } else if (low?.value === undefined && high?.value !== undefined) {\n    // Upper bound only\n    if (exclusive && precision !== undefined) {\n      high.value = preciseIncrement(high.value, precision);\n      return `< ${formatQuantity(high, precision)}`;\n    }\n    return `<= ${formatQuantity(high, precision)}`;\n  } else {\n    // Double-sided range\n    if (low?.unit === high?.unit) {\n      delete low?.unit; // Format like \"X - Y units\" instead of \"X units - Y units\"\n    }\n    return `${formatQuantity(low, precision)} - ${formatQuantity(high, precision)}`;\n  }\n}\n\n/**\n * Returns a human-readable string for a FHIR Quantity datatype, taking into account units and comparators\n * @param quantity - A FHIR Quantity element\n * @param precision - Number of decimal places to display in the rendered quantity values\n * @returns A human-readable string representation of the Quantity\n */\nexport function formatQuantity(quantity: Quantity | undefined, precision?: number): string {\n  if (!quantity) {\n    return '';\n  }\n\n  const result = [];\n\n  if (quantity.comparator) {\n    result.push(quantity.comparator);\n    result.push(' ');\n  }\n\n  if (quantity.value !== undefined) {\n    if (precision !== undefined) {\n      result.push(quantity.value.toFixed(precision));\n    } else {\n      result.push(quantity.value);\n    }\n  }\n\n  if (quantity.unit) {\n    if (quantity.unit !== '%' && result[result.length - 1] !== ' ') {\n      result.push(' ');\n    }\n    result.push(quantity.unit);\n  }\n\n  return result.join('').trim();\n}\n\nexport function formatMoney(money: Money | undefined): string {\n  if (money?.value === undefined) {\n    return '';\n  }\n\n  return money.value.toLocaleString(undefined, {\n    style: 'currency',\n    currency: money.currency ?? 'USD',\n    currencyDisplay: 'narrowSymbol',\n  });\n}\n\n/**\n * Formats a CodeableConcept element as a string.\n * @param codeableConcept - A FHIR CodeableConcept element\n * @returns The codeable concept as a string.\n */\nexport function formatCodeableConcept(codeableConcept: CodeableConcept | undefined): string {\n  if (!codeableConcept) {\n    return '';\n  }\n  if (codeableConcept.text) {\n    return codeableConcept.text;\n  }\n  if (codeableConcept.coding) {\n    return codeableConcept.coding.map((c) => formatCoding(c)).join(', ');\n  }\n  return '';\n}\n\n/**\n * Formats a Coding element as a string.\n * @param coding - A FHIR Coding element\n * @returns The coding as a string.\n */\nexport function formatCoding(coding: Coding | undefined): string {\n  return coding?.display ?? coding?.code ?? '';\n}\n\n/**\n * Formats a FHIR Observation resource value as a string.\n * @param obs - A FHIR Observation resource.\n * @returns A human-readable string representation of the Observation.\n */\nexport function formatObservationValue(obs: Observation | ObservationComponent | undefined): string {\n  if (!obs) {\n    return '';\n  }\n\n  if ('component' in obs) {\n    return (obs.component as ObservationComponent[]).map((c) => formatObservationValue(c)).join(' / ');\n  }\n\n  if (obs.valueQuantity) {\n    return formatQuantity(obs.valueQuantity);\n  }\n\n  if (obs.valueCodeableConcept) {\n    return formatCodeableConcept(obs.valueCodeableConcept);\n  }\n\n  if (obs.valueString) {\n    return obs.valueString;\n  }\n\n  return '';\n}\n\n/**\n * Returns the input number increased by the `n` units of the specified precision\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @param n - (default 1) The number of units to add.\n * @returns The result of the increment.\n */\nfunction preciseIncrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) + n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns the input number decreased by the `n` units of the specified precision\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @param n - (default 1) The number of units to subtract.\n * @returns The result of the decrement.\n */\nfunction preciseDecrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) - n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns an integer representation of the number with the given precision.\n * For example, if precision is 2, then 1.2345 will be returned as 123.\n * @param a - The number.\n * @param precision - Optional precision in number of digits.\n * @returns The integer with the given precision.\n */\nfunction toPreciseInteger(a: number, precision?: number): number {\n  if (precision === undefined) {\n    return a;\n  }\n  return Math.round(a * Math.pow(10, precision));\n}\n", "import { InternalSchemaElement, InternalTypeSchema } from './typeschema/types';\n\nexport type BaseSchema = Record<string, { elements: Record<string, Partial<InternalSchemaElement>> }>;\n\nconst normalizedTypes: Record<string, string> = {\n  'http://hl7.org/fhirpath/System.String': 'string',\n};\n\nexport function compressElement(element: InternalSchemaElement): Partial<InternalSchemaElement> {\n  // For each property, only keep \"min\", \"max\", and \"type\"\n  // Only keep \"min\" if not 0\n  // Only keep \"max\" if not 1\n  const outputPropertySchema: Partial<InternalSchemaElement> = {};\n  if (element.min !== 0) {\n    outputPropertySchema.min = element.min;\n  }\n\n  if (element.max !== 1 && Number.isFinite(element.max)) {\n    outputPropertySchema.max = element.max;\n  } else if (element.max === Number.POSITIVE_INFINITY) {\n    outputPropertySchema.max = Number.MAX_SAFE_INTEGER;\n  }\n\n  outputPropertySchema.type = element.type?.map((t) => ({\n    ...t,\n    extension: undefined,\n    code: normalizedTypes[t.code] ?? t.code,\n  }));\n  return outputPropertySchema;\n}\n\nexport function inflateElement(partial: Partial<InternalSchemaElement>): InternalSchemaElement {\n  const max = partial.max && partial.max === Number.MAX_SAFE_INTEGER ? Number.POSITIVE_INFINITY : partial.max;\n  return {\n    path: '',\n    description: '',\n    type: partial.type ?? [],\n    min: partial.min ?? 0,\n    max: max ?? 1,\n    isArray: !!max && max > 1,\n    constraints: [],\n  };\n}\n\nexport function inflateBaseSchema(base: BaseSchema): Record<string, InternalTypeSchema> {\n  const output: Record<string, InternalTypeSchema> = Object.create(null);\n  for (const [key, schema] of Object.entries(base)) {\n    output[key] = {\n      name: key,\n      elements: Object.fromEntries(\n        Object.entries(schema.elements).map(([property, partial]) => [property, inflateElement(partial)])\n      ),\n      constraints: [],\n      innerTypes: [],\n    };\n  }\n  return output;\n}\n", "{\n  \"Element\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      }\n    }\n  },\n  \"BackboneElement\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      }\n    }\n  },\n  \"Address\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"line\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"city\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"district\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"state\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"postalCode\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"country\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Age\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Annotation\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"author[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          },\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"time\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"text\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      }\n    }\n  },\n  \"Attachment\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"contentType\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"language\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      },\n      \"url\": {\n        \"type\": [\n          {\n            \"code\": \"url\"\n          }\n        ]\n      },\n      \"size\": {\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      },\n      \"hash\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      },\n      \"title\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"creation\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"CodeableConcept\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"coding\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"Coding\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"version\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"userSelected\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      }\n    }\n  },\n  \"ContactDetail\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"telecom\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ContactPoint\"\n          }\n        ]\n      }\n    }\n  },\n  \"ContactPoint\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"rank\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Contributor\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"name\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"contact\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ContactDetail\"\n          }\n        ]\n      }\n    }\n  },\n  \"Count\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"DataRequirement\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"\n            ]\n          }\n        ]\n      },\n      \"subject[x]\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Group\"\n            ]\n          }\n        ]\n      },\n      \"mustSupport\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"codeFilter\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementCodeFilter\"\n          }\n        ]\n      },\n      \"dateFilter\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementDateFilter\"\n          }\n        ]\n      },\n      \"limit\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"sort\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementSort\"\n          }\n        ]\n      }\n    }\n  },\n  \"Distance\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Dosage\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"sequence\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"additionalInstruction\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"patientInstruction\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"timing\": {\n        \"type\": [\n          {\n            \"code\": \"Timing\"\n          }\n        ]\n      },\n      \"asNeeded[x]\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"site\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"route\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"method\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"doseAndRate\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DosageDoseAndRate\"\n          }\n        ]\n      },\n      \"maxDosePerPeriod\": {\n        \"type\": [\n          {\n            \"code\": \"Ratio\"\n          }\n        ]\n      },\n      \"maxDosePerAdministration\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"maxDosePerLifetime\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      }\n    }\n  },\n  \"Duration\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"representation\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"sliceName\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"sliceIsConstraining\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"label\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"code\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"slicing\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionSlicing\"\n          }\n        ]\n      },\n      \"short\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"definition\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"comment\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"requirements\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"alias\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"min\": {\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      },\n      \"max\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"base\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionBase\"\n          }\n        ]\n      },\n      \"contentReference\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"type\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionType\"\n          }\n        ]\n      },\n      \"defaultValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"meaningWhenMissing\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"orderMeaning\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"fixed[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"pattern[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"example\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionExample\"\n          }\n        ]\n      },\n      \"minValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"maxValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"maxLength\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"condition\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"constraint\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionConstraint\"\n          }\n        ]\n      },\n      \"mustSupport\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"isModifier\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"isModifierReason\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"isSummary\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"binding\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionBinding\"\n          }\n        ]\n      },\n      \"mapping\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionMapping\"\n          }\n        ]\n      }\n    }\n  },\n  \"Expression\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"description\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"language\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"expression\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"reference\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      }\n    }\n  },\n  \"Extension\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"url\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      }\n    }\n  },\n  \"HumanName\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"family\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"given\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"prefix\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"suffix\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Identifier\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      },\n      \"assigner\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"MarketingStatus\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"country\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"jurisdiction\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"status\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"dateRange\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      },\n      \"restoreDate\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"Meta\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"versionId\": {\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"lastUpdated\": {\n        \"type\": [\n          {\n            \"code\": \"instant\"\n          }\n        ]\n      },\n      \"source\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"\n            ]\n          }\n        ]\n      },\n      \"security\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"tag\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"project\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"author\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"account\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"compartment\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      }\n    }\n  },\n  \"Money\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"currency\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Narrative\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"status\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"div\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"xhtml\"\n          }\n        ]\n      }\n    }\n  },\n  \"ParameterDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"use\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"min\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"max\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"documentation\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"Period\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"start\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"end\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"Population\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"age[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"gender\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"race\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"physiologicalCondition\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"ProdCharacteristic\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"height\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"width\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"depth\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"weight\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"nominalVolume\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"externalDiameter\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"shape\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"color\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"imprint\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"image\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Attachment\"\n          }\n        ]\n      },\n      \"scoring\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"ProductShelfLife\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"identifier\": {\n        \"type\": [\n          {\n            \"code\": \"Identifier\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"period\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"specialPrecautionsForStorage\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"Quantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Range\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"low\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"high\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      }\n    }\n  },\n  \"Ratio\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"numerator\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"denominator\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      }\n    }\n  },\n  \"Reference\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"reference\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"identifier\": {\n        \"type\": [\n          {\n            \"code\": \"Identifier\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"RelatedArtifact\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"label\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"citation\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"url\": {\n        \"type\": [\n          {\n            \"code\": \"url\"\n          }\n        ]\n      },\n      \"document\": {\n        \"type\": [\n          {\n            \"code\": \"Attachment\"\n          }\n        ]\n      },\n      \"resource\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Resource\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"SampledData\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"origin\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"period\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"factor\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"lowerLimit\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"upperLimit\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"dimensions\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"Signature\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"when\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"instant\"\n          }\n        ]\n      },\n      \"who\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/PractitionerRole\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/Device\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      },\n      \"onBehalfOf\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/PractitionerRole\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/Device\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      },\n      \"targetFormat\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"sigFormat\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      }\n    }\n  },\n  \"SubstanceAmount\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"amount[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"amountType\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"amountText\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"referenceRange\": {\n        \"type\": [\n          {\n            \"code\": \"SubstanceAmountReferenceRange\"\n          }\n        ]\n      }\n    }\n  },\n  \"Timing\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"event\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"repeat\": {\n        \"type\": [\n          {\n            \"code\": \"TimingRepeat\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"TriggerDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"timing[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Schedule\"\n            ]\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"data\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirement\"\n          }\n        ]\n      },\n      \"condition\": {\n        \"type\": [\n          {\n            \"code\": \"Expression\"\n          }\n        ]\n      }\n    }\n  },\n  \"UsageContext\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"code\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/PlanDefinition\",\n              \"http://hl7.org/fhir/StructureDefinition/ResearchStudy\",\n              \"http://hl7.org/fhir/StructureDefinition/InsurancePlan\",\n              \"http://hl7.org/fhir/StructureDefinition/HealthcareService\",\n              \"http://hl7.org/fhir/StructureDefinition/Group\",\n              \"http://hl7.org/fhir/StructureDefinition/Location\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"MoneyQuantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"SimpleQuantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"max\": 0,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"MetadataResource\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"meta\": {\n        \"type\": [\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"implicitRules\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"language\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"Narrative\"\n          }\n        ]\n      },\n      \"contained\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Resource\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"url\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"version\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"title\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"status\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"experimental\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"date\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"publisher\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"contact\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ContactDetail\"\n          }\n        ]\n      },\n      \"description\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"useContext\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"UsageContext\"\n          }\n        ]\n      },\n      \"jurisdiction\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"IdentityProvider\": {\n    \"elements\": {\n      \"authorizeUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"tokenUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"tokenAuthMethod\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"userInfoUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"clientId\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"clientSecret\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"usePkce\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"useSubject\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      }\n    }\n  }\n}", "import { Coding, Period, Quantity } from '@medplum/fhirtypes';\nimport { getElementDefinition, isResource, PropertyType, TypedValue } from '../types';\nimport { InternalSchemaElement } from '../typeschema/types';\nimport { capitalize, isEmpty } from '../utils';\n\n/**\n * Returns a single element array with a typed boolean value.\n * @param value - The primitive boolean value.\n * @returns Single element array with a typed boolean value.\n */\nexport function booleanToTypedValue(value: boolean): [TypedValue] {\n  return [{ type: PropertyType.boolean, value }];\n}\n\n/**\n * Returns a \"best guess\" TypedValue for a given value.\n * @param value - The unknown value to check.\n * @returns A \"best guess\" TypedValue for the given value.\n */\nexport function toTypedValue(value: unknown): TypedValue {\n  if (value === null || value === undefined) {\n    return { type: 'undefined', value: undefined };\n  } else if (Number.isSafeInteger(value)) {\n    return { type: PropertyType.integer, value };\n  } else if (typeof value === 'number') {\n    return { type: PropertyType.decimal, value };\n  } else if (typeof value === 'boolean') {\n    return { type: PropertyType.boolean, value };\n  } else if (typeof value === 'string') {\n    return { type: PropertyType.string, value };\n  } else if (isQuantity(value)) {\n    return { type: PropertyType.Quantity, value };\n  } else if (isResource(value)) {\n    return { type: value.resourceType, value };\n  } else {\n    return { type: PropertyType.BackboneElement, value };\n  }\n}\n\n/**\n * Converts unknown object into a JavaScript boolean.\n * Note that this is different than the FHIRPath \"toBoolean\",\n * which has particular semantics around arrays, empty arrays, and type conversions.\n * @param obj - Any value or array of values.\n * @returns The converted boolean value according to FHIRPath rules.\n */\nexport function toJsBoolean(obj: TypedValue[]): boolean {\n  return obj.length === 0 ? false : !!obj[0].value;\n}\n\nexport function singleton(collection: TypedValue[], type?: string): TypedValue | undefined {\n  if (collection.length === 0) {\n    return undefined;\n  } else if (collection.length === 1 && (!type || collection[0].type === type)) {\n    return collection[0];\n  } else {\n    throw new Error(`Expected singleton of type ${type}, but found ${JSON.stringify(collection)}`);\n  }\n}\n\n/**\n * Returns the value of the property and the property type.\n * Some property definitions support multiple types.\n * For example, \"Observation.value[x]\" can be \"valueString\", \"valueInteger\", \"valueQuantity\", etc.\n * According to the spec, there can only be one property for a given element definition.\n * This function returns the value and the type.\n * @param input - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @returns The value of the property and the property type.\n */\nexport function getTypedPropertyValue(input: TypedValue, path: string): TypedValue[] | TypedValue | undefined {\n  if (!input.value) {\n    return undefined;\n  }\n\n  const elementDefinition = getElementDefinition(input.type, path);\n  if (elementDefinition) {\n    return getTypedPropertyValueWithSchema(input, path, elementDefinition);\n  }\n\n  return getTypedPropertyValueWithoutSchema(input, path);\n}\n\n/**\n * Returns the value of the property and the property type using a type schema.\n * @param input - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @param element - The property element definition.\n * @returns The value of the property and the property type.\n */\nfunction getTypedPropertyValueWithSchema(\n  input: TypedValue,\n  path: string,\n  element: InternalSchemaElement\n): TypedValue[] | TypedValue | undefined {\n  const types = element.type;\n  if (!types || types.length === 0) {\n    return undefined;\n  }\n\n  let resultValue: any = undefined;\n  let resultType = 'undefined';\n\n  if (types.length === 1) {\n    resultValue = input.value[path];\n    resultType = types[0].code;\n  } else {\n    for (const type of types) {\n      const path2 = path.replace('[x]', '') + capitalize(type.code);\n      if (path2 in input.value) {\n        resultValue = input.value[path2];\n        resultType = type.code;\n        break;\n      }\n    }\n  }\n  const primitiveExtension = input.value['_' + path];\n  if (primitiveExtension) {\n    if (Array.isArray(resultValue)) {\n      resultValue = resultValue.map((v, i) => (primitiveExtension[i] ? safeAssign(v ?? {}, primitiveExtension[i]) : v));\n    } else {\n      resultValue = safeAssign(resultValue ?? {}, primitiveExtension);\n    }\n  }\n\n  if (isEmpty(resultValue)) {\n    return undefined;\n  }\n\n  if (resultType === 'Element' || resultType === 'BackboneElement') {\n    resultType = element.type[0].code;\n  }\n\n  if (Array.isArray(resultValue)) {\n    return resultValue.map((element) => toTypedValueWithType(element, resultType));\n  } else {\n    return toTypedValueWithType(resultValue, resultType);\n  }\n}\n\nfunction toTypedValueWithType(value: any, type: string): TypedValue {\n  if (type === 'Resource' && isResource(value)) {\n    type = value.resourceType;\n  }\n  return { type, value };\n}\n\n/**\n * Returns the value of the property and the property type using a type schema.\n * Note that because the type schema is not available, this function may be inaccurate.\n * In some cases, that is the desired behavior.\n * @param typedValue - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @returns The value of the property and the property type.\n */\nfunction getTypedPropertyValueWithoutSchema(\n  typedValue: TypedValue,\n  path: string\n): TypedValue[] | TypedValue | undefined {\n  const input = typedValue.value;\n  if (!input || typeof input !== 'object') {\n    return undefined;\n  }\n\n  let result: any = undefined;\n  if (path in input) {\n    result = (input as { [key: string]: unknown })[path];\n  } else {\n    // Only support property names that would be valid types\n    // Examples:\n    // value + valueString = ok, because \"string\" is valid\n    // value + valueDecimal = ok, because \"decimal\" is valid\n    // id + identifier = not ok, because \"entifier\" is not a valid type\n    // resource + resourceType = not ok, because \"type\" is not a valid type\n    //eslint-disable-next-line guard-for-in\n    for (const propertyType in PropertyType) {\n      const propertyName = path + capitalize(propertyType);\n      if (propertyName in input) {\n        result = (input as { [key: string]: unknown })[propertyName];\n        break;\n      }\n    }\n  }\n\n  if (isEmpty(result)) {\n    return undefined;\n  }\n\n  if (Array.isArray(result)) {\n    return result.map(toTypedValue);\n  } else {\n    return toTypedValue(result);\n  }\n}\n\n/**\n * Removes duplicates in array using FHIRPath equality rules.\n * @param arr - The input array.\n * @returns The result array with duplicates removed.\n */\nexport function removeDuplicates(arr: TypedValue[]): TypedValue[] {\n  const result: TypedValue[] = [];\n  for (const i of arr) {\n    let found = false;\n    for (const j of result) {\n      if (toJsBoolean(fhirPathEquals(i, j))) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * Returns a negated FHIRPath boolean expression.\n * @param input - The input array.\n * @returns The negated type value array.\n */\nexport function fhirPathNot(input: TypedValue[]): TypedValue[] {\n  return booleanToTypedValue(!toJsBoolean(input));\n}\n\n/**\n * Determines if two arrays are equal according to FHIRPath equality rules.\n * @param x - The first array.\n * @param y - The second array.\n * @returns FHIRPath true if the arrays are equal.\n */\nexport function fhirPathArrayEquals(x: TypedValue[], y: TypedValue[]): TypedValue[] {\n  if (x.length === 0 || y.length === 0) {\n    return [];\n  }\n  if (x.length !== y.length) {\n    return booleanToTypedValue(false);\n  }\n  return booleanToTypedValue(x.every((val, index) => toJsBoolean(fhirPathEquals(val, y[index]))));\n}\n\n/**\n * Determines if two values are equal according to FHIRPath equality rules.\n * @param x - The first value.\n * @param y - The second value.\n * @returns True if equal.\n */\nexport function fhirPathEquals(x: TypedValue, y: TypedValue): TypedValue[] {\n  const xValue = x.value?.valueOf();\n  const yValue = y.value?.valueOf();\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    return booleanToTypedValue(Math.abs(xValue - yValue) < 1e-8);\n  }\n  if (isQuantity(xValue) && isQuantity(yValue)) {\n    return booleanToTypedValue(isQuantityEquivalent(xValue, yValue));\n  }\n  if (typeof xValue === 'object' && typeof yValue === 'object') {\n    return booleanToTypedValue(deepEquals(x, y));\n  }\n  return booleanToTypedValue(xValue === yValue);\n}\n\n/**\n * Determines if two arrays are equivalent according to FHIRPath equality rules.\n * @param x - The first array.\n * @param y - The second array.\n * @returns FHIRPath true if the arrays are equivalent.\n */\nexport function fhirPathArrayEquivalent(x: TypedValue[], y: TypedValue[]): TypedValue[] {\n  if (x.length === 0 && y.length === 0) {\n    return booleanToTypedValue(true);\n  }\n  if (x.length !== y.length) {\n    return booleanToTypedValue(false);\n  }\n  x.sort(fhirPathEquivalentCompare);\n  y.sort(fhirPathEquivalentCompare);\n  return booleanToTypedValue(x.every((val, index) => toJsBoolean(fhirPathEquivalent(val, y[index]))));\n}\n\n/**\n * Determines if two values are equivalent according to FHIRPath equality rules.\n * @param x - The first value.\n * @param y - The second value.\n * @returns True if equivalent.\n */\nexport function fhirPathEquivalent(x: TypedValue, y: TypedValue): TypedValue[] {\n  const { type: xType, value: xValueRaw } = x;\n  const { type: yType, value: yValueRaw } = y;\n  const xValue = xValueRaw?.valueOf();\n  const yValue = yValueRaw?.valueOf();\n\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    // Use more generous threshold than equality\n    // Decimal: values must be equal, comparison is done on values rounded to the precision of the least precise operand.\n    // Trailing zeroes after the decimal are ignored in determining precision.\n    return booleanToTypedValue(Math.abs(xValue - yValue) < 0.01);\n  }\n  if (isQuantity(xValue) && isQuantity(yValue)) {\n    return booleanToTypedValue(isQuantityEquivalent(xValue, yValue));\n  }\n\n  if (xType === 'Coding' && yType === 'Coding') {\n    if (typeof xValue !== 'object' || typeof yValue !== 'object') {\n      return booleanToTypedValue(false);\n    }\n    // \"In addition, for Coding values, equivalence is defined based on the code and system elements only.\n    // The version, display, and userSelected elements are ignored for the purposes of determining Coding equivalence.\"\n    // Source: https://hl7.org/fhir/fhirpath.html#changes\n\n    // We need to check if both `code` and `system` are equivalent.\n    // If both have undefined `system` fields, If so, then the two's `system` values must be compared.\n    // Essentially they must both be `undefined` or both the same.\n    return booleanToTypedValue(\n      (xValue as Coding).code === (yValue as Coding).code && (xValue as Coding).system === (yValue as Coding).system\n    );\n  }\n\n  if (typeof xValue === 'object' && typeof yValue === 'object') {\n    return booleanToTypedValue(deepEquals({ ...xValue, id: undefined }, { ...yValue, id: undefined }));\n  }\n  if (typeof xValue === 'string' && typeof yValue === 'string') {\n    // String: the strings must be the same, ignoring case and locale, and normalizing whitespace\n    // (see String Equivalence for more details).\n    return booleanToTypedValue(xValue.toLowerCase() === yValue.toLowerCase());\n  }\n  return booleanToTypedValue(xValue === yValue);\n}\n\n/**\n * Returns the sort order of two values for FHIRPath array equivalence.\n * @param x - The first value.\n * @param y - The second value.\n * @returns The sort order of the values.\n */\nfunction fhirPathEquivalentCompare(x: TypedValue, y: TypedValue): number {\n  const xValue = x.value?.valueOf();\n  const yValue = y.value?.valueOf();\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    return xValue - yValue;\n  }\n  if (typeof xValue === 'string' && typeof yValue === 'string') {\n    return xValue.localeCompare(yValue);\n  }\n  return 0;\n}\n\n/**\n * Determines if the typed value is the desired type.\n * @param typedValue - The typed value to check.\n * @param desiredType - The desired type name.\n * @returns True if the typed value is of the desired type.\n */\nexport function fhirPathIs(typedValue: TypedValue, desiredType: string): boolean {\n  const { value } = typedValue;\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  switch (desiredType) {\n    case 'Boolean':\n      return typeof value === 'boolean';\n    case 'Decimal':\n    case 'Integer':\n      return typeof value === 'number';\n    case 'Date':\n      return typeof value === 'string' && !!/^\\d{4}(-\\d{2}(-\\d{2})?)?/.exec(value);\n    case 'DateTime':\n      return typeof value === 'string' && !!/^\\d{4}(-\\d{2}(-\\d{2})?)?T/.exec(value);\n    case 'Time':\n      return typeof value === 'string' && !!/^T\\d/.exec(value);\n    case 'Period':\n      return isPeriod(value);\n    case 'Quantity':\n      return isQuantity(value);\n    default:\n      return typeof value === 'object' && value?.resourceType === desiredType;\n  }\n}\n\n/**\n * Determines if the input is a Period object.\n * This is heuristic based, as we do not have strong typing at runtime.\n * @param input - The input value.\n * @returns True if the input is a period.\n */\nexport function isPeriod(input: unknown): input is Period {\n  return !!(input && typeof input === 'object' && 'start' in input);\n}\n\n/**\n * Determines if the input is a Quantity object.\n * This is heuristic based, as we do not have strong typing at runtime.\n * @param input - The input value.\n * @returns True if the input is a quantity.\n */\nexport function isQuantity(input: unknown): input is Quantity {\n  return !!(input && typeof input === 'object' && 'value' in input && typeof (input as Quantity).value === 'number');\n}\n\nexport function isQuantityEquivalent(x: Quantity, y: Quantity): boolean {\n  return (\n    Math.abs((x.value as number) - (y.value as number)) < 0.01 &&\n    (x.unit === y.unit || x.code === y.code || x.unit === y.code || x.code === y.unit)\n  );\n}\n\n/**\n * Resource equality.\n * See: https://dmitripavlutin.com/how-to-compare-objects-in-javascript/#4-deep-equality\n * @param object1 - The first object.\n * @param object2 - The second object.\n * @returns True if the objects are equal.\n */\nfunction deepEquals<T1 extends object, T2 extends object>(object1: T1, object2: T2): boolean {\n  const keys1 = Object.keys(object1) as (keyof T1)[];\n  const keys2 = Object.keys(object2) as (keyof T2)[];\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key] as unknown;\n    const val2 = object2[key as unknown as keyof T2] as unknown;\n    if (isObject(val1) && isObject(val2)) {\n      if (!deepEquals(val1, val2)) {\n        return false;\n      }\n    } else if (val1 !== val2) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(obj: unknown): obj is object {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction safeAssign(target: any, source: any): any {\n  delete source.__proto__; //eslint-disable-line no-proto\n  delete source.constructor;\n  return Object.assign(target, source);\n}\n", "import { OperationOutcome, OperationOutcomeIssue } from '@medplum/fhirtypes';\nimport { Constraint } from './typeschema/types';\n\nconst OK_ID = 'ok';\nconst CREATED_ID = 'created';\nconst GONE_ID = 'gone';\nconst NOT_MODIFIED_ID = 'not-modified';\nconst NOT_FOUND_ID = 'not-found';\nconst UNAUTHORIZED_ID = 'unauthorized';\nconst FORBIDDEN_ID = 'forbidden';\nconst TOO_MANY_REQUESTS_ID = 'too-many-requests';\nconst ACCEPTED_ID = 'accepted';\n\nexport const allOk: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: OK_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'All OK',\n      },\n    },\n  ],\n};\n\nexport const created: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: CREATED_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'Created',\n      },\n    },\n  ],\n};\n\nexport const notModified: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: NOT_MODIFIED_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'Not Modified',\n      },\n    },\n  ],\n};\n\nexport const notFound: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: NOT_FOUND_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'not-found',\n      details: {\n        text: 'Not found',\n      },\n    },\n  ],\n};\n\nexport const unauthorized: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: UNAUTHORIZED_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'login',\n      details: {\n        text: 'Unauthorized',\n      },\n    },\n  ],\n};\n\nexport const forbidden: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: FORBIDDEN_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'forbidden',\n      details: {\n        text: 'Forbidden',\n      },\n    },\n  ],\n};\n\nexport const gone: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: GONE_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'deleted',\n      details: {\n        text: 'Gone',\n      },\n    },\n  ],\n};\n\nexport const tooManyRequests: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: TOO_MANY_REQUESTS_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'throttled',\n      details: {\n        text: 'Too Many Requests',\n      },\n    },\n  ],\n};\n\nexport function accepted(location: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    id: ACCEPTED_ID,\n    issue: [\n      {\n        severity: 'information',\n        code: 'informational',\n        details: {\n          text: 'Accepted',\n        },\n        diagnostics: location,\n      },\n    ],\n  };\n}\n\nexport function badRequest(details: string, expression?: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'invalid',\n        details: {\n          text: details,\n        },\n        expression: expression ? [expression] : undefined,\n      },\n    ],\n  };\n}\n\nexport function validationError(details: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'structure',\n        details: {\n          text: details,\n        },\n      },\n    ],\n  };\n}\n\nexport function serverError(err: Error): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'exception',\n        details: {\n          text: 'Internal server error',\n        },\n        diagnostics: err.toString(),\n      },\n    ],\n  };\n}\n\nexport function isOperationOutcome(value: unknown): value is OperationOutcome {\n  return typeof value === 'object' && value !== null && (value as any).resourceType === 'OperationOutcome';\n}\n\nexport function isOk(outcome: OperationOutcome): boolean {\n  return (\n    outcome.id === OK_ID || outcome.id === CREATED_ID || outcome.id === NOT_MODIFIED_ID || outcome.id === ACCEPTED_ID\n  );\n}\n\nexport function isCreated(outcome: OperationOutcome): boolean {\n  return outcome.id === CREATED_ID;\n}\n\nexport function isAccepted(outcome: OperationOutcome): boolean {\n  return outcome.id === ACCEPTED_ID;\n}\n\nexport function isNotFound(outcome: OperationOutcome): boolean {\n  return outcome.id === NOT_FOUND_ID;\n}\n\nexport function isGone(outcome: OperationOutcome): boolean {\n  return outcome.id === GONE_ID;\n}\n\nexport function getStatus(outcome: OperationOutcome): number {\n  if (outcome.id === OK_ID) {\n    return 200;\n  } else if (outcome.id === CREATED_ID) {\n    return 201;\n  } else if (outcome.id === ACCEPTED_ID) {\n    return 202;\n  } else if (outcome.id === NOT_MODIFIED_ID) {\n    return 304;\n  } else if (outcome.id === UNAUTHORIZED_ID) {\n    return 401;\n  } else if (outcome.id === FORBIDDEN_ID) {\n    return 403;\n  } else if (outcome.id === NOT_FOUND_ID) {\n    return 404;\n  } else if (outcome.id === GONE_ID) {\n    return 410;\n  } else if (outcome.id === TOO_MANY_REQUESTS_ID) {\n    return 429;\n  } else {\n    return 400;\n  }\n}\n\n/**\n * Asserts that the operation completed successfully and that the resource is defined.\n * @param outcome - The operation outcome.\n * @param resource - The resource that may or may not have been returned.\n */\nexport function assertOk<T>(outcome: OperationOutcome, resource: T | undefined): asserts resource is T {\n  if (!isOk(outcome) || resource === undefined) {\n    throw new OperationOutcomeError(outcome);\n  }\n}\n\nexport class OperationOutcomeError extends Error {\n  readonly outcome: OperationOutcome;\n\n  constructor(outcome: OperationOutcome, cause?: unknown) {\n    super(operationOutcomeToString(outcome));\n    this.outcome = outcome;\n    this.cause = cause;\n  }\n}\n\n/**\n * Normalizes an error object into an OperationOutcome.\n * @param error - The error value which could be a string, Error, OperationOutcome, or other unknown type.\n * @returns The normalized OperationOutcome.\n */\nexport function normalizeOperationOutcome(error: unknown): OperationOutcome {\n  if (error instanceof OperationOutcomeError) {\n    return error.outcome;\n  }\n  if (isOperationOutcome(error)) {\n    return error;\n  }\n  return badRequest(normalizeErrorString(error));\n}\n\n/**\n * Normalizes an error object into a displayable error string.\n * @param error - The error value which could be a string, Error, OperationOutcome, or other unknown type.\n * @returns A display string for the error.\n */\nexport function normalizeErrorString(error: unknown): string {\n  if (!error) {\n    return 'Unknown error';\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  if (isOperationOutcome(error)) {\n    return operationOutcomeToString(error);\n  }\n  if (typeof error === 'object' && 'code' in error && typeof error.code === 'string') {\n    return error.code;\n  }\n  return JSON.stringify(error);\n}\n\n/**\n * Returns a string represenation of the operation outcome.\n * @param outcome - The operation outcome.\n * @returns The string representation of the operation outcome.\n */\nexport function operationOutcomeToString(outcome: OperationOutcome): string {\n  const strs = outcome.issue?.map(operationOutcomeIssueToString) ?? [];\n  return strs.length > 0 ? strs.join('; ') : 'Unknown error';\n}\n\n/**\n * Returns a string represenation of the operation outcome issue.\n * @param issue - The operation outcome issue.\n * @returns The string representation of the operation outcome issue.\n */\nexport function operationOutcomeIssueToString(issue: OperationOutcomeIssue): string {\n  let issueStr;\n  if (issue.details?.text) {\n    if (issue.diagnostics) {\n      issueStr = `${issue.details.text} (${issue.diagnostics})`;\n    } else {\n      issueStr = issue.details.text;\n    }\n  } else if (issue.diagnostics) {\n    issueStr = issue.diagnostics;\n  } else {\n    issueStr = 'Unknown error';\n  }\n  if (issue.expression?.length) {\n    issueStr += ` (${issue.expression.join(', ')})`;\n  }\n  return issueStr;\n}\n\ntype IssueType = 'structure' | 'invariant' | 'processing';\n\nfunction errorIssue(code: IssueType, message: string, path: string, data?: Record<string, any>): OperationOutcomeIssue {\n  const issue: OperationOutcomeIssue = {\n    severity: 'error',\n    code,\n    details: {\n      text: message,\n    },\n    expression: [path],\n  };\n  if (data) {\n    issue.diagnostics = JSON.stringify(data);\n  }\n  return issue;\n}\n\nexport function createStructureIssue(expression: string, details: string): OperationOutcomeIssue {\n  return errorIssue('structure', details, expression);\n}\n\nexport function createConstraintIssue(expression: string, constraint: Constraint): OperationOutcomeIssue {\n  return errorIssue('invariant', `Constraint ${constraint.key} not met: ${constraint.description}`, expression, {\n    fhirpath: constraint.expression,\n  });\n}\n\nexport function createProcessingIssue(\n  expression: string,\n  message: string,\n  err: Error,\n  data?: Record<string, any>\n): OperationOutcomeIssue {\n  return errorIssue('processing', message, expression, { ...data, error: err });\n}\n", "import {\n  Bundle,\n  Coding,\n  ElementDefinition,\n  ElementDefinitionBinding,\n  Resource,\n  ResourceType,\n  StructureDefinition,\n} from '@medplum/fhirtypes';\nimport { inflateBaseSchema } from '../base-schema';\nimport baseSchema from '../base-schema.json';\nimport { getTypedPropertyValue } from '../fhirpath/utils';\nimport { OperationOutcomeError, serverError } from '../outcomes';\nimport { TypedValue, getElementDefinitionTypeName, isResourceTypeSchema } from '../types';\nimport { capitalize, isEmpty } from '../utils';\n\n/**\n * Internal representation of a non-primitive FHIR type, suitable for use in resource validation\n */\nexport interface InternalTypeSchema {\n  name: string;\n  url?: string;\n  kind?: string;\n  description?: string;\n  elements: Record<string, InternalSchemaElement>;\n  constraints?: Constraint[];\n  parentType?: InternalTypeSchema;\n  innerTypes: InternalTypeSchema[];\n  summaryProperties?: Set<string>;\n  mandatoryProperties?: Set<string>;\n}\n\nexport interface InternalSchemaElement {\n  description: string;\n  path: string;\n  min: number;\n  max: number;\n  isArray?: boolean;\n  constraints?: Constraint[];\n  type: ElementType[];\n  slicing?: SlicingRules;\n  fixed?: TypedValue;\n  pattern?: TypedValue;\n  binding?: ElementDefinitionBinding;\n}\n\nexport interface ElementType {\n  code: string;\n  targetProfile?: string[];\n}\n\nexport interface Constraint {\n  key: string;\n  severity: 'error' | 'warning';\n  expression: string;\n  description: string;\n}\n\nexport interface SlicingRules {\n  discriminator: SliceDiscriminator[];\n  ordered: boolean;\n  rule?: 'open' | 'closed' | 'openAtEnd';\n  slices: SliceDefinition[];\n}\n\nexport interface SliceDefinition {\n  name: string;\n  type?: ElementType[];\n  elements: Record<string, InternalSchemaElement>;\n  min: number;\n  max: number;\n}\n\nexport interface SliceDiscriminator {\n  path: string;\n  type: string;\n}\n\n/**\n * Parses a StructureDefinition resource into an internal schema better suited for\n * programmatic validation and usage in internal systems\n * @param sd - The StructureDefinition resource to parse\n * @returns The parsed schema for the given resource type\n * @experimental\n */\nexport function parseStructureDefinition(sd: StructureDefinition): InternalTypeSchema {\n  return new StructureDefinitionParser(sd).parse();\n}\n\nconst DATA_TYPES: Record<string, InternalTypeSchema> = inflateBaseSchema(baseSchema);\n\nexport function indexStructureDefinitionBundle(bundle: StructureDefinition[] | Bundle): void {\n  const sds = Array.isArray(bundle) ? bundle : bundle.entry?.map((e) => e.resource as StructureDefinition) ?? [];\n  for (const sd of sds) {\n    loadDataType(sd);\n  }\n}\n\nexport function loadDataType(sd: StructureDefinition): void {\n  if (!sd?.name) {\n    throw new Error(`Failed loading StructureDefinition from bundle`);\n  }\n  if (sd.resourceType !== 'StructureDefinition') {\n    return;\n  }\n  const schema = parseStructureDefinition(sd);\n  DATA_TYPES[sd.name] = schema;\n  for (const inner of schema.innerTypes) {\n    inner.parentType = schema;\n    DATA_TYPES[inner.name] = inner;\n  }\n}\n\nexport function getAllDataTypes(): Record<string, InternalTypeSchema> {\n  return DATA_TYPES;\n}\n\nexport function isDataTypeLoaded(type: string): boolean {\n  return !!DATA_TYPES[type];\n}\n\nexport function tryGetDataType(type: string): InternalTypeSchema | undefined {\n  return DATA_TYPES[type];\n}\n\nexport function getDataType(type: string): InternalTypeSchema {\n  const schema = DATA_TYPES[type];\n  if (!schema) {\n    throw new OperationOutcomeError(serverError(Error('Unknown data type: ' + type)));\n  }\n  return schema;\n}\n\n/**\n * Returns true if the given string is a valid FHIR resource type.\n *\n * @example\n * ```ts\n * isResourceType('Patient'); // true\n * isResourceType('XYZ'); // false\n * ```\n *\n * @param resourceType - The candidate resource type string.\n * @returns True if the resource type is a valid FHIR resource type.\n */\nexport function isResourceType(resourceType: string): boolean {\n  const typeSchema = DATA_TYPES[resourceType];\n  return typeSchema && isResourceTypeSchema(typeSchema);\n}\n\ninterface BackboneContext {\n  type: InternalTypeSchema;\n  path: string;\n  parent?: BackboneContext;\n}\n\n/**\n * @experimental\n */\nclass StructureDefinitionParser {\n  private readonly root: ElementDefinition;\n  private readonly elements: ElementDefinition[];\n  private readonly elementIndex: Record<string, ElementDefinition>;\n  private index: number;\n  private readonly resourceSchema: InternalTypeSchema;\n  private slicingContext: { field: SlicingRules; current?: SliceDefinition; path: string } | undefined;\n  private innerTypes: InternalTypeSchema[];\n  private backboneContext: BackboneContext | undefined;\n\n  /**\n   * @param sd - The StructureDefinition to parse\n   * @throws Throws when the StructureDefinition does not have a populated `snapshot` field\n   */\n  constructor(sd: StructureDefinition) {\n    if (!sd.snapshot?.element || sd.snapshot.element.length === 0) {\n      throw new Error(`No snapshot defined for StructureDefinition '${sd.name}'`);\n    }\n\n    this.root = sd.snapshot.element[0];\n    this.elements = sd.snapshot.element.slice(1);\n    this.elementIndex = Object.create(null);\n    this.index = 0;\n    this.resourceSchema = {\n      name: sd.name as ResourceType,\n      url: sd.url as string,\n      kind: sd.kind,\n      description: getDescription(sd),\n      elements: {},\n      constraints: this.parseElementDefinition(this.root).constraints,\n      innerTypes: [],\n      summaryProperties: new Set(),\n      mandatoryProperties: new Set(),\n    };\n    this.innerTypes = [];\n  }\n\n  parse(): InternalTypeSchema {\n    let element = this.next();\n    while (element) {\n      if (element.sliceName) {\n        // Start of slice: this ElementDefinition defines the top-level element of a slice value\n        this.parseSliceStart(element);\n      } else if (element.id?.includes(':')) {\n        // Slice element, part of some slice definition\n        if (this.slicingContext?.current) {\n          const path = elementPath(element, this.slicingContext.path);\n          this.slicingContext.current.elements[path] = this.parseElementDefinition(element);\n        }\n      } else {\n        // Normal field definition\n        const field = this.parseElementDefinition(element);\n        this.checkFieldEnter(element, field);\n\n        // Record field in schema\n        let parentContext: BackboneContext | undefined = this.backboneContext;\n        while (parentContext) {\n          if (element.path?.startsWith(parentContext.path + '.')) {\n            parentContext.type.elements[elementPath(element, parentContext.path)] = field;\n            break;\n          }\n          parentContext = parentContext.parent;\n        }\n\n        if (!parentContext) {\n          // Within R4 StructureDefinitions, there are 2 cases where StructureDefinition.name !== ElementDefinition.path.\n          // For SimpleQuantity and MoneyQuantity, the names are the names, but the root ElementDefinition.path is Quantity.\n          // We need to use StructureDefinition.name for the type name, and ElementDefinition.path for the path.\n          const path = elementPath(element, this.root.path);\n          if (element.isSummary) {\n            this.resourceSchema.summaryProperties?.add(path.replace('[x]', ''));\n          }\n          if (field.min > 0) {\n            this.resourceSchema.mandatoryProperties?.add(path.replace('[x]', ''));\n          }\n          this.resourceSchema.elements[path] = field;\n        }\n\n        // Clean up contextual book-keeping\n        this.checkFieldExit(element);\n      }\n\n      element = this.next();\n    }\n\n    // Wrap up if the StructureDefinition ends on a slice or backbone element\n    this.checkFieldExit();\n    if (this.innerTypes.length > 0) {\n      this.resourceSchema.innerTypes = this.innerTypes;\n    }\n\n    return this.resourceSchema;\n  }\n\n  private checkFieldEnter(element: ElementDefinition, field: InternalSchemaElement): void {\n    if (this.isInnerType(element)) {\n      this.enterInnerType(element);\n    }\n    if (element.slicing && !this.slicingContext) {\n      this.enterSlice(element, field);\n    }\n  }\n\n  private enterInnerType(element: ElementDefinition): void {\n    while (this.backboneContext && !pathsCompatible(this.backboneContext?.path, element.path)) {\n      // Starting new inner type, unwind type stack to this property's parent\n      this.innerTypes.push(this.backboneContext.type);\n      this.backboneContext = this.backboneContext.parent;\n    }\n    this.backboneContext = {\n      type: {\n        name: getElementDefinitionTypeName(element),\n        description: element.definition,\n        elements: {},\n        constraints: this.parseElementDefinition(element).constraints,\n        innerTypes: [],\n      },\n      path: element.path ?? '',\n      parent: pathsCompatible(this.backboneContext?.path, element.path)\n        ? this.backboneContext\n        : this.backboneContext?.parent,\n    };\n  }\n\n  private enterSlice(element: ElementDefinition, field: InternalSchemaElement): void {\n    if (hasDefaultExtensionSlice(element) && !this.peek()?.sliceName) {\n      // Extensions are always sliced by URL; don't start slicing context if no slices follow\n      return;\n    }\n    field.slicing = {\n      discriminator: (element.slicing?.discriminator ?? []).map((d) => {\n        if (d.type !== 'value' && d.type !== 'pattern' && d.type !== 'type') {\n          throw new Error(`Unsupported slicing discriminator type: ${d.type}`);\n        }\n        return {\n          path: d.path as string,\n          type: d.type as string,\n        };\n      }),\n      slices: [],\n      ordered: element.slicing?.ordered ?? false,\n      rule: element.slicing?.rules,\n    };\n    this.slicingContext = { field: field.slicing, path: element.path ?? '' };\n  }\n\n  private checkFieldExit(element: ElementDefinition | undefined = undefined): void {\n    if (this.backboneContext && !pathsCompatible(this.backboneContext.path, element?.path)) {\n      // Leaving BackboneElement child fields\n      if (this.backboneContext.parent) {\n        do {\n          this.innerTypes.push(this.backboneContext.type);\n          this.backboneContext = this.backboneContext.parent;\n        } while (this.backboneContext && !pathsCompatible(this.backboneContext.path, element?.path));\n      } else {\n        this.innerTypes.push(this.backboneContext.type);\n        delete this.backboneContext;\n      }\n    }\n    if (this.slicingContext && !pathsCompatible(this.slicingContext.path, element?.path as string)) {\n      // Path must be compatible with the sliced field path (i.e. have it as a prefix) to be a part of the\n      // same slice group; otherwise, that group is finished and this is the start of a new field\n      if (this.slicingContext?.current) {\n        this.slicingContext.field.slices.push(this.slicingContext.current);\n      }\n      delete this.slicingContext;\n    }\n  }\n\n  private next(): ElementDefinition | undefined {\n    const element = this.peek();\n    if (element) {\n      this.index++;\n      return element;\n    }\n    return undefined;\n  }\n\n  private peek(): ElementDefinition | undefined {\n    const element = this.elements[this.index];\n    if (element) {\n      this.elementIndex[element.path ?? ''] = element;\n      if (element.contentReference) {\n        const ref = this.elementIndex[element.contentReference.slice(element.contentReference.indexOf('#') + 1)];\n        if (!ref) {\n          return undefined;\n        }\n        return {\n          ...ref,\n          id: element.id,\n          path: element.path,\n          min: element.min ?? ref.min,\n          max: element.max ?? ref.max,\n          contentReference: element.contentReference,\n          definition: element.definition,\n        };\n      }\n      return element;\n    }\n    return undefined;\n  }\n\n  private isInnerType(current: ElementDefinition): boolean {\n    const next = this.peek();\n    return !!(\n      pathsCompatible(current?.path, next?.path) &&\n      current.type?.some((t) => ['BackboneElement', 'Element'].includes(t.code as string))\n    );\n  }\n\n  private parseSliceStart(element: ElementDefinition): void {\n    if (!this.slicingContext) {\n      throw new Error('Invalid slice start before discriminator: ' + element.sliceName);\n    }\n    if (this.slicingContext.current) {\n      this.slicingContext.field.slices.push(this.slicingContext.current);\n    }\n    this.slicingContext.current = {\n      name: element.sliceName ?? '',\n      type: element.type?.map((t) => ({ code: t.code ?? '', targetProfile: t.targetProfile })),\n      elements: {},\n      min: element.min ?? 0,\n      max: element.max === '*' ? Number.POSITIVE_INFINITY : Number.parseInt(element.max as string, 10),\n    };\n  }\n\n  private parseElementDefinition(ed: ElementDefinition): InternalSchemaElement {\n    const max = parseCardinality(ed.max as string);\n    const baseMax = ed.base?.max ? parseCardinality(ed.base.max) : max;\n    const typedElementDef = { type: 'ElementDefinition', value: ed };\n    return {\n      description: ed.definition || '',\n      path: ed.path || ed.base?.path || '',\n      min: ed.min ?? 0,\n      max: max,\n      isArray: baseMax > 1,\n      constraints: (ed.constraint ?? []).map((c) => ({\n        key: c.key ?? '',\n        severity: c.severity ?? 'error',\n        expression: c.expression ?? '',\n        description: c.human ?? '',\n      })),\n      type: (ed.type ?? []).map((t) => ({\n        code: ['BackboneElement', 'Element'].includes(t.code as string)\n          ? getElementDefinitionTypeName(ed)\n          : t.code ?? '',\n        targetProfile: t.targetProfile,\n      })),\n      fixed: firstValue(getTypedPropertyValue(typedElementDef, 'fixed')),\n      pattern: firstValue(getTypedPropertyValue(typedElementDef, 'pattern')),\n      binding: ed.binding,\n    };\n  }\n}\n\n/**\n * Construct the subset of a resource containing a minimum set of fields.  The returned resource is not guaranteed\n * to contain only the provided properties, and may contain others (e.g. `resourceType` and `id`)\n *\n * @param resource - The resource to subset\n * @param properties - The minimum properties to include in the subset\n * @returns The modified resource, containing the listed properties and possibly other mandatory ones\n */\nexport function subsetResource<T extends Resource>(resource: T | undefined, properties: string[]): T | undefined {\n  if (!resource) {\n    return undefined;\n  }\n  const extraProperties = [];\n  for (const property of properties) {\n    extraProperties.push('_' + property);\n    const choiceTypeField = DATA_TYPES[resource.resourceType].elements[property + '[x]'];\n    if (choiceTypeField) {\n      extraProperties.push(...choiceTypeField.type.map((t) => property + capitalize(t.code)));\n    }\n  }\n  for (const property of Object.getOwnPropertyNames(resource)) {\n    if (\n      !properties.includes(property) &&\n      !extraProperties.includes(property) &&\n      !mandatorySubsetProperties.includes(property)\n    ) {\n      Object.defineProperty(resource, property, {\n        enumerable: false,\n        writable: false,\n        value: undefined,\n      });\n    }\n  }\n  resource.meta = { ...resource.meta, tag: resource.meta?.tag ? resource.meta.tag.concat(subsetTag) : [subsetTag] };\n  return resource;\n}\nconst subsetTag: Coding = {\n  system: 'http://hl7.org/fhir/v3/ObservationValue',\n  code: 'SUBSETTED',\n};\nconst mandatorySubsetProperties = ['resourceType', 'id', 'meta'];\n\nfunction parseCardinality(c: string): number {\n  return c === '*' ? Number.POSITIVE_INFINITY : Number.parseInt(c, 10);\n}\n\nfunction elementPath(element: ElementDefinition, prefix = ''): string {\n  return trimPrefix(element.path, prefix);\n}\n\nfunction trimPrefix(str: string | undefined, prefix: string): string {\n  if (!str) {\n    return '';\n  }\n  if (prefix && str.startsWith(prefix)) {\n    return str.substring(prefix.length + 1);\n  }\n  return str;\n}\n\n/**\n * Tests whether two element paths are compatible, i.e. whether the child path is nested under the parent.\n * @param parent - The expected parent path, which should be a prefix of the child path.\n * @param child - The child path to test for compatibility with the parent path.\n * @returns True if the given path is a child of the parent.\n */\nfunction pathsCompatible(parent: string | undefined, child: string | undefined): boolean {\n  if (!parent || !child) {\n    return false;\n  }\n  return child.startsWith(parent + '.') || child === parent;\n}\n\nfunction firstValue(obj: TypedValue | TypedValue[] | undefined): TypedValue | undefined {\n  if (Array.isArray(obj) && obj.length > 0) {\n    return obj[0];\n  } else if (!isEmpty(obj)) {\n    return obj as TypedValue;\n  } else {\n    return undefined;\n  }\n}\n\nfunction hasDefaultExtensionSlice(element: ElementDefinition): boolean {\n  const discriminators = element.slicing?.discriminator;\n  return Boolean(\n    element.type?.some((t) => t.code === 'Extension') &&\n      discriminators?.length === 1 &&\n      discriminators[0].type === 'value' &&\n      discriminators[0].path === 'url'\n  );\n}\n\nfunction getDescription(sd: StructureDefinition): string | undefined {\n  let result = sd.description;\n\n  // Many description strings start with an unwanted prefix \"Base StructureDefinition for X Type: \"\n  // For example:\n  // Base StructureDefinition for Age Type: A duration of time during which an organism (or a process) has existed.\n  // If the description starts with the name of the resource type, remove it.\n  if (result?.startsWith(`Base StructureDefinition for ${sd.name} Type: `)) {\n    result = result.substring(`Base StructureDefinition for ${sd.name} Type: `.length);\n  }\n\n  return result;\n}\n", "import {\n  Bundle,\n  BundleEntry,\n  CodeableConcept,\n  Coding,\n  ElementDefinition,\n  Reference,\n  Resource,\n  ResourceType,\n  SearchParameter,\n} from '@medplum/fhirtypes';\nimport { formatHumanName } from './format';\nimport { SearchParameterDetails } from './search/details';\nimport { InternalSchemaElement, InternalTypeSchema, getAllDataTypes, tryGetDataType } from './typeschema/types';\nimport { capitalize, createReference } from './utils';\n\nexport type TypeName<T> = T extends string\n  ? 'string'\n  : T extends number\n  ? 'number'\n  : T extends boolean\n  ? 'boolean'\n  : T extends undefined\n  ? 'undefined'\n  : 'object';\n\nexport interface TypedValue {\n  readonly type: string;\n  readonly value: any;\n}\n\n/**\n * List of property types.\n * http://www.hl7.org/fhir/valueset-defined-types.html\n * The list here includes additions found from StructureDefinition resources.\n */\nexport const PropertyType = {\n  Address: 'Address',\n  Age: 'Age',\n  Annotation: 'Annotation',\n  Attachment: 'Attachment',\n  BackboneElement: 'BackboneElement',\n  CodeableConcept: 'CodeableConcept',\n  Coding: 'Coding',\n  ContactDetail: 'ContactDetail',\n  ContactPoint: 'ContactPoint',\n  Contributor: 'Contributor',\n  Count: 'Count',\n  DataRequirement: 'DataRequirement',\n  Distance: 'Distance',\n  Dosage: 'Dosage',\n  Duration: 'Duration',\n  Expression: 'Expression',\n  Extension: 'Extension',\n  HumanName: 'HumanName',\n  Identifier: 'Identifier',\n  MarketingStatus: 'MarketingStatus',\n  Meta: 'Meta',\n  Money: 'Money',\n  Narrative: 'Narrative',\n  ParameterDefinition: 'ParameterDefinition',\n  Period: 'Period',\n  Population: 'Population',\n  ProdCharacteristic: 'ProdCharacteristic',\n  ProductShelfLife: 'ProductShelfLife',\n  Quantity: 'Quantity',\n  Range: 'Range',\n  Ratio: 'Ratio',\n  Reference: 'Reference',\n  RelatedArtifact: 'RelatedArtifact',\n  SampledData: 'SampledData',\n  Signature: 'Signature',\n  SubstanceAmount: 'SubstanceAmount',\n  SystemString: 'http://hl7.org/fhirpath/System.String',\n  Timing: 'Timing',\n  TriggerDefinition: 'TriggerDefinition',\n  UsageContext: 'UsageContext',\n  base64Binary: 'base64Binary',\n  boolean: 'boolean',\n  canonical: 'canonical',\n  code: 'code',\n  date: 'date',\n  dateTime: 'dateTime',\n  decimal: 'decimal',\n  id: 'id',\n  instant: 'instant',\n  integer: 'integer',\n  markdown: 'markdown',\n  oid: 'oid',\n  positiveInt: 'positiveInt',\n  string: 'string',\n  time: 'time',\n  unsignedInt: 'unsignedInt',\n  uri: 'uri',\n  url: 'url',\n  uuid: 'uuid',\n};\n\n/**\n * An IndexedStructureDefinition is a lookup-optimized version of a StructureDefinition.\n *\n * StructureDefinition resources contain schema information for other resource types.\n * These schemas can be used to automatically generate user interface elements for\n * resources.\n *\n * However, a StructureDefinition resource is not optimized for realtime lookups.  All\n * resource types, sub types, and property definitions are stored in a flat array of\n * ElementDefinition objects.  Therefore, to lookup the schema for a property (i.e., \"Patient.name\")\n * requires a linear scan of all ElementDefinition objects\n *\n * A StructureDefinition resource contains information about one or more types.\n * For example, the \"Patient\" StructureDefinition includes \"Patient\", \"Patient_Contact\",\n * \"Patient_Communication\", and \"Patient_Link\".  This is inefficient.\n *\n * Instead, we create an indexed version of the StructureDefinition, called IndexedStructureDefinition.\n * In an IndexedStructureDefinition, retrieving a property definition is a hashtable lookup.\n *\n * The hierarchy is:\n *   IndexedStructureDefinition - top level for one resource type\n *   TypeSchema - one per resource type and all contained BackboneElements\n *   PropertySchema - one per property/field\n */\nexport interface IndexedStructureDefinition {\n  types: { [resourceType: string]: TypeInfo };\n}\n\n/**\n * An indexed TypeSchema.\n *\n * Example:  The IndexedStructureDefinition for \"Patient\" would include the following TypeSchemas:\n *   1) Patient\n *   2) Patient_Contact\n *   3) Patient_Communication\n *   4) Patient_Link\n */\nexport interface TypeInfo {\n  searchParams?: { [code: string]: SearchParameter };\n  searchParamsDetails?: { [code: string]: SearchParameterDetails };\n}\n\n/**\n * Indexes a bundle of SearchParameter resources for faster lookup.\n * @param bundle - A FHIR bundle SearchParameter resources.\n * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.\n */\nexport function indexSearchParameterBundle(bundle: Bundle<SearchParameter>): void {\n  for (const entry of bundle.entry as BundleEntry[]) {\n    const resource = entry.resource as SearchParameter;\n    if (resource.resourceType === 'SearchParameter') {\n      indexSearchParameter(resource);\n    }\n  }\n}\n\n/**\n * Indexes a SearchParameter resource for fast lookup.\n * Indexes by SearchParameter.code, which is the query string parameter name.\n * @param searchParam - The SearchParameter resource.\n * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.\n */\nexport function indexSearchParameter(searchParam: SearchParameter): void {\n  for (const resourceType of searchParam.base ?? []) {\n    let typeSchema = globalSchema.types[resourceType];\n    if (!typeSchema) {\n      typeSchema = {\n        searchParamsDetails: {},\n      } as TypeInfo;\n      globalSchema.types[resourceType] = typeSchema;\n    }\n\n    if (!typeSchema.searchParams) {\n      typeSchema.searchParams = {\n        _id: {\n          base: [resourceType],\n          code: '_id',\n          type: 'token',\n          expression: resourceType + '.id',\n        } as SearchParameter,\n        _lastUpdated: {\n          base: [resourceType],\n          code: '_lastUpdated',\n          type: 'date',\n          expression: resourceType + '.meta.lastUpdated',\n        } as SearchParameter,\n        _compartment: {\n          base: [resourceType],\n          code: '_compartment',\n          type: 'reference',\n          expression: resourceType + '.meta.compartment',\n        } as SearchParameter,\n        _profile: {\n          base: [resourceType],\n          code: '_profile',\n          type: 'uri',\n          expression: resourceType + '.meta.profile',\n        } as SearchParameter,\n        _security: {\n          base: [resourceType],\n          code: '_security',\n          type: 'token',\n          expression: resourceType + '.meta.security',\n        } as SearchParameter,\n        _source: {\n          base: [resourceType],\n          code: '_source',\n          type: 'uri',\n          expression: resourceType + '.meta.source',\n        } as SearchParameter,\n        _tag: {\n          base: [resourceType],\n          code: '_tag',\n          type: 'token',\n          expression: resourceType + '.meta.tag',\n        } as SearchParameter,\n      };\n    }\n\n    typeSchema.searchParams[searchParam.code as string] = searchParam;\n  }\n}\n\n/**\n * Returns the type name for an ElementDefinition.\n * @param elementDefinition - The element definition.\n * @returns The Medplum type name.\n */\nexport function getElementDefinitionTypeName(elementDefinition: ElementDefinition): string {\n  const code = elementDefinition.type?.[0]?.code as string;\n  return code === 'BackboneElement' || code === 'Element'\n    ? buildTypeName((elementDefinition.base?.path ?? elementDefinition.path)?.split('.') as string[])\n    : code;\n}\n\nexport function buildTypeName(components: string[]): string {\n  if (components.length === 1) {\n    return components[0];\n  }\n  return components.map(capitalize).join('');\n}\n\n/**\n * Returns true if the type schema is a non-abstract FHIR resource.\n * @param typeSchema - The type schema to check.\n * @returns True if the type schema is a non-abstract FHIR resource.\n */\nexport function isResourceTypeSchema(typeSchema: InternalTypeSchema): boolean {\n  return typeSchema.kind === 'resource' && typeSchema.name !== 'Resource' && typeSchema.name !== 'DomainResource';\n}\n\n/**\n * Returns an array of all resource types.\n * Note that this is based on globalSchema, and will only return resource types that are currently in memory.\n * @returns An array of all resource types.\n */\nexport function getResourceTypes(): ResourceType[] {\n  return Object.values(getAllDataTypes())\n    .filter(isResourceTypeSchema)\n    .map((schema) => schema.name as ResourceType);\n}\n\n/**\n * Returns the search parameters for the resource type indexed by search code.\n * @param resourceType - The resource type.\n * @returns The search parameters for the resource type indexed by search code.\n */\nexport function getSearchParameters(resourceType: string): Record<string, SearchParameter> | undefined {\n  return globalSchema.types[resourceType]?.searchParams;\n}\n\n/**\n * Returns a search parameter for a resource type by search code.\n * @param resourceType - The FHIR resource type.\n * @param code - The search parameter code.\n * @returns The search parameter if found, otherwise undefined.\n */\nexport function getSearchParameter(resourceType: string, code: string): SearchParameter | undefined {\n  return globalSchema.types[resourceType]?.searchParams?.[code];\n}\n\n/**\n * Returns a human friendly display name for a FHIR element definition path.\n * @param path - The FHIR element definition path.\n * @returns The best guess of the display name.\n */\nexport function getPropertyDisplayName(path: string): string {\n  // Get the property name, which is the remainder after the last period\n  // For example, for path \"Patient.birthDate\"\n  // the property name is \"birthDate\"\n  const propertyName = path.replaceAll('[x]', '').split('.').pop() as string;\n\n  // Split by capital letters\n  // Capitalize the first letter of each word\n  // Join together with spaces in between\n  // Then normalize whitespace to single space character\n  // For example, for property name \"birthDate\",\n  // the display name is \"Birth Date\".\n  return propertyName\n    .split(/(?=[A-Z])/)\n    .map(capitalizeDisplayWord)\n    .join(' ')\n    .replace('_', ' ')\n    .replace(/\\s+/g, ' ');\n}\n\nconst capitalizedWords = new Set(['ID', 'IP', 'PKCE', 'JWKS', 'URI', 'URL']);\n\nfunction capitalizeDisplayWord(word: string): string {\n  const upper = word.toUpperCase();\n  if (capitalizedWords.has(upper)) {\n    return upper;\n  }\n  return upper.charAt(0) + word.slice(1);\n}\n\n/**\n * Returns an element definition by type and property name.\n * Handles content references.\n * @param typeName - The type name.\n * @param propertyName - The property name.\n * @returns The element definition if found.\n */\nexport function getElementDefinition(typeName: string, propertyName: string): InternalSchemaElement | undefined {\n  const typeSchema = tryGetDataType(typeName);\n  if (!typeSchema) {\n    return undefined;\n  }\n  return typeSchema.elements[propertyName] ?? typeSchema.elements[propertyName + '[x]'];\n}\n\n/**\n * Typeguard to validate that an object is a FHIR resource\n * @param value - The object to check\n * @returns True if the input is of type 'object' and contains property 'resourceType'\n */\nexport function isResource(value: unknown): value is Resource {\n  return !!(value && typeof value === 'object' && 'resourceType' in value);\n}\n\n/**\n * Typeguard to validate that an object is a FHIR resource\n * @param value - The object to check\n * @returns True if the input is of type 'object' and contains property 'reference'\n */\nexport function isReference(value: unknown): value is Reference & { reference: string } {\n  return !!(value && typeof value === 'object' && 'reference' in value);\n}\n\n/**\n * Global schema singleton.\n */\nexport const globalSchema: IndexedStructureDefinition = { types: {} };\n\n/**\n * Output the string representation of a value, suitable for use as part of a search query.\n * @param v - The value to format as a string\n * @returns The stringified value\n */\nexport function stringifyTypedValue(v: TypedValue): string {\n  switch (v.type) {\n    case PropertyType.uuid:\n    case PropertyType.uri:\n    case PropertyType.url:\n    case PropertyType.string:\n    case PropertyType.oid:\n    case PropertyType.markdown:\n    case PropertyType.id:\n    case PropertyType.code:\n    case PropertyType.canonical:\n    case PropertyType.base64Binary:\n    case PropertyType.SystemString:\n    case PropertyType.date:\n    case PropertyType.dateTime:\n    case PropertyType.instant:\n      // many types are represented as string primitives\n      return v.value as string;\n    case PropertyType.Identifier:\n      return `${v.value.system ?? ''}|${v.value.value}`;\n    case PropertyType.Coding:\n      return stringifyCoding(v.value);\n    case PropertyType.CodeableConcept:\n      return (v.value as CodeableConcept).coding?.map(stringifyCoding).join(',') ?? v.value.text;\n    case PropertyType.HumanName:\n      if (v.value.text) {\n        return v.value.text;\n      }\n      return formatHumanName(v.value);\n    case PropertyType.unsignedInt:\n    case PropertyType.positiveInt:\n    case PropertyType.integer:\n    case PropertyType.decimal:\n      return (v.value as number).toString();\n    case PropertyType.boolean:\n      return v.value ? 'true' : 'false';\n    case PropertyType.Extension:\n      return v.value.url;\n    case PropertyType.ContactPoint:\n      return v.value.value;\n    case PropertyType.Quantity:\n    case PropertyType.Age:\n    case PropertyType.Count:\n    case PropertyType.Duration:\n      return `${v.value.value}|${v.value.system ?? ''}|${v.value.code ?? v.value.unit ?? ''}`;\n    case PropertyType.Reference:\n      return v.value.reference;\n    default:\n      if (isResource(v.value)) {\n        return createReference(v.value).reference as string;\n      }\n      return JSON.stringify(v);\n  }\n}\n\nfunction stringifyCoding(coding: Coding | undefined): string {\n  if (!coding) {\n    return '';\n  }\n  return `${coding.system ?? ''}|${coding.code}`;\n}\n", "export function parseDateString(str: string): string {\n  if (str.startsWith('T')) {\n    // If a time string,\n    // then normalize to full length.\n    return str + 'T00:00:00.000Z'.substring(str.length);\n  }\n\n  if (str.length <= 10) {\n    // If a local date (i.e., \"2021-01-01\"),\n    // then return as-is.\n    return str;\n  }\n\n  try {\n    // Try to normalize to UTC\n    return new Date(str).toISOString();\n  } catch (e) {\n    // Fallback to original input\n    // This happens on unsupported time formats such as \"2021-01-01T12\"\n    return str;\n  }\n}\n", "import { Reference } from '@medplum/fhirtypes';\nimport { Atom, AtomContext } from '../fhirlexer/parse';\nimport { isResource, PropertyType, TypedValue } from '../types';\nimport { calculateAge } from '../utils';\nimport { DotAtom, SymbolAtom } from './atoms';\nimport { parseDateString } from './date';\nimport { booleanToTypedValue, fhirPathIs, isQuantity, removeDuplicates, toJsBoolean, toTypedValue } from './utils';\n\n/*\n * Collection of FHIRPath\n * See: https://hl7.org/fhirpath/#functions\n */\n\nexport type FhirPathFunction = (context: AtomContext, input: TypedValue[], ...args: Atom[]) => TypedValue[];\n\n/**\n * Temporary placholder for unimplemented methods.\n * @returns Empty array.\n */\nconst stub: FhirPathFunction = (): [] => [];\n\nexport const functions: Record<string, FhirPathFunction> = {\n  /*\n   * 5.1 Existence\n   * See: https://hl7.org/fhirpath/#existence\n   */\n\n  /**\n   * Returns true if the input collection is empty ({ }) and false otherwise.\n   *\n   * See: https://hl7.org/fhirpath/#empty-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input collection is empty ({ }) and false otherwise.\n   */\n  empty: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return booleanToTypedValue(input.length === 0);\n  },\n\n  /**\n   * Returns true if the collection has unknown elements, and false otherwise.\n   * This is the opposite of empty(), and as such is a shorthand for empty().not().\n   * If the input collection is empty ({ }), the result is false.\n   *\n   * The function can also take an optional criteria to be applied to the collection\n   * prior to the determination of the exists. In this case, the function is shorthand\n   * for where(criteria).exists().\n   *\n   * See: https://hl7.org/fhirpath/#existscriteria-expression-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The evaluation criteria.\n   * @returns True if the collection has unknown elements, and false otherwise.\n   */\n  exists: (context: AtomContext, input: TypedValue[], criteria?: Atom): TypedValue[] => {\n    if (criteria) {\n      return booleanToTypedValue(input.filter((e) => toJsBoolean(criteria.eval(context, [e]))).length > 0);\n    } else {\n      return booleanToTypedValue(input.length > 0);\n    }\n  },\n\n  /**\n   * Returns true if for every element in the input collection, criteria evaluates to true.\n   * Otherwise, the result is false.\n   *\n   * If the input collection is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#allcriteria-expression-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The evaluation criteria.\n   * @returns True if for every element in the input collection, criteria evaluates to true.\n   */\n  all: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return booleanToTypedValue(input.every((e) => toJsBoolean(criteria.eval(context, [e]))));\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if all the items are true.\n   * If unknown items are false, the result is false.\n   * If the input is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#alltrue-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if all the items are true.\n   */\n  allTrue: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (!value.value) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return booleanToTypedValue(true);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if unknown of the items are true.\n   * If all the items are false, or if the input is empty ({ }), the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#anytrue-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if unknown of the items are true.\n   */\n  anyTrue: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (value.value) {\n        return booleanToTypedValue(true);\n      }\n    }\n    return booleanToTypedValue(false);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if all the items are false.\n   * If unknown items are true, the result is false.\n   * If the input is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#allfalse-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if all the items are false.\n   */\n  allFalse: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (value.value) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return booleanToTypedValue(true);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if unknown of the items are false.\n   * If all the items are true, or if the input is empty ({ }), the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#anyfalse-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if for every element in the input collection, criteria evaluates to true.\n   */\n  anyFalse: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (!value.value) {\n        return booleanToTypedValue(true);\n      }\n    }\n    return booleanToTypedValue(false);\n  },\n\n  /**\n   * Returns true if all items in the input collection are members of the collection passed\n   * as the other argument. Membership is determined using the = (Equals) (=) operation.\n   *\n   * Conceptually, this function is evaluated by testing each element in the input collection\n   * for membership in the other collection, with a default of true. This means that if the\n   * input collection is empty ({ }), the result is true, otherwise if the other collection\n   * is empty ({ }), the result is false.\n   *\n   * See: http://hl7.org/fhirpath/#subsetofother-collection-boolean\n   */\n  subsetOf: stub,\n\n  /**\n   * Returns true if all items in the collection passed as the other argument are members of\n   * the input collection. Membership is determined using the = (Equals) (=) operation.\n   *\n   * Conceptually, this function is evaluated by testing each element in the other collection\n   * for membership in the input collection, with a default of true. This means that if the\n   * other collection is empty ({ }), the result is true, otherwise if the input collection\n   * is empty ({ }), the result is false.\n   *\n   * See: http://hl7.org/fhirpath/#supersetofother-collection-boolean\n   */\n  supersetOf: stub,\n\n  /**\n   * Returns the integer count of the number of items in the input collection.\n   * Returns 0 when the input collection is empty.\n   *\n   * See: https://hl7.org/fhirpath/#count-integer\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  count: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return [{ type: PropertyType.integer, value: input.length }];\n  },\n\n  /**\n   * Returns a collection containing only the unique items in the input collection.\n   * To determine whether two items are the same, the = (Equals) (=) operator is used,\n   * as defined below.\n   *\n   * If the input collection is empty ({ }), the result is empty.\n   *\n   * Note that the order of elements in the input collection is not guaranteed to be\n   * preserved in the result.\n   *\n   * See: https://hl7.org/fhirpath/#distinct-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  distinct: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!result.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Returns true if all the items in the input collection are distinct.\n   * To determine whether two items are distinct, the = (Equals) (=) operator is used,\n   * as defined below.\n   *\n   * See: https://hl7.org/fhirpath/#isdistinct-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  isDistinct: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return booleanToTypedValue(input.length === functions.distinct(context, input).length);\n  },\n\n  /*\n   * 5.2 Filtering and projection\n   */\n\n  /**\n   * Returns a collection containing only those elements in the input collection\n   * for which the stated criteria expression evaluates to true.\n   * Elements for which the expression evaluates to false or empty ({ }) are not\n   * included in the result.\n   *\n   * If the input collection is empty ({ }), the result is empty.\n   *\n   * If the result of evaluating the condition is other than a single boolean value,\n   * the evaluation will end and signal an error to the calling environment,\n   * consistent with singleton evaluation of collections behavior.\n   *\n   * See: https://hl7.org/fhirpath/#wherecriteria-expression-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection for which the stated criteria expression evaluates to true.\n   */\n  where: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.filter((e) => toJsBoolean(criteria.eval(context, [e])));\n  },\n\n  /**\n   * Evaluates the projection expression for each item in the input collection.\n   * The result of each evaluation is added to the output collection. If the\n   * evaluation results in a collection with multiple items, all items are added\n   * to the output collection (collections resulting from evaluation of projection\n   * are flattened). This means that if the evaluation for an element results in\n   * the empty collection ({ }), no element is added to the result, and that if\n   * the input collection is empty ({ }), the result is empty as well.\n   *\n   * See: http://hl7.org/fhirpath/#selectprojection-expression-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection for which the stated criteria expression evaluates to true.\n   */\n  select: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.map((e) => criteria.eval(context, [e])).flat();\n  },\n\n  /**\n   * A version of select that will repeat the projection and add it to the output\n   * collection, as long as the projection yields new items (as determined by\n   * the = (Equals) (=) operator).\n   *\n   * See: http://hl7.org/fhirpath/#repeatprojection-expression-collection\n   */\n  repeat: stub,\n\n  /**\n   * Returns a collection that contains all items in the input collection that\n   * are of the given type or a subclass thereof. If the input collection is\n   * empty ({ }), the result is empty. The type argument is an identifier that\n   * must resolve to the name of a type in a model\n   *\n   * See: http://hl7.org/fhirpath/#oftypetype-type-specifier-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection that are of the given type or a subclass thereof.\n   */\n  ofType: (_context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.filter((e) => e.type === (criteria as SymbolAtom).name);\n  },\n\n  /*\n   * 5.3 Subsetting\n   */\n\n  /**\n   * Will return the single item in the input if there is just one item.\n   * If the input collection is empty ({ }), the result is empty.\n   * If there are multiple items, an error is signaled to the evaluation environment.\n   * This function is useful for ensuring that an error is returned if an assumption\n   * about cardinality is violated at run-time.\n   *\n   * See: https://hl7.org/fhirpath/#single-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The single item in the input if there is just one item.\n   */\n  single: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length > 1) {\n      throw new Error('Expected input length one for single()');\n    }\n    return input.length === 0 ? [] : input.slice(0, 1);\n  },\n\n  /**\n   * Returns a collection containing only the first item in the input collection.\n   * This function is equivalent to item[0], so it will return an empty collection if the input collection has no items.\n   *\n   * See: https://hl7.org/fhirpath/#first-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing only the first item in the input collection.\n   */\n  first: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(0, 1);\n  },\n\n  /**\n   * Returns a collection containing only the last item in the input collection.\n   * Will return an empty collection if the input collection has no items.\n   *\n   * See: https://hl7.org/fhirpath/#last-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing only the last item in the input collection.\n   */\n  last: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(input.length - 1, input.length);\n  },\n\n  /**\n   * Returns a collection containing all but the first item in the input collection.\n   * Will return an empty collection if the input collection has no items, or only one item.\n   *\n   * See: https://hl7.org/fhirpath/#tail-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing all but the first item in the input collection.\n   */\n  tail: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(1, input.length);\n  },\n\n  /**\n   * Returns a collection containing all but the first num items in the input collection.\n   * Will return an empty collection if there are no items remaining after the\n   * indicated number of items have been skipped, or if the input collection is empty.\n   * If num is less than or equal to zero, the input collection is simply returned.\n   *\n   * See: https://hl7.org/fhirpath/#skipnum-integer-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param num - The atom representing the number of elements to skip.\n   * @returns A collection containing all but the first item in the input collection.\n   */\n  skip: (context: AtomContext, input: TypedValue[], num: Atom): TypedValue[] => {\n    const numValue = num.eval(context, input)[0]?.value;\n    if (typeof numValue !== 'number') {\n      throw new Error('Expected a number for skip(num)');\n    }\n    if (numValue >= input.length) {\n      return [];\n    }\n    if (numValue <= 0) {\n      return input;\n    }\n    return input.slice(numValue, input.length);\n  },\n\n  /**\n   * Returns a collection containing the first num items in the input collection,\n   * or less if there are less than num items.\n   * If num is less than or equal to 0, or if the input collection is empty ({ }),\n   * take returns an empty collection.\n   *\n   * See: https://hl7.org/fhirpath/#takenum-integer-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param num - The atom representing the number of elements to take.\n   * @returns A collection containing the first num items in the input collection.\n   */\n  take: (context: AtomContext, input: TypedValue[], num: Atom): TypedValue[] => {\n    const numValue = num.eval(context, input)[0]?.value;\n    if (typeof numValue !== 'number') {\n      throw new Error('Expected a number for take(num)');\n    }\n    if (numValue >= input.length) {\n      return input;\n    }\n    if (numValue <= 0) {\n      return [];\n    }\n    return input.slice(0, numValue);\n  },\n\n  /**\n   * Returns the set of elements that are in both collections.\n   * Duplicate items will be eliminated by this function.\n   * Order of items is not guaranteed to be preserved in the result of this function.\n   *\n   * See: http://hl7.org/fhirpath/#intersectother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to intersect.\n   * @returns A collection containing the elements that are in both collections.\n   */\n  intersect: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, input);\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!result.some((e) => e.value === value.value) && otherArray.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Returns the set of elements that are not in the other collection.\n   * Duplicate items will not be eliminated by this function, and order will be preserved.\n   *\n   * e.g. (1 | 2 | 3).exclude(2) returns (1 | 3).\n   *\n   * See: http://hl7.org/fhirpath/#excludeother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to exclude.\n   * @returns A collection containing the elements that are in the input collection but not the other collection.\n   */\n  exclude: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, input);\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!otherArray.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /*\n   * 5.4. Combining\n   *\n   * See: https://hl7.org/fhirpath/#combining\n   */\n\n  /**\n   * Merge the two collections into a single collection,\n   * eliminating unknown duplicate values (using = (Equals) (=) to determine equality).\n   * There is no expectation of order in the resulting collection.\n   *\n   * In other words, this function returns the distinct list of elements from both inputs.\n   *\n   * See: http://hl7.org/fhirpath/#unionother-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to merge.\n   * @returns A collection containing the elements that represent the union of both collections.\n   */\n  union: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, input);\n    return removeDuplicates([...input, ...otherArray]);\n  },\n\n  /**\n   * Merge the input and other collections into a single collection\n   * without eliminating duplicate values. Combining an empty collection\n   * with a non-empty collection will return the non-empty collection.\n   *\n   * There is no expectation of order in the resulting collection.\n   *\n   * See: http://hl7.org/fhirpath/#combineother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to merge.\n   * @returns A collection containing the elements that represent the combination of both collections including duplicates.\n   */\n  combine: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, input);\n    return [...input, ...otherArray];\n  },\n\n  /**\n   * Returns true if the input is a value HTML element.\n   *\n   * See: https://hl7.org/fhir/fhirpath.html#variables\n   * @param _context - The evaluation context.\n   * @param _input - The input collection.\n   * @param _other - The atom representing the collection of elements to validate the html.\n   * @returns A collection of boolean values\n   */\n  htmlChecks: (_context: AtomContext, _input: TypedValue[], _other: Atom): TypedValue[] => {\n    return [toTypedValue(true)];\n  },\n\n  /*\n   * 5.5. Conversion\n   *\n   * See: https://hl7.org/fhirpath/#conversion\n   */\n\n  /**\n   * The iif function in FHIRPath is an immediate if,\n   * also known as a conditional operator (such as C\u2019s ? : operator).\n   *\n   * The criterion expression is expected to evaluate to a Boolean.\n   *\n   * If criterion is true, the function returns the value of the true-result argument.\n   *\n   * If criterion is false or an empty collection, the function returns otherwise-result,\n   * unless the optional otherwise-result is not given, in which case the function returns an empty collection.\n   *\n   * Note that short-circuit behavior is expected in this function. In other words,\n   * true-result should only be evaluated if the criterion evaluates to true,\n   * and otherwise-result should only be evaluated otherwise. For implementations,\n   * this means delaying evaluation of the arguments.\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criterion - The atom representing the conditional.\n   * @param trueResult - The atom to be used if the conditional evaluates to true.\n   * @param otherwiseResult - Optional atom to be used if the conditional evaluates to false.\n   * @returns The result of the iif function.\n   */\n  iif: (\n    context: AtomContext,\n    input: TypedValue[],\n    criterion: Atom,\n    trueResult: Atom,\n    otherwiseResult?: Atom\n  ): TypedValue[] => {\n    const evalResult = criterion.eval(context, input);\n    if (evalResult.length > 1 || (evalResult.length === 1 && typeof evalResult[0].value !== 'boolean')) {\n      throw new Error('Expected criterion to evaluate to a Boolean');\n    }\n\n    if (toJsBoolean(evalResult)) {\n      return trueResult.eval(context, input);\n    }\n\n    if (otherwiseResult) {\n      return otherwiseResult.eval(context, input);\n    }\n\n    return [];\n  },\n\n  /**\n   * Converts an input collection to a boolean.\n   *\n   * If the input collection contains a single item, this function will return a single boolean if:\n   *   1) the item is a Boolean\n   *   2) the item is an Integer and is equal to one of the possible integer representations of Boolean values\n   *   3) the item is a Decimal that is equal to one of the possible decimal representations of Boolean values\n   *   4) the item is a String that is equal to one of the possible string representations of Boolean values\n   *\n   * If the item is not one the above types, or the item is a String, Integer, or Decimal, but is not equal to one of the possible values convertible to a Boolean, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#toboolean-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The input converted to boolean value.\n   */\n  toBoolean: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.boolean, value }];\n    }\n    if (typeof value === 'number') {\n      if (value === 0 || value === 1) {\n        return booleanToTypedValue(!!value);\n      }\n    }\n    if (typeof value === 'string') {\n      const lowerStr = value.toLowerCase();\n      if (['true', 't', 'yes', 'y', '1', '1.0'].includes(lowerStr)) {\n        return booleanToTypedValue(true);\n      }\n      if (['false', 'f', 'no', 'n', '0', '0.0'].includes(lowerStr)) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Boolean\n   *   2) the item is an Integer that is equal to one of the possible integer representations of Boolean values\n   *   3) the item is a Decimal that is equal to one of the possible decimal representations of Boolean values\n   *   4) the item is a String that is equal to one of the possible string representations of Boolean values\n   *\n   * If the item is not one of the above types, or the item is a String, Integer, or Decimal, but is not equal to one of the possible values convertible to a Boolean, the result is false.\n   *\n   * Possible values for Integer, Decimal, and String are described in the toBoolean() function.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: http://hl7.org/fhirpath/#convertstoboolean-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input can be converted to boolean.\n   */\n  convertsToBoolean: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toBoolean(context, input).length === 1);\n  },\n\n  /**\n   * Returns the integer representation of the input.\n   *\n   * If the input collection contains a single item, this function will return a single integer if:\n   *   1) the item is an Integer\n   *   2) the item is a String and is convertible to an integer\n   *   3) the item is a Boolean, where true results in a 1 and false results in a 0.\n   *\n   * If the item is not one the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to an integer (using the regex format (\\\\+|-)?\\d+), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tointeger-integer\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string representation of the input.\n   */\n  toInteger: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.integer, value }];\n    }\n    if (typeof value === 'string' && /^[+-]?\\d+$/.exec(value)) {\n      return [{ type: PropertyType.integer, value: parseInt(value, 10) }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.integer, value: value ? 1 : 0 }];\n    }\n    return [];\n  },\n\n  /**\n   * Returns true if the input can be converted to string.\n   *\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is an Integer\n   *   2) the item is a String and is convertible to an Integer\n   *   3) the item is a Boolean\n   *   4) If the item is not one of the above types, or the item is a String, but is not convertible to an Integer (using the regex format (\\\\+|-)?\\d+), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstointeger-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input can be converted to an integer.\n   */\n  convertsToInteger: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toInteger(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single date if:\n   *   1) the item is a Date\n   *   2) the item is a DateTime\n   *   3) the item is a String and is convertible to a Date\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Date (using the format YYYY-MM-DD), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#todate-date\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a date if possible; otherwise empty array.\n   */\n  toDate: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string' && /^\\d{4}(-\\d{2}(-\\d{2})?)?/.exec(value)) {\n      return [{ type: PropertyType.date, value: parseDateString(value) }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Date\n   *   2) the item is a DateTime\n   *   3) the item is a String and is convertible to a Date\n   *\n   * If the item is not one of the above types, or is not convertible to a Date (using the format YYYY-MM-DD), the result is false.\n   *\n   * If the item contains a partial date (e.g. '2012-01'), the result is a partial date.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodate-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a date.\n   */\n  convertsToDate: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDate(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single datetime if:\n   *   1) the item is a DateTime\n   *   2) the item is a Date, in which case the result is a DateTime with the year, month, and day of the Date, and the time components empty (not set to zero)\n   *   3) the item is a String and is convertible to a DateTime\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a DateTime (using the format YYYY-MM-DDThh:mm:ss.fff(+|-)hh:mm), the result is empty.\n   *\n   * If the item contains a partial datetime (e.g. '2012-01-01T10:00'), the result is a partial datetime.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#todatetime-datetime\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a datetime if possible; otherwise empty array.\n   */\n  toDateTime: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string' && /^\\d{4}(-\\d{2}(-\\d{2})?)?/.exec(value)) {\n      return [{ type: PropertyType.dateTime, value: parseDateString(value) }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a DateTime\n   *   2) the item is a Date\n   *   3) the item is a String and is convertible to a DateTime\n   *\n   * If the item is not one of the above types, or is not convertible to a DateTime (using the format YYYY-MM-DDThh:mm:ss.fff(+|-)hh:mm), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodatetime-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a dateTime.\n   */\n  convertsToDateTime: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDateTime(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single decimal if:\n   *   1) the item is an Integer or Decimal\n   *   2) the item is a String and is convertible to a Decimal\n   *   3) the item is a Boolean, where true results in a 1.0 and false results in a 0.0.\n   *   4) If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Decimal (using the regex format (\\\\+|-)?\\d+(\\.\\d+)?), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#decimal-conversion-functions\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a decimal if possible; otherwise empty array.\n   */\n  toDecimal: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.decimal, value }];\n    }\n    if (typeof value === 'string' && /^-?\\d{1,9}(\\.\\d{1,9})?$/.exec(value)) {\n      return [{ type: PropertyType.decimal, value: parseFloat(value) }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.decimal, value: value ? 1 : 0 }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will true if:\n   *   1) the item is an Integer or Decimal\n   *   2) the item is a String and is convertible to a Decimal\n   *   3) the item is a Boolean\n   *\n   * If the item is not one of the above types, or is not convertible to a Decimal (using the regex format (\\\\+|-)?\\d+(\\.\\d+)?), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodecimal-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a decimal if possible; otherwise empty array.\n   */\n  convertsToDecimal: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDecimal(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single quantity if:\n   *   1) the item is an Integer, or Decimal, where the resulting quantity will have the default unit ('1')\n   *   2) the item is a Quantity\n   *   3) the item is a String and is convertible to a Quantity\n   *   4) the item is a Boolean, where true results in the quantity 1.0 '1', and false results in the quantity 0.0 '1'\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#quantity-conversion-functions\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a quantity if possible; otherwise empty array.\n   */\n  toQuantity: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (isQuantity(value)) {\n      return [{ type: PropertyType.Quantity, value }];\n    }\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.Quantity, value: { value, unit: '1' } }];\n    }\n    if (typeof value === 'string' && /^-?\\d{1,9}(\\.\\d{1,9})?/.exec(value)) {\n      return [{ type: PropertyType.Quantity, value: { value: parseFloat(value), unit: '1' } }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.Quantity, value: { value: value ? 1 : 0, unit: '1' } }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is an Integer, Decimal, or Quantity\n   *   2) the item is a String that is convertible to a Quantity\n   *   3) the item is a Boolean\n   *\n   * If the item is not one of the above types, or is not convertible to a Quantity using the following regex format:\n   *\n   *     (?'value'(\\+|-)?\\d+(\\.\\d+)?)\\s*('(?'unit'[^']+)'|(?'time'[a-zA-Z]+))?\n   *\n   * then the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the unit argument is provided, it must be the string representation of a UCUM code (or a FHIRPath calendar duration keyword), and is used to determine whether the input quantity can be converted to the given unit, according to the unit conversion rules specified by UCUM. If the input quantity can be converted, the result is true, otherwise, the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#convertstoquantityunit-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a quantity.\n   */\n  convertsToQuantity: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toQuantity(context, input).length === 1);\n  },\n\n  /**\n   * Returns the string representation of the input.\n   *\n   * If the input collection contains a single item, this function will return a single String if:\n   *\n   *  1) the item in the input collection is a String\n   *  2) the item in the input collection is an Integer, Decimal, Date, Time, DateTime, or Quantity the output will contain its String representation\n   *  3) the item is a Boolean, where true results in 'true' and false in 'false'.\n   *\n   * If the item is not one of the above types, the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#tostring-string\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string representation of the input.\n   */\n  toString: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (value === null || value === undefined) {\n      return [];\n    }\n    if (isQuantity(value)) {\n      return [{ type: PropertyType.string, value: `${value.value} '${value.unit}'` }];\n    }\n    return [{ type: PropertyType.string, value: (value as boolean | number | string).toString() }];\n  },\n\n  /**\n   * Returns true if the input can be converted to string.\n   *\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a String\n   *   2) the item is an Integer, Decimal, Date, Time, or DateTime\n   *   3) the item is a Boolean\n   *   4) the item is a Quantity\n   *\n   * If the item is not one of the above types, the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tostring-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a string\n   */\n  convertsToString: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue((functions.toString as unknown as FhirPathFunction)(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single time if:\n   *   1) the item is a Time\n   *   2) the item is a String and is convertible to a Time\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Time (using the format hh:mm:ss.fff(+|-)hh:mm), the result is empty.\n   *\n   * If the item contains a partial time (e.g. '10:00'), the result is a partial time.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#totime-time\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a time if possible; otherwise empty array.\n   */\n  toTime: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string') {\n      const match = /^T?(\\d{2}(:\\d{2}(:\\d{2})?)?)/.exec(value);\n      if (match) {\n        return [{ type: PropertyType.time, value: parseDateString('T' + match[1]) }];\n      }\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Time\n   *   2) the item is a String and is convertible to a Time\n   *\n   * If the item is not one of the above types, or is not convertible to a Time (using the format hh:mm:ss.fff(+|-)hh:mm), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstotime-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a time.\n   */\n  convertsToTime: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toTime(context, input).length === 1);\n  },\n\n  /*\n   * 5.6. String Manipulation.\n   *\n   * See: https://hl7.org/fhirpath/#string-manipulation\n   */\n\n  /**\n   * Returns the 0-based index of the first position substring is found in the input string, or -1 if it is not found.\n   *\n   * If substring is an empty string (''), the function returns 0.\n   *\n   * If the input or substring is empty ({ }), the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#indexofsubstring-string-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param substringAtom - The substring to search for.\n   * @returns The index of the substring.\n   */\n  indexOf: (context: AtomContext, input: TypedValue[], substringAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, substring) => str.indexOf(substring as string), context, input, substringAtom);\n  },\n\n  /**\n   * Returns the part of the string starting at position start (zero-based). If length is given, will return at most length number of characters from the input string.\n   *\n   * If start lies outside the length of the string, the function returns empty ({ }). If there are less remaining characters in the string than indicated by length, the function returns just the remaining characters.\n   *\n   * If the input or start is empty, the result is empty.\n   *\n   * If an empty length is provided, the behavior is the same as if length had not been provided.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param startAtom - The start index atom.\n   * @param lengthAtom - Optional length atom.\n   * @returns The substring.\n   */\n  substring: (context: AtomContext, input: TypedValue[], startAtom: Atom, lengthAtom?: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, start, length) => {\n        const startIndex = start as number;\n        const endIndex = length ? startIndex + (length as number) : str.length;\n        return startIndex < 0 || startIndex >= str.length ? undefined : str.substring(startIndex, endIndex);\n      },\n      context,\n      input,\n      startAtom,\n      lengthAtom\n    );\n  },\n\n  /**\n   * Returns true when the input string starts with the given prefix.\n   *\n   * If prefix is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#startswithprefix-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param prefixAtom - The prefix substring to test.\n   * @returns True if the input string starts with the given prefix string.\n   */\n  startsWith: (context: AtomContext, input: TypedValue[], prefixAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, prefix) => str.startsWith(prefix as string), context, input, prefixAtom);\n  },\n\n  /**\n   * Returns true when the input string ends with the given suffix.\n   *\n   * If suffix is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#endswithsuffix-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param suffixAtom - The suffix substring to test.\n   * @returns True if the input string ends with the given suffix string.\n   */\n  endsWith: (context: AtomContext, input: TypedValue[], suffixAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, suffix) => str.endsWith(suffix as string), context, input, suffixAtom);\n  },\n\n  /**\n   * Returns true when the given substring is a substring of the input string.\n   *\n   * If substring is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#containssubstring-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param substringAtom - The substring to test.\n   * @returns True if the input string contains the given substring.\n   */\n  contains: (context: AtomContext, input: TypedValue[], substringAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, substring) => str.includes(substring as string), context, input, substringAtom);\n  },\n\n  /**\n   * Returns the input string with all characters converted to upper case.\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#upper-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string converted to upper case.\n   */\n  upper: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.toUpperCase(), context, input);\n  },\n\n  /**\n   * Returns the input string with all characters converted to lower case.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#lower-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string converted to lower case.\n   */\n  lower: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.toLowerCase(), context, input);\n  },\n\n  /**\n   * Returns the input string with all instances of pattern replaced with substitution. If the substitution is the empty string (''),\n   * instances of pattern are removed from the result. If pattern is the empty string (''), every character in the input string is\n   * surrounded by the substitution, e.g. 'abc'.replace('','x') becomes 'xaxbxcx'.\n   *\n   * If the input collection, pattern, or substitution are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#replacepattern-string-substitution-string-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param patternAtom - The pattern to search for.\n   * @param substitionAtom - The substition to replace with.\n   * @returns The string with all instances of the search pattern replaced with the substitution string.\n   */\n  replace: (context: AtomContext, input: TypedValue[], patternAtom: Atom, substitionAtom: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, pattern, substition) => str.replaceAll(pattern as string, substition as string),\n      context,\n      input,\n      patternAtom,\n      substitionAtom\n    );\n  },\n\n  /**\n   * Returns true when the value matches the given regular expression. Regular expressions should function consistently, regardless of any culture- and locale-specific settings in the environment, should be case-sensitive, use 'single line' mode and allow Unicode characters.\n   *\n   * If the input collection or regex are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#matchesregex-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param regexAtom - The regular expression atom.\n   * @returns True if the input string matches the given regular expression.\n   */\n  matches: (context: AtomContext, input: TypedValue[], regexAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, regex) => !!new RegExp(regex as string).exec(str), context, input, regexAtom);\n  },\n\n  /**\n   * Matches the input using the regular expression in regex and replaces each match with the substitution string. The substitution may refer to identified match groups in the regular expression.\n   *\n   * If the input collection, regex, or substitution are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#replacematchesregex-string-substitution-string-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param regexAtom - The regular expression atom.\n   * @param substitionAtom - The substition to replace with.\n   * @returns The string with all instances of the search pattern replaced with the substitution string.\n   */\n  replaceMatches: (context: AtomContext, input: TypedValue[], regexAtom: Atom, substitionAtom: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, pattern, substition) => str.replaceAll(pattern as string, substition as string),\n      context,\n      input,\n      regexAtom,\n      substitionAtom\n    );\n  },\n\n  /**\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The index of the substring.\n   */\n  length: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.length, context, input);\n  },\n\n  /**\n   * Returns the list of characters in the input string. If the input collection is empty ({ }), the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tochars-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns Array of characters.\n   */\n  toChars: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => (str ? str.split('') : undefined), context, input);\n  },\n\n  /*\n   * 5.7. Math\n   */\n\n  /**\n   * Returns the absolute value of the input. When taking the absolute value of a quantity, the unit is unchanged.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#abs-integer-decimal-quantity\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  abs: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.abs, context, input);\n  },\n\n  /**\n   * Returns the first integer greater than or equal to the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#ceiling-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  ceiling: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.ceil, context, input);\n  },\n\n  /**\n   * Returns e raised to the power of the input.\n   *\n   * If the input collection contains an Integer, it will be implicitly converted to a Decimal and the result will be a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#exp-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  exp: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.exp, context, input);\n  },\n\n  /**\n   * Returns the first integer less than or equal to the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#floor-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  floor: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.floor, context, input);\n  },\n\n  /**\n   * Returns the natural logarithm of the input (i.e. the logarithm base e).\n   *\n   * When used with an Integer, it will be implicitly converted to a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#ln-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  ln: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.log, context, input);\n  },\n\n  /**\n   * Returns the logarithm base base of the input number.\n   *\n   * When used with Integers, the arguments will be implicitly converted to Decimal.\n   *\n   * If base is empty, the result is empty.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#logbase-decimal-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param baseAtom - The logarithm base.\n   * @returns A collection containing the result.\n   */\n  log: (context: AtomContext, input: TypedValue[], baseAtom: Atom): TypedValue[] => {\n    return applyMathFunc((value, base) => Math.log(value) / Math.log(base as number), context, input, baseAtom);\n  },\n\n  /**\n   * Raises a number to the exponent power. If this function is used with Integers, the result is an Integer. If the function is used with Decimals, the result is a Decimal. If the function is used with a mixture of Integer and Decimal, the Integer is implicitly converted to a Decimal and the result is a Decimal.\n   *\n   * If the power cannot be represented (such as the -1 raised to the 0.5), the result is empty.\n   *\n   * If the input is empty, or exponent is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#powerexponent-integer-decimal-integer-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param expAtom - The exponent power.\n   * @returns A collection containing the result.\n   */\n  power: (context: AtomContext, input: TypedValue[], expAtom: Atom): TypedValue[] => {\n    return applyMathFunc(Math.pow as (x: number, ...args: unknown[]) => number, context, input, expAtom);\n  },\n\n  /**\n   * Rounds the decimal to the nearest whole number using a traditional round (i.e. 0.5 or higher will round to 1). If specified, the precision argument determines the decimal place at which the rounding will occur. If not specified, the rounding will default to 0 decimal places.\n   *\n   * If specified, the number of digits of precision must be >= 0 or the evaluation will end and signal an error to the calling environment.\n   *\n   * If the input collection contains a single item of type Integer, it will be implicitly converted to a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#roundprecision-integer-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  round: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.round, context, input);\n  },\n\n  /**\n   * Returns the square root of the input number as a Decimal.\n   *\n   * If the square root cannot be represented (such as the square root of -1), the result is empty.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * Note that this function is equivalent to raising a number of the power of 0.5 using the power() function.\n   *\n   * See: https://hl7.org/fhirpath/#sqrt-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  sqrt: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.sqrt, context, input);\n  },\n\n  /**\n   * Returns the integer portion of the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#truncate-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  truncate: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc((x) => x | 0, context, input);\n  },\n\n  /*\n   * 5.8. Tree navigation\n   */\n\n  children: stub,\n\n  descendants: stub,\n\n  /*\n   * 5.9. Utility functions\n   */\n\n  /**\n   * Adds a String representation of the input collection to the diagnostic log,\n   * using the name argument as the name in the log. This log should be made available\n   * to the user in some appropriate fashion. Does not change the input, so returns\n   * the input collection as output.\n   *\n   * If the projection argument is used, the trace would log the result of evaluating\n   * the project expression on the input, but still return the input to the trace\n   * function unchanged.\n   *\n   * See: https://hl7.org/fhirpath/#tracename-string-projection-expression-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param nameAtom - The log name.\n   * @returns The input collection.\n   */\n  trace: (context: AtomContext, input: TypedValue[], nameAtom: Atom): TypedValue[] => {\n    console.log('trace', input, nameAtom);\n    return input;\n  },\n\n  /**\n   * Returns the current date and time, including timezone offset.\n   *\n   * See: https://hl7.org/fhirpath/#now-datetime\n   * @returns The current dateTime.\n   */\n  now: (): TypedValue[] => {\n    return [{ type: PropertyType.dateTime, value: new Date().toISOString() }];\n  },\n\n  /**\n   * Returns the current time.\n   *\n   * See: https://hl7.org/fhirpath/#timeofday-time\n   * @returns The current time string.\n   */\n  timeOfDay: (): TypedValue[] => {\n    return [{ type: PropertyType.time, value: new Date().toISOString().substring(11) }];\n  },\n\n  /**\n   * Returns the current date.\n   *\n   * See: https://hl7.org/fhirpath/#today-date\n   * @returns The current date string.\n   */\n  today: (): TypedValue[] => {\n    return [{ type: PropertyType.date, value: new Date().toISOString().substring(0, 10) }];\n  },\n\n  /**\n   * Calculates the difference between two dates or date/times.\n   *\n   * This is not part of the official FHIRPath spec.\n   *\n   * IBM FHIR issue: https://github.com/IBM/FHIR/issues/1014\n   * IBM FHIR PR: https://github.com/IBM/FHIR/pull/1023\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param startAtom - The start date/time.\n   * @param endAtom - The end date/time.\n   * @param unitsAtom - Which units to return (\"years\", \"months\", or \"days\").\n   * @returns The Quantity of time between the two dates.\n   */\n  between: (\n    context: AtomContext,\n    input: TypedValue[],\n    startAtom: Atom,\n    endAtom: Atom,\n    unitsAtom: Atom\n  ): TypedValue[] => {\n    const startDate = functions.toDateTime(context, startAtom.eval(context, input));\n    if (startDate.length === 0) {\n      throw new Error('Invalid start date');\n    }\n    const endDate = functions.toDateTime(context, endAtom.eval(context, input));\n    if (endDate.length === 0) {\n      throw new Error('Invalid end date');\n    }\n    const unit = unitsAtom.eval(context, input)[0]?.value as string;\n    if (unit !== 'years' && unit !== 'months' && unit !== 'days') {\n      throw new Error('Invalid units');\n    }\n    const age = calculateAge(startDate[0].value, endDate[0].value);\n    return [{ type: PropertyType.Quantity, value: { value: age[unit], unit } }];\n  },\n\n  /*\n   * 6.3 Types\n   */\n\n  /**\n   * The is() function is supported for backwards compatibility with previous\n   * implementations of FHIRPath. Just as with the is keyword, the type argument\n   * is an identifier that must resolve to the name of a type in a model.\n   *\n   * For implementations with compile-time typing, this requires special-case\n   * handling when processing the argument to treat it as a type specifier rather\n   * than an identifier expression:\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @param typeAtom - The desired type.\n   * @returns True if the input element is of the desired type.\n   */\n  is: (_context: AtomContext, input: TypedValue[], typeAtom: Atom): TypedValue[] => {\n    let typeName = '';\n    if (typeAtom instanceof SymbolAtom) {\n      typeName = typeAtom.name;\n    } else if (typeAtom instanceof DotAtom) {\n      typeName = (typeAtom.left as SymbolAtom).name + '.' + (typeAtom.right as SymbolAtom).name;\n    }\n    if (!typeName) {\n      return [];\n    }\n    return input.map((value) => ({ type: PropertyType.boolean, value: fhirPathIs(value, typeName) }));\n  },\n\n  /*\n   * 6.5 Boolean logic\n   */\n\n  /**\n   * 6.5.3. not() : Boolean\n   *\n   * Returns true if the input collection evaluates to false, and false if it evaluates to true. Otherwise, the result is empty ({ }):\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input evaluates to false.\n   */\n  not: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return functions.toBoolean(context, input).map((value) => ({ type: PropertyType.boolean, value: !value.value }));\n  },\n\n  /*\n   * Additional functions\n   * See: https://hl7.org/fhir/fhirpath.html#functions\n   */\n\n  /**\n   * For each item in the collection, if it is a string that is a uri (or canonical or url), locate the target of the reference, and add it to the resulting collection. If the item does not resolve to a resource, the item is ignored and nothing is added to the output collection.\n   * The items in the collection may also represent a Reference, in which case the Reference.reference is resolved.\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The resolved resource.\n   */\n  resolve: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input\n      .map((e) => {\n        const value = e.value;\n        let refStr: string | undefined;\n        if (typeof value === 'string') {\n          refStr = value;\n        } else if (typeof value === 'object') {\n          const ref = value as Reference;\n          if (ref.resource) {\n            return toTypedValue(ref.resource);\n          }\n          if (ref.reference) {\n            refStr = ref.reference;\n          } else if (ref.type && ref.identifier) {\n            refStr = `${ref.type}?identifier=${ref.identifier.system}|${ref.identifier.value}`;\n          }\n        }\n        if (refStr?.includes('?')) {\n          const [resourceType] = refStr.split('?');\n          return { type: resourceType, value: { resourceType } };\n        }\n        if (refStr?.includes('/')) {\n          const [resourceType, id] = refStr.split('/');\n          return { type: resourceType, value: { resourceType, id } };\n        }\n        return { type: PropertyType.BackboneElement, value: undefined };\n      })\n      .filter((e) => !!e.value);\n  },\n\n  /**\n   * The as operator can be used to treat a value as a specific type.\n   * @param _context - The evaluation context.\n   * @param input - The input value.\n   * @returns The value as the specific type.\n   */\n  as: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input;\n  },\n\n  /*\n   * 12. Formal Specifications\n   */\n\n  /**\n   * Returns the type of the input.\n   *\n   * 12.2. Model Information\n   *\n   * The model information returned by the reflection function type() is specified as an\n   * XML Schema document (xsd) and included in this specification at the following link:\n   * https://hl7.org/fhirpath/modelinfo.xsd\n   *\n   * See: https://hl7.org/fhirpath/#model-information\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The type of the input value.\n   */\n  type: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.map(({ value }) => {\n      if (typeof value === 'boolean') {\n        return { type: PropertyType.BackboneElement, value: { namespace: 'System', name: 'Boolean' } };\n      }\n      if (typeof value === 'number') {\n        return { type: PropertyType.BackboneElement, value: { namespace: 'System', name: 'Integer' } };\n      }\n      if (isResource(value)) {\n        return {\n          type: PropertyType.BackboneElement,\n          value: { namespace: 'FHIR', name: value.resourceType },\n        };\n      }\n      return { type: PropertyType.BackboneElement, value: null };\n    });\n  },\n\n  conformsTo: (context: AtomContext, input: TypedValue[], systemAtom: Atom): TypedValue[] => {\n    const system = systemAtom.eval(context, input)[0].value as string;\n    if (!system.startsWith('http://hl7.org/fhir/StructureDefinition/')) {\n      throw new Error('Expected a StructureDefinition URL');\n    }\n    const expectedResourceType = system.replace('http://hl7.org/fhir/StructureDefinition/', '');\n    return input.map((value) => ({\n      type: PropertyType.boolean,\n      value: value.value?.resourceType === expectedResourceType,\n    }));\n  },\n};\n\n/*\n * Helper utilities\n */\n\nfunction applyStringFunc<T>(\n  func: (str: string, ...args: unknown[]) => T | undefined,\n  context: AtomContext,\n  input: TypedValue[],\n  ...argsAtoms: (Atom | undefined)[]\n): TypedValue[] {\n  if (input.length === 0) {\n    return [];\n  }\n  const [{ value }] = validateInput(input, 1);\n  if (typeof value !== 'string') {\n    throw new Error('String function cannot be called with non-string');\n  }\n  const result = func(value, ...argsAtoms.map((atom) => atom?.eval(context, input)[0]?.value));\n  if (result === undefined) {\n    return [];\n  }\n  if (Array.isArray(result)) {\n    return result.map(toTypedValue);\n  }\n  return [toTypedValue(result)];\n}\n\nfunction applyMathFunc(\n  func: (x: number, ...args: unknown[]) => number,\n  context: AtomContext,\n  input: TypedValue[],\n  ...argsAtoms: Atom[]\n): TypedValue[] {\n  if (input.length === 0) {\n    return [];\n  }\n  const [{ value }] = validateInput(input, 1);\n  const quantity = isQuantity(value);\n  const numberInput = quantity ? value.value : value;\n  if (typeof numberInput !== 'number') {\n    throw new Error('Math function cannot be called with non-number');\n  }\n  const result = func(numberInput, ...argsAtoms.map((atom) => atom.eval(context, input)[0]?.value));\n  const type = quantity ? PropertyType.Quantity : input[0].type;\n  const returnValue = quantity ? { ...value, value: result } : result;\n  return [{ type, value: returnValue }];\n}\n\nfunction validateInput(input: TypedValue[], count: number): TypedValue[] {\n  if (input.length !== count) {\n    throw new Error(`Expected ${count} arguments`);\n  }\n  for (const element of input) {\n    if (element === null || element === undefined) {\n      throw new Error('Expected non-null argument');\n    }\n  }\n  return input;\n}\n", "import { Atom, AtomContext, InfixOperatorAtom, PrefixOperatorAtom } from '../fhirlexer/parse';\nimport { isResource, PropertyType, TypedValue } from '../types';\nimport { functions } from './functions';\nimport {\n  booleanToTypedValue,\n  fhirPathArrayEquals,\n  fhirPathArrayEquivalent,\n  fhirPathIs,\n  fhirPathNot,\n  getTypedPropertyValue,\n  isQuantity,\n  removeDuplicates,\n  singleton,\n  toTypedValue,\n} from './utils';\n\nexport class FhirPathAtom implements Atom {\n  constructor(\n    public readonly original: string,\n    public readonly child: Atom\n  ) {}\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    try {\n      if (input.length > 0) {\n        return input.map((e) => this.child.eval(context, [e])).flat();\n      } else {\n        return this.child.eval(context, []);\n      }\n    } catch (error) {\n      throw new Error(`FhirPathError on \"${this.original}\": ${error}`);\n    }\n  }\n\n  toString(): string {\n    return this.child.toString();\n  }\n}\n\nexport class LiteralAtom implements Atom {\n  constructor(public readonly value: TypedValue) {}\n  eval(): TypedValue[] {\n    return [this.value];\n  }\n\n  toString(): string {\n    const value = this.value.value;\n    if (typeof value === 'string') {\n      return `'${value}'`;\n    }\n    return value.toString();\n  }\n}\n\nexport class SymbolAtom implements Atom {\n  constructor(public readonly name: string) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    if (this.name === '$this') {\n      return input;\n    }\n    if (this.name.startsWith('%')) {\n      const symbol = context.variables[this.name.slice(1)];\n      if (!symbol) {\n        throw new Error(`Undefined variable ${this.name}`);\n      }\n      return [symbol];\n    }\n    return input.flatMap((e) => this.evalValue(e)).filter((e) => e?.value !== undefined) as TypedValue[];\n  }\n\n  private evalValue(typedValue: TypedValue): TypedValue[] | TypedValue | undefined {\n    const input = typedValue.value;\n    if (!input || typeof input !== 'object') {\n      return undefined;\n    }\n\n    if (isResource(input) && input.resourceType === this.name) {\n      return typedValue;\n    }\n\n    return getTypedPropertyValue(typedValue, this.name);\n  }\n\n  toString(): string {\n    return this.name;\n  }\n}\n\nexport class EmptySetAtom implements Atom {\n  eval(): [] {\n    return [];\n  }\n\n  toString(): string {\n    return '{}';\n  }\n}\n\nexport class UnaryOperatorAtom extends PrefixOperatorAtom {\n  constructor(\n    operator: string,\n    child: Atom,\n    public readonly impl: (x: TypedValue[]) => TypedValue[]\n  ) {\n    super(operator, child);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return this.impl(this.child.eval(context, input));\n  }\n\n  toString(): string {\n    return this.operator + this.child.toString();\n  }\n}\n\nexport class AsAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('as', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return functions.ofType(context, this.left.eval(context, input), this.right);\n  }\n}\n\nexport abstract class BooleanInfixOperatorAtom extends InfixOperatorAtom {\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n}\n\nexport class ArithemticOperatorAtom extends BooleanInfixOperatorAtom {\n  constructor(\n    operator: string,\n    left: Atom,\n    right: Atom,\n    public readonly impl: (x: number, y: number) => number | boolean\n  ) {\n    super(operator, left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftEvalResult = this.left.eval(context, input);\n    if (leftEvalResult.length !== 1) {\n      return [];\n    }\n    const rightEvalResult = this.right.eval(context, input);\n    if (rightEvalResult.length !== 1) {\n      return [];\n    }\n    const leftValue = leftEvalResult[0].value;\n    const rightValue = rightEvalResult[0].value;\n    const leftNumber = isQuantity(leftValue) ? leftValue.value : leftValue;\n    const rightNumber = isQuantity(rightValue) ? rightValue.value : rightValue;\n    const result = this.impl(leftNumber, rightNumber);\n    if (typeof result === 'boolean') {\n      return booleanToTypedValue(result);\n    } else if (isQuantity(leftValue)) {\n      return [{ type: PropertyType.Quantity, value: { ...leftValue, value: result } }];\n    } else {\n      return [toTypedValue(result)];\n    }\n  }\n}\n\nexport class ConcatAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('&', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    const result = [...leftValue, ...rightValue];\n    if (result.length > 0 && result.every((e) => typeof e.value === 'string')) {\n      return [{ type: PropertyType.string, value: result.map((e) => e.value as string).join('') }];\n    }\n    return result;\n  }\n}\n\nexport class ContainsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('contains', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return booleanToTypedValue(leftValue.some((e) => e.value === rightValue[0].value));\n  }\n}\n\nexport class InAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('in', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input));\n    const right = this.right.eval(context, input);\n    if (!left) {\n      return [];\n    }\n    return booleanToTypedValue(right.some((e) => e.value === left.value));\n  }\n}\n\nexport class DotAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('.', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return this.right.eval(context, this.left.eval(context, input));\n  }\n\n  toString(): string {\n    return `${this.left.toString()}.${this.right.toString()}`;\n  }\n}\n\nexport class UnionAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('|', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftResult = this.left.eval(context, input);\n    const rightResult = this.right.eval(context, input);\n    return removeDuplicates([...leftResult, ...rightResult]);\n  }\n}\n\nexport class EqualsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('=', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathArrayEquals(leftValue, rightValue);\n  }\n}\n\nexport class NotEqualsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('!=', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathNot(fhirPathArrayEquals(leftValue, rightValue));\n  }\n}\n\nexport class EquivalentAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('~', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathArrayEquivalent(leftValue, rightValue);\n  }\n}\n\nexport class NotEquivalentAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('!~', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathNot(fhirPathArrayEquivalent(leftValue, rightValue));\n  }\n}\n\nexport class IsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('is', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    if (leftValue.length !== 1) {\n      return [];\n    }\n    const typeName = (this.right as SymbolAtom).name;\n    return booleanToTypedValue(fhirPathIs(leftValue[0], typeName));\n  }\n}\n\n/**\n * 6.5.1. and\n * Returns true if both operands evaluate to true,\n * false if either operand evaluates to false,\n * and the empty collection otherwise.\n */\nexport class AndAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('and', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (left?.value === true && right?.value === true) {\n      return booleanToTypedValue(true);\n    }\n    if (left?.value === false || right?.value === false) {\n      return booleanToTypedValue(false);\n    }\n    return [];\n  }\n}\n\n/**\n * 6.5.2. or\n * Returns false if both operands evaluate to false,\n * true if either operand evaluates to true,\n * and empty (`{ }`) otherwise:\n */\nexport class OrAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('or', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (left?.value === false && right?.value === false) {\n      return booleanToTypedValue(false);\n    } else if (left?.value || right?.value) {\n      return booleanToTypedValue(true);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * 6.5.4. xor\n * Returns true if exactly one of the operands evaluates to true,\n * false if either both operands evaluate to true or both operands evaluate to false,\n * and the empty collection otherwise.\n */\nexport class XorAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('xor', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (!left || !right) {\n      return [];\n    }\n    return booleanToTypedValue(left.value !== right.value);\n  }\n}\n\n/**\n * 6.5.5. implies\n * Returns true if left is true and right is true,\n * true left is false and right true, false or empty\n * true left is empty\n */\nexport class ImpliesAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('implies', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (right?.value === true || left?.value === false) {\n      return booleanToTypedValue(true);\n    } else if (!left || !right) {\n      return [];\n    }\n    return booleanToTypedValue(false);\n  }\n}\n\nexport class FunctionAtom implements Atom {\n  constructor(\n    public readonly name: string,\n    public readonly args: Atom[]\n  ) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const impl = functions[this.name];\n    if (!impl) {\n      throw new Error('Unrecognized function: ' + this.name);\n    }\n    return impl(context, input, ...this.args);\n  }\n\n  toString(): string {\n    return `${this.name}(${this.args.map((arg) => arg.toString()).join(', ')})`;\n  }\n}\n\nexport class IndexerAtom implements Atom {\n  constructor(\n    public readonly left: Atom,\n    public readonly expr: Atom\n  ) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const evalResult = this.expr.eval(context, input);\n    if (evalResult.length !== 1) {\n      return [];\n    }\n    const index = evalResult[0].value;\n    if (typeof index !== 'number') {\n      throw new Error(`Invalid indexer expression: should return integer}`);\n    }\n    const leftResult = this.left.eval(context, input);\n    if (!(index in leftResult)) {\n      return [];\n    }\n    return [leftResult[index]];\n  }\n\n  toString(): string {\n    return `${this.left.toString()}[${this.expr.toString()}]`;\n  }\n}\n", "export interface Marker {\n  index: number;\n  line: number;\n  column: number;\n}\n\nexport interface Token extends Marker {\n  id: string;\n  value: string;\n}\n\nconst STANDARD_UNITS = [\n  'year',\n  'years',\n  'month',\n  'months',\n  'week',\n  'weeks',\n  'day',\n  'days',\n  'hour',\n  'hours',\n  'minute',\n  'minutes',\n  'second',\n  'seconds',\n  'millisecond',\n  'milliseconds',\n];\n\nexport interface TokenizerOptions {\n  dateTimeLiterals?: boolean;\n  symbolRegex?: RegExp;\n}\n\nexport class Tokenizer {\n  private readonly str: string;\n  private readonly keywords: string[];\n  private readonly operators: string[];\n  private readonly dateTimeLiterals: boolean;\n  private readonly symbolRegex: RegExp;\n  private readonly result: Token[] = [];\n  private readonly pos: Marker = { index: 0, line: 1, column: 0 };\n  private readonly markStack: Marker[] = [];\n\n  constructor(str: string, keywords: string[], operators: string[], options?: TokenizerOptions) {\n    this.str = str;\n    this.keywords = keywords;\n    this.operators = operators;\n    this.dateTimeLiterals = !!options?.dateTimeLiterals;\n    this.symbolRegex = options?.symbolRegex ?? /[$\\w%]/;\n  }\n\n  tokenize(): Token[] {\n    while (this.pos.index < this.str.length) {\n      const token = this.consumeToken();\n      if (token) {\n        this.result.push(token);\n      }\n    }\n\n    return this.result;\n  }\n\n  private prevToken(): Token | undefined {\n    return this.result.slice(-1)[0];\n  }\n\n  private peekToken(): Token | undefined {\n    this.mark();\n    const token = this.consumeToken();\n    this.reset();\n    return token;\n  }\n\n  private consumeToken(): Token | undefined {\n    this.consumeWhitespace();\n\n    const c = this.curr();\n    if (!c) {\n      return undefined;\n    }\n\n    this.mark();\n\n    const next = this.peek();\n\n    if (c === '/' && next === '*') {\n      return this.consumeMultiLineComment();\n    }\n\n    if (c === '/' && next === '/') {\n      return this.consumeSingleLineComment();\n    }\n\n    if (c === \"'\" || c === '\"') {\n      return this.consumeString(c);\n    }\n\n    if (c === '`') {\n      return this.consumeBacktickSymbol();\n    }\n\n    if (c === '@') {\n      return this.consumeDateTime();\n    }\n\n    if (/\\d/.exec(c)) {\n      return this.consumeNumber();\n    }\n\n    if (/\\w/.exec(c)) {\n      return this.consumeSymbol();\n    }\n\n    if ((c === '$' || c === '%') && /\\w/.exec(next)) {\n      return this.consumeSymbol();\n    }\n\n    return this.consumeOperator();\n  }\n\n  private consumeWhitespace(): void {\n    this.consumeWhile(() => /\\s/.exec(this.curr()));\n  }\n\n  private consumeMultiLineComment(): Token {\n    const start = this.pos.index;\n    this.consumeWhile(() => this.curr() !== '*' || this.peek() !== '/');\n    this.advance();\n    this.advance();\n    return this.buildToken('Comment', this.str.substring(start, this.pos.index));\n  }\n\n  private consumeSingleLineComment(): Token {\n    return this.buildToken(\n      'Comment',\n      this.consumeWhile(() => this.curr() !== '\\n')\n    );\n  }\n\n  private consumeString(endChar: string): Token {\n    this.advance();\n    const result = this.buildToken(\n      'String',\n      this.consumeWhile(() => this.prev() === '\\\\' || this.curr() !== endChar)\n    );\n    this.advance();\n    return result;\n  }\n\n  private consumeBacktickSymbol(): Token {\n    this.advance();\n    const result = this.buildToken(\n      'Symbol',\n      this.consumeWhile(() => this.curr() !== '`')\n    );\n    this.advance();\n    return result;\n  }\n\n  private consumeDateTime(): Token {\n    this.advance(); // Consume \"@\"\n\n    const start = this.pos.index;\n    this.consumeWhile(() => /[\\d-]/.exec(this.curr()));\n\n    if (this.curr() === 'T') {\n      this.advance();\n      this.consumeWhile(() => /[\\d:]/.exec(this.curr()));\n\n      if (this.curr() === '.' && /\\d/.exec(this.peek())) {\n        this.advance();\n        this.consumeWhile(() => /\\d/.exec(this.curr()));\n      }\n\n      if (this.curr() === 'Z') {\n        this.advance();\n      } else if (this.curr() === '+' || this.curr() === '-') {\n        this.advance();\n        this.consumeWhile(() => /[\\d:]/.exec(this.curr()));\n      }\n    }\n\n    return this.buildToken('DateTime', this.str.substring(start, this.pos.index));\n  }\n\n  private consumeNumber(): Token {\n    const start = this.pos.index;\n    let id = 'Number';\n    this.consumeWhile(() => /\\d/.exec(this.curr()));\n\n    if (this.curr() === '.' && /\\d/.exec(this.peek())) {\n      this.advance();\n      this.consumeWhile(() => /\\d/.exec(this.curr()));\n    }\n\n    if (this.curr() === '-' && this.dateTimeLiterals) {\n      // Rewind to one character before the start, and then treat as dateTime literal.\n      this.pos.index = start - 1;\n      return this.consumeDateTime();\n    }\n\n    if (this.curr() === ' ') {\n      if (isUnitToken(this.peekToken())) {\n        id = 'Quantity';\n        this.consumeToken();\n      }\n    }\n\n    return this.buildToken(id, this.str.substring(start, this.pos.index));\n  }\n\n  private consumeSymbol(): Token {\n    const value = this.consumeWhile(() => this.symbolRegex.exec(this.curr()));\n    if (this.prevToken()?.value !== '.' && this.keywords.includes(value)) {\n      return this.buildToken(value, value);\n    }\n    return this.buildToken('Symbol', value);\n  }\n\n  private consumeOperator(): Token {\n    const c = this.curr();\n    const next = this.peek();\n    const twoCharOp = c + next;\n\n    if (this.operators.includes(twoCharOp)) {\n      this.advance();\n      this.advance();\n      return this.buildToken(twoCharOp, twoCharOp);\n    }\n\n    this.advance();\n    return this.buildToken(c, c);\n  }\n\n  private consumeWhile(condition: () => unknown): string {\n    const start = this.pos.index;\n\n    while (this.pos.index < this.str.length && condition()) {\n      this.advance();\n    }\n\n    return this.str.substring(start, this.pos.index);\n  }\n\n  private curr(): string {\n    return this.str[this.pos.index];\n  }\n\n  private prev(): string {\n    return this.str[this.pos.index - 1] ?? '';\n  }\n\n  private peek(): string {\n    return this.str[this.pos.index + 1] ?? '';\n  }\n\n  private mark(): void {\n    this.markStack.push({ ...this.pos });\n  }\n\n  private reset(): void {\n    const mark = this.markStack.pop();\n    if (!mark) {\n      throw new Error('No mark to reset to');\n    }\n    this.pos.index = mark.index;\n    this.pos.line = mark.line;\n    this.pos.column = mark.column;\n  }\n\n  private advance(): void {\n    this.pos.index++;\n    if (this.curr() === '\\n') {\n      this.pos.line++;\n      this.pos.column = 0;\n    } else {\n      this.pos.column++;\n    }\n  }\n\n  private buildToken(id: string, value: string): Token {\n    const mark = this.markStack.pop();\n    if (!mark) {\n      throw new Error('No mark for token');\n    }\n    return {\n      id,\n      value,\n      ...mark,\n    };\n  }\n}\n\nfunction isUnitToken(token: Token | undefined): boolean {\n  if (token) {\n    if (token.id === 'String') {\n      return true;\n    }\n\n    if (token.id === 'Symbol' && STANDARD_UNITS.includes(token.value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\n\nexport const FHIRPATH_KEYWORDS = ['true', 'false'];\nexport const FHIRPATH_OPERATORS = ['!=', '!~', '<=', '>=', '{}', '->'];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS).tokenize();\n}\n", "import { Quantity } from '@medplum/fhirtypes';\nimport { Atom, InfixParselet, Parser, ParserBuilder, PrefixParselet } from '../fhirlexer/parse';\nimport { PropertyType, TypedValue } from '../types';\nimport {\n  AndAtom,\n  ArithemticOperatorAtom,\n  AsAtom,\n  ConcatAtom,\n  ContainsAtom,\n  DotAtom,\n  EmptySetAtom,\n  EqualsAtom,\n  EquivalentAtom,\n  FhirPathAtom,\n  FunctionAtom,\n  ImpliesAtom,\n  InAtom,\n  IndexerAtom,\n  IsAtom,\n  LiteralAtom,\n  NotEqualsAtom,\n  NotEquivalentAtom,\n  OrAtom,\n  SymbolAtom,\n  UnaryOperatorAtom,\n  UnionAtom,\n  XorAtom,\n} from './atoms';\nimport { parseDateString } from './date';\nimport { tokenize } from './tokenize';\nimport { toTypedValue } from './utils';\n\n/**\n * Operator precedence\n * See: https://hl7.org/fhirpath/#operator-precedence\n */\nexport const OperatorPrecedence = {\n  FunctionCall: 0,\n  Dot: 1,\n  Indexer: 2,\n  UnaryAdd: 3,\n  UnarySubtract: 3,\n  Multiply: 4,\n  Divide: 4,\n  IntegerDivide: 4,\n  Modulo: 4,\n  Add: 5,\n  Subtract: 5,\n  Ampersand: 5,\n  Is: 6,\n  As: 6,\n  Union: 7,\n  GreaterThan: 8,\n  GreaterThanOrEquals: 8,\n  LessThan: 8,\n  LessThanOrEquals: 8,\n  Equals: 9,\n  Equivalent: 9,\n  NotEquals: 9,\n  NotEquivalent: 9,\n  In: 10,\n  Contains: 10,\n  And: 11,\n  Xor: 12,\n  Or: 12,\n  Implies: 13,\n  Arrow: 100,\n  Semicolon: 200,\n};\n\nconst PARENTHESES_PARSELET: PrefixParselet = {\n  parse(parser: Parser) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(')')) {\n      throw new Error('Parse error: expected `)` got `' + parser.peek()?.value + '`');\n    }\n    return expr;\n  },\n};\n\nconst INDEXER_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(']')) {\n      throw new Error('Parse error: expected `]`');\n    }\n    return new IndexerAtom(left, expr);\n  },\n\n  precedence: OperatorPrecedence.Indexer,\n};\n\nconst FUNCTION_CALL_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    if (!(left instanceof SymbolAtom)) {\n      throw new Error('Unexpected parentheses');\n    }\n\n    const args = [];\n    while (!parser.match(')')) {\n      args.push(parser.consumeAndParse());\n      parser.match(',');\n    }\n\n    return new FunctionAtom(left.name, args); //, functions[left.name]);\n  },\n  precedence: OperatorPrecedence.FunctionCall,\n};\n\nfunction parseQuantity(str: string): Quantity {\n  const parts = str.split(' ');\n  const value = parseFloat(parts[0]);\n  let unit = parts[1];\n  if (unit?.startsWith(\"'\") && unit.endsWith(\"'\")) {\n    unit = unit.substring(1, unit.length - 1);\n  } else {\n    unit = '{' + unit + '}';\n  }\n  return { value, unit };\n}\n\nexport function initFhirPathParserBuilder(): ParserBuilder {\n  return new ParserBuilder()\n    .registerPrefix('String', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.string, value: token.value }),\n    })\n    .registerPrefix('DateTime', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.dateTime, value: parseDateString(token.value) }),\n    })\n    .registerPrefix('Quantity', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.Quantity, value: parseQuantity(token.value) }),\n    })\n    .registerPrefix('Number', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.decimal, value: parseFloat(token.value) }),\n    })\n    .registerPrefix('true', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: true }) })\n    .registerPrefix('false', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: false }) })\n    .registerPrefix('Symbol', { parse: (_, token) => new SymbolAtom(token.value) })\n    .registerPrefix('{}', { parse: () => new EmptySetAtom() })\n    .registerPrefix('(', PARENTHESES_PARSELET)\n    .registerInfix('[', INDEXER_PARSELET)\n    .registerInfix('(', FUNCTION_CALL_PARSELET)\n    .prefix('+', OperatorPrecedence.UnaryAdd, (_, right) => new UnaryOperatorAtom('+', right, (x) => x))\n    .prefix(\n      '-',\n      OperatorPrecedence.UnarySubtract,\n      (_, right) => new ArithemticOperatorAtom('-', right, right, (_, y) => -y)\n    )\n    .infixLeft('.', OperatorPrecedence.Dot, (left, _, right) => new DotAtom(left, right))\n    .infixLeft(\n      '/',\n      OperatorPrecedence.Divide,\n      (left, _, right) => new ArithemticOperatorAtom('/', left, right, (x, y) => x / y)\n    )\n    .infixLeft(\n      '*',\n      OperatorPrecedence.Multiply,\n      (left, _, right) => new ArithemticOperatorAtom('*', left, right, (x, y) => x * y)\n    )\n    .infixLeft(\n      '+',\n      OperatorPrecedence.Add,\n      (left, _, right) => new ArithemticOperatorAtom('+', left, right, (x, y) => x + y)\n    )\n    .infixLeft(\n      '-',\n      OperatorPrecedence.Subtract,\n      (left, _, right) => new ArithemticOperatorAtom('-', left, right, (x, y) => x - y)\n    )\n    .infixLeft('|', OperatorPrecedence.Union, (left, _, right) => new UnionAtom(left, right))\n    .infixLeft('=', OperatorPrecedence.Equals, (left, _, right) => new EqualsAtom(left, right))\n    .infixLeft('!=', OperatorPrecedence.NotEquals, (left, _, right) => new NotEqualsAtom(left, right))\n    .infixLeft('~', OperatorPrecedence.Equivalent, (left, _, right) => new EquivalentAtom(left, right))\n    .infixLeft('!~', OperatorPrecedence.NotEquivalent, (left, _, right) => new NotEquivalentAtom(left, right))\n    .infixLeft(\n      '<',\n      OperatorPrecedence.LessThan,\n      (left, _, right) => new ArithemticOperatorAtom('<', left, right, (x, y) => x < y)\n    )\n    .infixLeft(\n      '<=',\n      OperatorPrecedence.LessThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('<=', left, right, (x, y) => x <= y)\n    )\n    .infixLeft(\n      '>',\n      OperatorPrecedence.GreaterThan,\n      (left, _, right) => new ArithemticOperatorAtom('>', left, right, (x, y) => x > y)\n    )\n    .infixLeft(\n      '>=',\n      OperatorPrecedence.GreaterThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('>=', left, right, (x, y) => x >= y)\n    )\n    .infixLeft('&', OperatorPrecedence.Ampersand, (left, _, right) => new ConcatAtom(left, right))\n    .infixLeft('and', OperatorPrecedence.And, (left, _, right) => new AndAtom(left, right))\n    .infixLeft('as', OperatorPrecedence.As, (left, _, right) => new AsAtom(left, right))\n    .infixLeft('contains', OperatorPrecedence.Contains, (left, _, right) => new ContainsAtom(left, right))\n    .infixLeft(\n      'div',\n      OperatorPrecedence.Divide,\n      (left, _, right) => new ArithemticOperatorAtom('div', left, right, (x, y) => (x / y) | 0)\n    )\n    .infixLeft('in', OperatorPrecedence.In, (left, _, right) => new InAtom(left, right))\n    .infixLeft('is', OperatorPrecedence.Is, (left, _, right) => new IsAtom(left, right))\n    .infixLeft(\n      'mod',\n      OperatorPrecedence.Modulo,\n      (left, _, right) => new ArithemticOperatorAtom('mod', left, right, (x, y) => x % y)\n    )\n    .infixLeft('or', OperatorPrecedence.Or, (left, _, right) => new OrAtom(left, right))\n    .infixLeft('xor', OperatorPrecedence.Xor, (left, _, right) => new XorAtom(left, right))\n    .infixLeft('implies', OperatorPrecedence.Implies, (left, _, right) => new ImpliesAtom(left, right));\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder();\n\n/**\n * Parses a FHIRPath expression into an AST.\n * The result can be used to evaluate the expression against a resource or other object.\n * This method is useful if you know that you will evaluate the same expression many times\n * against different resources.\n * @param input - The FHIRPath expression to parse.\n * @returns The AST representing the expression.\n */\nexport function parseFhirPath(input: string): FhirPathAtom {\n  return new FhirPathAtom(input, fhirPathParserBuilder.construct(tokenize(input)).consumeAndParse());\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression - The FHIRPath expression to parse.\n * @param input - The resource or object to evaluate the expression against.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPath(expression: string, input: unknown): unknown[] {\n  // eval requires a TypedValue array\n  // As a convenience, we can accept array or non-array, and TypedValue or unknown value\n  const array = Array.isArray(input) ? input : [input];\n  for (let i = 0; i < array.length; i++) {\n    const el = array[i];\n    if (!(typeof el === 'object' && 'type' in el && 'value' in el)) {\n      array[i] = toTypedValue(array[i]);\n    }\n  }\n  return evalFhirPathTyped(expression, array).map((e) => e.value);\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression - The FHIRPath expression to parse.\n * @param input - The resource or object to evaluate the expression against.\n * @param variables - A map of variables for eval input.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPathTyped(\n  expression: string,\n  input: TypedValue[],\n  variables?: Record<string, TypedValue>\n): TypedValue[] {\n  const variableInput = variables ?? {};\n  const ast = parseFhirPath(expression);\n  return ast.eval({ variables: variableInput }, input).map((v) => ({\n    type: v.type,\n    value: v.value?.valueOf(),\n  }));\n}\n", "import { ElementDefinitionType, SearchParameter } from '@medplum/fhirtypes';\nimport { Atom } from '../fhirlexer/parse';\nimport {\n  AsAtom,\n  BooleanInfixOperatorAtom,\n  DotAtom,\n  FunctionAtom,\n  IndexerAtom,\n  IsAtom,\n  UnionAtom,\n} from '../fhirpath/atoms';\nimport { parseFhirPath } from '../fhirpath/parse';\nimport { getElementDefinition, globalSchema, PropertyType } from '../types';\nimport { InternalSchemaElement } from '../typeschema/types';\nimport { capitalize } from '../utils';\n\nexport enum SearchParameterType {\n  BOOLEAN = 'BOOLEAN',\n  NUMBER = 'NUMBER',\n  QUANTITY = 'QUANTITY',\n  TEXT = 'TEXT',\n  REFERENCE = 'REFERENCE',\n  CANONICAL = 'CANONICAL',\n  DATE = 'DATE',\n  DATETIME = 'DATETIME',\n  PERIOD = 'PERIOD',\n  UUID = 'UUID',\n}\n\nexport interface SearchParameterDetails {\n  readonly columnName: string;\n  readonly type: SearchParameterType;\n  readonly elementDefinitions?: InternalSchemaElement[];\n  readonly array?: boolean;\n}\n\ninterface SearchParameterDetailsBuilder {\n  elementDefinitions: InternalSchemaElement[];\n  propertyTypes: Set<string>;\n  array: boolean;\n}\n\n/**\n * Returns the type details of a SearchParameter.\n *\n * The SearchParameter resource has a \"type\" parameter, but that is missing some critical information.\n *\n * For example:\n *   1) The \"date\" type includes \"date\", \"datetime\", and \"period\".\n *   2) The \"token\" type includes enums and booleans.\n *   3) Arrays/multiple values are not reflected at all.\n * @param resourceType - The root resource type.\n * @param searchParam - The search parameter.\n * @returns The search parameter type details.\n */\nexport function getSearchParameterDetails(resourceType: string, searchParam: SearchParameter): SearchParameterDetails {\n  let result: SearchParameterDetails | undefined =\n    globalSchema.types[resourceType]?.searchParamsDetails?.[searchParam.code as string];\n  if (!result) {\n    result = buildSearchParameterDetails(resourceType, searchParam);\n  }\n  return result;\n}\n\nfunction setSearchParameterDetails(resourceType: string, code: string, details: SearchParameterDetails): void {\n  const typeSchema = globalSchema.types[resourceType];\n  if (!typeSchema.searchParamsDetails) {\n    typeSchema.searchParamsDetails = {};\n  }\n  typeSchema.searchParamsDetails[code] = details;\n}\n\nfunction buildSearchParameterDetails(resourceType: string, searchParam: SearchParameter): SearchParameterDetails {\n  const code = searchParam.code as string;\n  const columnName = convertCodeToColumnName(code);\n  const expressions = getExpressionsForResourceType(resourceType, searchParam.expression as string);\n\n  const builder: SearchParameterDetailsBuilder = {\n    elementDefinitions: [],\n    propertyTypes: new Set(),\n    array: false,\n  };\n\n  for (const expression of expressions) {\n    const atomArray = flattenAtom(expression);\n    if (atomArray.length === 1 && atomArray[0] instanceof BooleanInfixOperatorAtom) {\n      builder.propertyTypes.add('boolean');\n    } else {\n      crawlSearchParameterDetails(builder, flattenAtom(expression), resourceType, 1);\n    }\n  }\n\n  const result: SearchParameterDetails = {\n    columnName,\n    type: getSearchParameterType(searchParam, builder.propertyTypes),\n    elementDefinitions: builder.elementDefinitions,\n    array: builder.array,\n  };\n  setSearchParameterDetails(resourceType, code, result);\n  return result;\n}\n\nfunction crawlSearchParameterDetails(\n  details: SearchParameterDetailsBuilder,\n  atoms: Atom[],\n  baseType: string,\n  index: number\n): void {\n  const currAtom = atoms[index];\n\n  if (currAtom instanceof AsAtom) {\n    details.propertyTypes.add(currAtom.right.toString());\n    return;\n  }\n\n  if (currAtom instanceof FunctionAtom) {\n    handleFunctionAtom(details, currAtom);\n    return;\n  }\n\n  const propertyName = currAtom.toString();\n  const elementDefinition = getElementDefinition(baseType, propertyName);\n  if (!elementDefinition) {\n    throw new Error(`Element definition not found for ${baseType} ${propertyName}`);\n  }\n\n  let hasArrayIndex = false;\n  let nextIndex = index + 1;\n  if (nextIndex < atoms.length && atoms[nextIndex] instanceof IndexerAtom) {\n    hasArrayIndex = true;\n    nextIndex++;\n  }\n\n  if (elementDefinition.isArray && !hasArrayIndex) {\n    details.array = true;\n  }\n\n  if (nextIndex >= atoms.length) {\n    // This is the final atom in the expression\n    // So we can collect the ElementDefinition and property types\n    details.elementDefinitions.push(elementDefinition);\n    for (const elementDefinitionType of elementDefinition.type as ElementDefinitionType[]) {\n      details.propertyTypes.add(elementDefinitionType.code as string);\n    }\n    return;\n  }\n\n  // This is in the middle of the expression, so we need to keep crawling.\n  // \"code\" is only missing when using \"contentReference\"\n  // \"contentReference\" is handled whe parsing StructureDefinition into InternalTypeSchema\n  for (const elementDefinitionType of elementDefinition.type as ElementDefinitionType[]) {\n    let propertyType = elementDefinitionType.code as string;\n    if (isBackboneElement(propertyType)) {\n      propertyType = elementDefinition.type[0].code;\n    }\n    crawlSearchParameterDetails(details, atoms, propertyType, nextIndex);\n  }\n}\n\nfunction handleFunctionAtom(builder: SearchParameterDetailsBuilder, functionAtom: FunctionAtom): void {\n  if (functionAtom.name === 'as') {\n    builder.propertyTypes.add(functionAtom.args[0].toString());\n    return;\n  }\n\n  if (functionAtom.name === 'resolve') {\n    // Handle .resolve().resourceType\n    builder.propertyTypes.add('string');\n    return;\n  }\n\n  if (functionAtom.name === 'where' && functionAtom.args[0] instanceof IsAtom) {\n    // Common pattern: \"where(resolve() is Patient)\"\n    // Use the type information\n    builder.propertyTypes.add(functionAtom.args[0].right.toString());\n    return;\n  }\n\n  throw new Error(`Unhandled FHIRPath function: ${functionAtom.name}`);\n}\n\nfunction isBackboneElement(propertyType: string): boolean {\n  return propertyType === 'Element' || propertyType === 'BackboneElement';\n}\n\n/**\n * Converts a hyphen-delimited code to camelCase string.\n * @param code - The search parameter code.\n * @returns The SQL column name.\n */\nfunction convertCodeToColumnName(code: string): string {\n  return code.split('-').reduce((result, word, index) => result + (index ? capitalize(word) : word), '');\n}\n\nfunction getSearchParameterType(searchParam: SearchParameter, propertyTypes: Set<string>): SearchParameterType {\n  switch (searchParam.type) {\n    case 'date':\n      if (propertyTypes.size === 1 && propertyTypes.has(PropertyType.date)) {\n        return SearchParameterType.DATE;\n      } else {\n        return SearchParameterType.DATETIME;\n      }\n    case 'number':\n      return SearchParameterType.NUMBER;\n    case 'quantity':\n      return SearchParameterType.QUANTITY;\n    case 'reference':\n      if (propertyTypes.has(PropertyType.canonical)) {\n        return SearchParameterType.CANONICAL;\n      } else {\n        return SearchParameterType.REFERENCE;\n      }\n    case 'token':\n      if (propertyTypes.size === 1 && propertyTypes.has(PropertyType.boolean)) {\n        return SearchParameterType.BOOLEAN;\n      } else {\n        return SearchParameterType.TEXT;\n      }\n    default:\n      return SearchParameterType.TEXT;\n  }\n}\n\nexport function getExpressionsForResourceType(resourceType: string, expression: string): Atom[] {\n  const result: Atom[] = [];\n  const fhirPathExpression = parseFhirPath(expression);\n  buildExpressionsForResourceType(resourceType, fhirPathExpression.child, result);\n  return result;\n}\n\nexport function getExpressionForResourceType(resourceType: string, expression: string): string | undefined {\n  const atoms = getExpressionsForResourceType(resourceType, expression);\n  if (atoms.length === 0) {\n    return undefined;\n  }\n  return atoms.map((atom) => atom.toString()).join(' | ');\n}\n\nfunction buildExpressionsForResourceType(resourceType: string, atom: Atom, result: Atom[]): void {\n  if (atom instanceof UnionAtom) {\n    buildExpressionsForResourceType(resourceType, atom.left, result);\n    buildExpressionsForResourceType(resourceType, atom.right, result);\n  } else {\n    const str = atom.toString();\n    if (str.startsWith(resourceType + '.')) {\n      result.push(atom);\n    }\n  }\n}\n\nfunction flattenAtom(atom: Atom): Atom[] {\n  if (atom instanceof AsAtom || atom instanceof IndexerAtom) {\n    return [flattenAtom(atom.left), atom].flat();\n  }\n  if (atom instanceof BooleanInfixOperatorAtom) {\n    return [atom];\n  }\n  if (atom instanceof DotAtom) {\n    return [flattenAtom(atom.left), flattenAtom(atom.right)].flat();\n  }\n  if (atom instanceof FunctionAtom) {\n    if (atom.name === 'where' && !(atom.args[0] instanceof IsAtom)) {\n      // Remove all \"where\" functions other than \"where(x as type)\"\n      return [];\n    }\n  }\n  return [atom];\n}\n", "import { Resource, ResourceType, SearchParameter } from '@medplum/fhirtypes';\nimport { badRequest, OperationOutcomeError } from '../outcomes';\nimport { TypedValue, stringifyTypedValue, globalSchema } from '../types';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\n\nexport const DEFAULT_SEARCH_COUNT = 20;\n\nexport interface SearchRequest<T extends Resource = Resource> {\n  readonly resourceType: T['resourceType'];\n  filters?: Filter[];\n  sortRules?: SortRule[];\n  offset?: number;\n  count?: number;\n  fields?: string[];\n  name?: string;\n  total?: 'none' | 'estimate' | 'accurate';\n  include?: IncludeTarget[];\n  revInclude?: IncludeTarget[];\n  summary?: 'true' | 'text' | 'data';\n}\n\nexport interface Filter {\n  code: string;\n  operator: Operator;\n  value: string;\n}\n\nexport interface SortRule {\n  code: string;\n  descending?: boolean;\n}\n\nexport interface IncludeTarget {\n  resourceType: string;\n  searchParam: string;\n  targetType?: string;\n  modifier?: string;\n}\n\n/**\n * Search operators.\n * These operators represent \"modifiers\" and \"prefixes\" in FHIR search.\n * See: https://www.hl7.org/fhir/search.html\n */\nexport enum Operator {\n  EQUALS = 'eq',\n  NOT_EQUALS = 'ne',\n\n  // Numbers\n  GREATER_THAN = 'gt',\n  LESS_THAN = 'lt',\n  GREATER_THAN_OR_EQUALS = 'ge',\n  LESS_THAN_OR_EQUALS = 'le',\n\n  // Dates\n  STARTS_AFTER = 'sa',\n  ENDS_BEFORE = 'eb',\n  APPROXIMATELY = 'ap',\n\n  // String\n  CONTAINS = 'contains',\n  EXACT = 'exact',\n\n  // Token\n  TEXT = 'text',\n  NOT = 'not',\n  ABOVE = 'above',\n  BELOW = 'below',\n  IN = 'in',\n  NOT_IN = 'not-in',\n  OF_TYPE = 'of-type',\n\n  // All\n  MISSING = 'missing',\n\n  // Reference\n  IDENTIFIER = 'identifier',\n\n  // _include and _revinclude\n  ITERATE = 'iterate',\n}\n\n/**\n * Parameter names may specify a modifier as a suffix.\n * The modifiers are separated from the parameter name by a colon.\n * See: https://www.hl7.org/fhir/search.html#modifiers\n */\nconst MODIFIER_OPERATORS: Record<string, Operator> = {\n  contains: Operator.CONTAINS,\n  exact: Operator.EXACT,\n  above: Operator.ABOVE,\n  below: Operator.BELOW,\n  text: Operator.TEXT,\n  not: Operator.NOT,\n  in: Operator.IN,\n  'not-in': Operator.NOT_IN,\n  'of-type': Operator.OF_TYPE,\n  missing: Operator.MISSING,\n  identifier: Operator.IDENTIFIER,\n  iterate: Operator.ITERATE,\n};\n\n/**\n * For the ordered parameter types of number, date, and quantity,\n * a prefix to the parameter value may be used to control the nature\n * of the matching.\n * See: https://www.hl7.org/fhir/search.html#prefix\n */\nconst PREFIX_OPERATORS: Record<string, Operator> = {\n  eq: Operator.EQUALS,\n  ne: Operator.NOT_EQUALS,\n  lt: Operator.LESS_THAN,\n  le: Operator.LESS_THAN_OR_EQUALS,\n  gt: Operator.GREATER_THAN,\n  ge: Operator.GREATER_THAN_OR_EQUALS,\n  sa: Operator.STARTS_AFTER,\n  eb: Operator.ENDS_BEFORE,\n  ap: Operator.APPROXIMATELY,\n};\n\n/**\n * Parses a search URL into a search request.\n * @param resourceType - The FHIR resource type.\n * @param query - The collection of query string parameters.\n * @returns A parsed SearchRequest.\n */\nexport function parseSearchRequest<T extends Resource = Resource>(\n  resourceType: T['resourceType'],\n  query: Record<string, string[] | string | undefined>\n): SearchRequest<T> {\n  const queryArray: [string, string][] = [];\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        queryArray.push([key, v]);\n      }\n    } else {\n      queryArray.push([key, value ?? '']);\n    }\n  }\n  return parseSearchImpl(resourceType, queryArray);\n}\n\n/**\n * Parses a search URL into a search request.\n * @param url - The search URL.\n * @returns A parsed SearchRequest.\n */\nexport function parseSearchUrl<T extends Resource = Resource>(url: URL): SearchRequest<T> {\n  let resourceType;\n  for (const part of url.pathname.split('/')) {\n    if (part) {\n      resourceType = part;\n    }\n  }\n  return parseSearchImpl<T>(resourceType as ResourceType, url.searchParams.entries());\n}\n\n/**\n * Parses a URL string into a SearchRequest.\n * @param url - The URL to parse.\n * @returns Parsed search definition.\n */\nexport function parseSearchDefinition<T extends Resource = Resource>(url: string): SearchRequest<T> {\n  return parseSearchUrl<T>(new URL(url, 'https://example.com/'));\n}\n\n/**\n * Parses a FHIR criteria string into a SearchRequest.\n * FHIR criteria strings are found on resources such as Subscription.\n * @param criteria - The FHIR criteria string.\n * @returns Parsed search definition.\n */\nexport function parseCriteriaAsSearchRequest(criteria: string): SearchRequest {\n  return parseSearchUrl(new URL(criteria, 'https://api.medplum.com/'));\n}\n\nfunction parseSearchImpl<T extends Resource = Resource>(\n  resourceType: T['resourceType'],\n  query: Iterable<[string, string]>\n): SearchRequest<T> {\n  const searchRequest: SearchRequest<T> = {\n    resourceType,\n  };\n\n  for (const [key, value] of query) {\n    parseKeyValue(searchRequest, key, value);\n  }\n\n  return searchRequest;\n}\n\nfunction parseKeyValue(searchRequest: SearchRequest, key: string, value: string): void {\n  let code;\n  let modifier;\n\n  const colonIndex = key.indexOf(':');\n  if (colonIndex >= 0) {\n    code = key.substring(0, colonIndex);\n    modifier = key.substring(colonIndex + 1);\n  } else {\n    code = key;\n    modifier = '';\n  }\n\n  if (code === '_has' || key.includes('.')) {\n    addFilter(searchRequest, { code: key, operator: Operator.EQUALS, value });\n    return;\n  }\n\n  switch (code) {\n    case '_sort':\n      parseSortRule(searchRequest, value);\n      break;\n\n    case '_count':\n      searchRequest.count = parseInt(value, 10);\n      break;\n\n    case '_offset':\n      searchRequest.offset = parseInt(value, 10);\n      break;\n\n    case '_total':\n      searchRequest.total = value as 'none' | 'estimate' | 'accurate';\n      break;\n\n    case '_summary':\n      if (value === 'count') {\n        searchRequest.total = 'accurate';\n        searchRequest.count = 0;\n      } else if (value === 'true' || value === 'data' || value === 'text') {\n        searchRequest.summary = value;\n      }\n      break;\n\n    case '_include': {\n      const target = parseIncludeTarget(value);\n      if (modifier === 'iterate') {\n        target.modifier = Operator.ITERATE;\n      }\n      if (searchRequest.include) {\n        searchRequest.include.push(target);\n      } else {\n        searchRequest.include = [target];\n      }\n      break;\n    }\n\n    case '_revinclude': {\n      const target = parseIncludeTarget(value);\n      if (modifier === 'iterate') {\n        target.modifier = Operator.ITERATE;\n      }\n      if (searchRequest.revInclude) {\n        searchRequest.revInclude.push(target);\n      } else {\n        searchRequest.revInclude = [target];\n      }\n      break;\n    }\n\n    case '_fields':\n    case '_elements':\n      searchRequest.fields = value.split(',');\n      break;\n\n    default: {\n      const param = globalSchema.types[searchRequest.resourceType]?.searchParams?.[code];\n      if (param) {\n        addFilter(searchRequest, parseParameter(param, modifier, value));\n      } else {\n        addFilter(searchRequest, parseUnknownParameter(code, modifier, value));\n      }\n    }\n  }\n}\n\nfunction parseSortRule(searchRequest: SearchRequest, value: string): void {\n  for (const field of value.split(',')) {\n    let code;\n    let descending = false;\n    if (field.startsWith('-')) {\n      code = field.substring(1);\n      descending = true;\n    } else {\n      code = field;\n    }\n    if (!searchRequest.sortRules) {\n      searchRequest.sortRules = [];\n    }\n    searchRequest.sortRules.push({ code, descending });\n  }\n}\n\nexport function parseParameter(searchParam: SearchParameter, modifier: string, value: string): Filter {\n  if (modifier === 'missing') {\n    return {\n      code: searchParam.code as string,\n      operator: Operator.MISSING,\n      value,\n    };\n  }\n  switch (searchParam.type) {\n    case 'number':\n    case 'date':\n    case 'quantity':\n      return parsePrefixType(searchParam, value);\n    case 'reference':\n    case 'string':\n    case 'token':\n    case 'uri':\n      return parseModifierType(searchParam, modifier, value);\n    default:\n      throw new Error('Unrecognized search parameter type: ' + searchParam.type);\n  }\n}\n\nfunction parsePrefixType(param: SearchParameter, input: string): Filter {\n  const { operator, value } = parsePrefix(input);\n  return {\n    code: param.code as string,\n    operator,\n    value,\n  };\n}\n\nfunction parseModifierType(param: SearchParameter, modifier: string, value: string): Filter {\n  return {\n    code: param.code as string,\n    operator: parseModifier(modifier),\n    value,\n  };\n}\n\nfunction parseUnknownParameter(code: string, modifier: string, value: string): Filter {\n  let operator = Operator.EQUALS;\n  if (modifier) {\n    operator = modifier as Operator;\n  } else if (value.length >= 2) {\n    const prefix = value.substring(0, 2);\n    if (prefix in PREFIX_OPERATORS) {\n      if (value.length === 2 || value.at(2)?.match(/\\d/)) {\n        operator = prefix as Operator;\n        value = value.substring(prefix.length);\n      }\n    }\n  }\n  return { code, operator, value };\n}\n\nfunction parsePrefix(input: string): { operator: Operator; value: string } {\n  const prefix = input.substring(0, 2);\n  const prefixOperator = PREFIX_OPERATORS[prefix];\n  if (prefixOperator) {\n    return { operator: prefixOperator, value: input.substring(2) };\n  }\n  return { operator: Operator.EQUALS, value: input };\n}\n\nfunction parseModifier(modifier: string): Operator {\n  return MODIFIER_OPERATORS[modifier] ?? Operator.EQUALS;\n}\n\nfunction parseIncludeTarget(input: string): IncludeTarget {\n  const parts = input.split(':');\n\n  if (parts.includes('*')) {\n    throw new OperationOutcomeError(badRequest(`'*' is not supported as a value for search inclusion parameters`));\n  }\n\n  if (parts.length === 1) {\n    // Full wildcard, not currently supported\n    throw new OperationOutcomeError(\n      badRequest(`Invalid include value '${input}': must be of the form ResourceType:search-parameter`)\n    );\n  } else if (parts.length === 2) {\n    return {\n      resourceType: parts[0],\n      searchParam: parts[1],\n    };\n  } else if (parts.length === 3) {\n    return {\n      resourceType: parts[0],\n      searchParam: parts[1],\n      targetType: parts[2],\n    };\n  } else {\n    throw new OperationOutcomeError(badRequest(`Invalid include value '${input}'`));\n  }\n}\n\nfunction addFilter(searchRequest: SearchRequest, filter: Filter): void {\n  if (searchRequest.filters) {\n    searchRequest.filters.push(filter);\n  } else {\n    searchRequest.filters = [filter];\n  }\n}\n\nconst subexpressionPattern = /{{([^{}]+)}}/g;\n\n/**\n * Parses an extended FHIR search criteria string (i.e. application/x-fhir-query), evaluating\n * any embedded FHIRPath subexpressions (e.g. `{{ %patient.id }}`) with the provided variables.\n *\n * @see https://hl7.org/fhir/fhir-xquery.html\n * @param query - The X-Fhir-Query string to parse\n * @param variables - Values to pass into embedded FHIRPath expressions\n * @returns The parsed search request\n */\nexport function parseXFhirQuery(query: string, variables: Record<string, TypedValue>): SearchRequest {\n  query = query.replaceAll(subexpressionPattern, (_, expr) => {\n    const replacement = evalFhirPathTyped(expr, [], variables);\n    if (replacement.length !== 1) {\n      return '';\n    }\n    return stringifyTypedValue(replacement[0]);\n  });\n  return parseCriteriaAsSearchRequest(query);\n}\n\n/**\n * Formats a search definition object into a query string.\n * Note: The return value does not include the resource type.\n * @param definition - The search definition.\n * @returns Formatted URL.\n */\nexport function formatSearchQuery(definition: SearchRequest): string {\n  const params: string[] = [];\n\n  if (definition.fields) {\n    params.push('_fields=' + definition.fields.join(','));\n  }\n\n  if (definition.filters) {\n    definition.filters.forEach((filter) => params.push(formatFilter(filter)));\n  }\n\n  if (definition.sortRules && definition.sortRules.length > 0) {\n    params.push(formatSortRules(definition.sortRules));\n  }\n\n  if (definition.offset !== undefined) {\n    params.push('_offset=' + definition.offset);\n  }\n\n  if (definition.count !== undefined) {\n    params.push('_count=' + definition.count);\n  }\n\n  if (definition.total !== undefined) {\n    params.push('_total=' + definition.total);\n  }\n\n  if (definition.include) {\n    definition.include.forEach((target) => params.push(formatIncludeTarget('_include', target)));\n  }\n\n  if (definition.revInclude) {\n    definition.revInclude.forEach((target) => params.push(formatIncludeTarget('_revinclude', target)));\n  }\n\n  if (params.length === 0) {\n    return '';\n  }\n\n  params.sort((a, b) => a.localeCompare(b));\n  return '?' + params.join('&');\n}\n\nfunction formatFilter(filter: Filter): string {\n  const modifier = filter.operator in MODIFIER_OPERATORS ? ':' + filter.operator : '';\n  const prefix = filter.operator !== Operator.EQUALS && filter.operator in PREFIX_OPERATORS ? filter.operator : '';\n  return `${filter.code}${modifier}=${prefix}${encodeURIComponent(filter.value)}`;\n}\n\nfunction formatSortRules(sortRules: SortRule[]): string {\n  return '_sort=' + sortRules.map((sr) => (sr.descending ? '-' + sr.code : sr.code)).join(',');\n}\n\nfunction formatIncludeTarget(kind: '_include' | '_revinclude', target: IncludeTarget): string {\n  return (\n    kind + '=' + target.resourceType + ':' + target.searchParam + (target.targetType ? ':' + target.targetType : '')\n  );\n}\n", "import { Reference, Resource, SearchParameter } from '@medplum/fhirtypes';\nimport { evalFhirPath } from '../fhirpath/parse';\nimport { globalSchema } from '../types';\nimport { SearchParameterType, getSearchParameterDetails } from './details';\nimport { Filter, Operator, SearchRequest } from './search';\n\n/**\n * Determines if the resource matches the search request.\n * @param resource - The resource that was created or updated.\n * @param searchRequest - The subscription criteria as a search request.\n * @returns True if the resource satisfies the search request.\n */\nexport function matchesSearchRequest(resource: Resource, searchRequest: SearchRequest): boolean {\n  if (searchRequest.resourceType !== resource.resourceType) {\n    return false;\n  }\n  if (searchRequest.filters) {\n    for (const filter of searchRequest.filters) {\n      if (!matchesSearchFilter(resource, searchRequest, filter)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Determines if the resource matches the search filter.\n * @param resource - The resource that was created or updated.\n * @param searchRequest - The search request.\n * @param filter - One of the filters of a subscription criteria.\n * @returns True if the resource satisfies the search filter.\n */\nfunction matchesSearchFilter(resource: Resource, searchRequest: SearchRequest, filter: Filter): boolean {\n  const searchParam = globalSchema.types[searchRequest.resourceType]?.searchParams?.[filter.code];\n  if (filter.operator === Operator.MISSING && searchParam) {\n    const values = evalFhirPath(searchParam.expression as string, resource);\n    return filter.value === 'true' ? !values.length : values.length > 0;\n  }\n  switch (searchParam?.type) {\n    case 'reference':\n      return matchesReferenceFilter(resource, filter, searchParam);\n    case 'string':\n    case 'uri':\n      return matchesStringFilter(resource, filter, searchParam);\n    case 'token':\n      return matchesTokenFilter(resource, filter, searchParam);\n    case 'date':\n      return matchesDateFilter(resource, filter, searchParam);\n    default:\n      // Unknown search parameter or search parameter type\n      // Default fail the check\n      return false;\n  }\n}\n\nfunction matchesReferenceFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const values = evalFhirPath(searchParam.expression as string, resource) as (Reference | string)[];\n  const negated = isNegated(filter.operator);\n\n  if (filter.value === '' && values.length === 0) {\n    // If the filter operator is \"equals\", then the filter matches.\n    // If the filter operator is \"not equals\", then the filter does not match.\n    return filter.operator === Operator.EQUALS;\n  }\n\n  // Normalize the values array into reference strings\n  const references = values.map((value) => (typeof value === 'string' ? value : value.reference));\n\n  for (const filterValue of filter.value.split(',')) {\n    let match = references.includes(filterValue);\n    if (!match && filter.code === '_compartment') {\n      // Backwards compability for compartment search parameter\n      // In previous versions, the resource type was not required in compartment values\n      // So, \"123\" would match \"Patient/123\"\n      // We need to maintain this behavior for backwards compatibility\n      match = references.some((reference) => reference?.endsWith('/' + filterValue));\n    }\n    if (match) {\n      return !negated;\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesTokenFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const details = getSearchParameterDetails(resource.resourceType, searchParam);\n  if (details.type === SearchParameterType.BOOLEAN) {\n    return matchesBooleanFilter(resource, filter, searchParam);\n  } else {\n    return matchesStringFilter(resource, filter, searchParam, true);\n  }\n}\n\nfunction matchesBooleanFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const values = evalFhirPath(searchParam.expression as string, resource);\n  const expected = filter.value === 'true';\n  const result = values.includes(expected);\n  return isNegated(filter.operator) ? !result : result;\n}\n\nfunction matchesStringFilter(\n  resource: Resource,\n  filter: Filter,\n  searchParam: SearchParameter,\n  asToken?: boolean\n): boolean {\n  const resourceValues = evalFhirPath(searchParam.expression as string, resource);\n  const filterValues = filter.value.split(',');\n  const negated = isNegated(filter.operator);\n  for (const resourceValue of resourceValues) {\n    for (const filterValue of filterValues) {\n      const match = matchesStringValue(resourceValue, filter.operator, filterValue, asToken);\n      if (match) {\n        return !negated;\n      }\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesStringValue(\n  resourceValue: unknown,\n  operator: Operator,\n  filterValue: string,\n  asToken?: boolean\n): boolean {\n  if (asToken && filterValue.includes('|')) {\n    const [system, code] = filterValue.split('|');\n    return (\n      matchesStringValue(resourceValue, operator, system, false) &&\n      (!code || matchesStringValue(resourceValue, operator, code, false))\n    );\n  }\n  let str = '';\n  if (resourceValue) {\n    if (typeof resourceValue === 'string') {\n      str = resourceValue;\n    } else if (typeof resourceValue === 'object') {\n      str = JSON.stringify(resourceValue);\n    }\n  }\n  return str.toLowerCase().includes(filterValue.toLowerCase());\n}\n\nfunction matchesDateFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const resourceValues = evalFhirPath(searchParam.expression as string, resource);\n  const filterValues = filter.value.split(',');\n  const negated = isNegated(filter.operator);\n  for (const resourceValue of resourceValues) {\n    for (const filterValue of filterValues) {\n      const match = matchesDateValue(resourceValue as string, filter.operator, filterValue);\n      if (match) {\n        return !negated;\n      }\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesDateValue(resourceValue: string, operator: Operator, filterValue: string): boolean {\n  switch (operator) {\n    case Operator.STARTS_AFTER:\n    case Operator.GREATER_THAN:\n      return resourceValue > filterValue;\n    case Operator.GREATER_THAN_OR_EQUALS:\n      return resourceValue >= filterValue;\n    case Operator.ENDS_BEFORE:\n    case Operator.LESS_THAN:\n      return resourceValue < filterValue;\n    case Operator.LESS_THAN_OR_EQUALS:\n      return resourceValue <= filterValue;\n    case Operator.EQUALS:\n    case Operator.NOT_EQUALS:\n      return resourceValue === filterValue;\n    default:\n      return false;\n  }\n}\n\nfunction isNegated(operator: Operator): boolean {\n  return operator === Operator.NOT_EQUALS || operator === Operator.NOT;\n}\n", "import { AccessPolicy, AccessPolicyResource, Resource, ResourceType } from '@medplum/fhirtypes';\nimport { matchesSearchRequest } from './search/match';\nimport { parseCriteriaAsSearchRequest } from './search/search';\n\nconst universalAccessPolicy: AccessPolicyResource = {\n  resourceType: '*',\n};\n\n/**\n * Protected resource types are in the \"medplum\" project.\n * Reading and writing is limited to the system account.\n */\nexport const protectedResourceTypes = ['DomainConfiguration', 'JsonWebKey', 'Login'];\n\n/**\n * Project admin resource types are special resources that are only\n * accessible to project administrators.\n */\nexport const projectAdminResourceTypes = ['PasswordChangeRequest', 'Project', 'ProjectMembership', 'User'];\n\n/**\n * Interactions with a resource that can be controlled via an access policy.\n *\n * Codes taken from http://hl7.org/fhir/codesystem-restful-interaction.html\n */\nexport enum AccessPolicyInteraction {\n  READ = 'read',\n  VREAD = 'vread',\n  UPDATE = 'update',\n  PATCH = 'patch',\n  DELETE = 'delete',\n  HISTORY = 'history',\n  HISTORY_INSTANCE = 'history-instance',\n  HISTORY_TYPE = 'history-type',\n  HISTORY_SYSTEM = 'history-system',\n  CREATE = 'create',\n  SEARCH = 'search',\n  SEARCH_TYPE = 'search-type',\n  SEARCH_SYSTEM = 'search-system',\n  SEARCH_COMPARTMENT = 'search-compartment',\n  CAPABILITIES = 'capabilities',\n  TRANSACTION = 'transaction',\n  BATCH = 'batch',\n  OPERATION = 'operation',\n}\nconst resourceReadInteractions = [\n  AccessPolicyInteraction.READ,\n  AccessPolicyInteraction.VREAD,\n  AccessPolicyInteraction.HISTORY,\n  AccessPolicyInteraction.HISTORY_INSTANCE,\n];\n\n/**\n * Determines if the current user can read the specified resource type.\n * @param accessPolicy - The access policy.\n * @param resourceType - The resource type.\n * @returns True if the current user can read the specified resource type.\n */\nexport function canReadResourceType(accessPolicy: AccessPolicy, resourceType: ResourceType): boolean {\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Determines if the current user can write the specified resource type.\n * This is a preliminary check before evaluating a write operation in depth.\n * If a user cannot write a resource type at all, then don't bother looking up previous versions.\n * @param accessPolicy - The access policy.\n * @param resourceType - The resource type.\n * @returns True if the current user can write the specified resource type.\n */\nexport function canWriteResourceType(accessPolicy: AccessPolicy, resourceType: ResourceType): boolean {\n  if (protectedResourceTypes.includes(resourceType)) {\n    return false;\n  }\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType) && !resourcePolicy.readonly) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Determines if the current user can write the specified resource.\n * This is a more in-depth check after building the candidate result of a write operation.\n * @param accessPolicy - The access policy.\n * @param resource - The resource.\n * @returns True if the current user can write the specified resource type.\n */\nexport function canWriteResource(accessPolicy: AccessPolicy, resource: Resource): boolean {\n  const resourceType = resource.resourceType;\n  if (!canWriteResourceType(accessPolicy, resourceType)) {\n    return false;\n  }\n  return matchesAccessPolicy(accessPolicy, resource, false);\n}\n\n/**\n * Returns true if the resource satisfies the current access policy.\n * @param accessPolicy - The access policy.\n * @param resource - The resource.\n * @param readonlyMode - True if the resource is being read.\n * @returns True if the resource matches the access policy.\n * @deprecated Use satisfiedAccessPolicy() instead.\n */\nexport function matchesAccessPolicy(accessPolicy: AccessPolicy, resource: Resource, readonlyMode: boolean): boolean {\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (\n        matchesAccessPolicyResourcePolicy(\n          resource,\n          readonlyMode ? AccessPolicyInteraction.READ : AccessPolicyInteraction.UPDATE,\n          resourcePolicy\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Checks that there is an access policy permitting the given resource interaction, returning the matching policy object.\n * @param resource - The resource being acted upon.\n * @param interaction - The interaction being performed on the resource.\n * @param accessPolicy - The relevant access policy for the current user.\n * @returns The satisfied access policy, or undefined if the access policy does not permit the given interaction.\n */\nexport function satisfiedAccessPolicy(\n  resource: Resource,\n  interaction: AccessPolicyInteraction,\n  accessPolicy: AccessPolicy | undefined\n): AccessPolicyResource | undefined {\n  if (!accessPolicy) {\n    return universalAccessPolicy;\n  }\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourcePolicy(resource, interaction, resourcePolicy)) {\n        return resourcePolicy;\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns true if the resource satisfies the specified access policy resource policy.\n * @param resource - The resource.\n * @param interaction - The interaction being performed on the resource.\n * @param resourcePolicy - One per-resource policy section from the access policy.\n * @returns True if the resource matches the access policy.\n */\nfunction matchesAccessPolicyResourcePolicy(\n  resource: Resource,\n  interaction: AccessPolicyInteraction,\n  resourcePolicy: AccessPolicyResource\n): boolean {\n  const resourceType = resource.resourceType;\n  if (!matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType)) {\n    return false;\n  }\n  if (resourcePolicy.readonly && !resourceReadInteractions.includes(interaction)) {\n    return false;\n  }\n  if (\n    resourcePolicy.compartment &&\n    !resource.meta?.compartment?.find((c) => c.reference === resourcePolicy.compartment?.reference)\n  ) {\n    // Deprecated - to be removed\n    return false;\n  }\n  if (\n    resourcePolicy.criteria &&\n    !matchesSearchRequest(resource, parseCriteriaAsSearchRequest(resourcePolicy.criteria))\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns true if the resource type matches the access policy resource type.\n * @param accessPolicyResourceType - The resource type from the access policy.\n * @param resourceType - The candidate resource resource type.\n * @returns True if the resource type matches the access policy resource type.\n */\nfunction matchesAccessPolicyResourceType(\n  accessPolicyResourceType: string | undefined,\n  resourceType: ResourceType\n): boolean {\n  if (accessPolicyResourceType === resourceType) {\n    return true;\n  }\n  if (accessPolicyResourceType === '*' && !projectAdminResourceTypes.includes(resourceType)) {\n    // Project admin resource types are not allowed to be wildcarded\n    // Project admin resource types must be explicitly included\n    return true;\n  }\n  return false;\n}\n", "/**\n * Decodes a base64 string.\n * Handles both browser and Node environments.\n * @param data - The base-64 encoded input string.\n * @returns The decoded string.\n */\nexport function decodeBase64(data: string): string {\n  if (typeof window !== 'undefined') {\n    return window.atob(data);\n  }\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(data, 'base64').toString('binary');\n  }\n  throw new Error('Unable to decode base64');\n}\n\n/**\n * Encodes a base64 string.\n * Handles both browser and Node environments.\n * @param data - The unencoded input string.\n * @returns The base-64 encoded string.\n */\nexport function encodeBase64(data: string): string {\n  if (typeof window !== 'undefined') {\n    return window.btoa(data);\n  }\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(data, 'binary').toString('base64');\n  }\n  throw new Error('Unable to encode base64');\n}\n", "import { arrayBufferToHex } from './utils';\n\n/**\n * Returns a cryptographically secure random string.\n * @returns A cryptographically secure random string.\n */\nexport function getRandomString(): string {\n  const randomItems = new Uint32Array(28);\n  crypto.getRandomValues(randomItems);\n  return arrayBufferToHex(randomItems.buffer);\n}\n\n/**\n * Encrypts a string with SHA256 encryption.\n * @param str - The unencrypted input string.\n * @returns The encrypted value in an ArrayBuffer.\n */\nexport async function encryptSHA256(str: string): Promise<ArrayBuffer> {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(str));\n}\n\n/**\n * Cross platform random UUID generator\n * Note that this is not intended for production use, but rather for testing\n * This should be replaced when crypto.randomUUID is fully supported\n * See: https://stackoverflow.com/revisions/2117523/28\n * @returns A random UUID.\n */\nexport function generateId(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import { Bundle, BundleEntry, Resource } from '@medplum/fhirtypes';\nimport { generateId } from './crypto';\nimport { isReference } from './types';\nimport { deepClone } from './utils';\n\n/**\n * More on Bundles can be found here\n * http://hl7.org/fhir/R4/bundle.html\n */\n\n/**\n * Takes a bundle and creates a Transaction Type bundle\n * @param bundle - The Bundle object that we'll receive from the search query\n * @returns transaction type bundle\n */\nexport function convertToTransactionBundle(bundle: Bundle): Bundle {\n  const idToUuid: Record<string, string> = {};\n  bundle = deepClone(bundle);\n  for (const entry of bundle.entry || []) {\n    delete entry.resource?.meta;\n    const id = entry.resource?.id;\n    if (id) {\n      idToUuid[id] = generateId();\n\n      entry.fullUrl = 'urn:uuid:' + idToUuid[id];\n      delete entry.resource?.id;\n    }\n  }\n  const input = bundle.entry;\n  const jsonString = JSON.stringify(\n    {\n      resourceType: 'Bundle',\n      type: 'transaction',\n      entry: input?.map((entry: any) => ({\n        fullUrl: entry.fullUrl,\n        request: { method: 'POST', url: entry.resource.resourceType },\n        resource: entry.resource,\n      })),\n    },\n    (key, value) => referenceReplacer(key, value, idToUuid),\n    2\n  );\n  return reorderBundle(JSON.parse(jsonString) as Bundle);\n}\n\nfunction referenceReplacer(key: string, value: string, idToUuid: Record<string, string>): string {\n  if (key === 'reference' && typeof value === 'string') {\n    let id;\n    if (value.includes('/')) {\n      id = value.split('/')[1];\n    } else if (value.startsWith('urn:uuid:')) {\n      id = value.slice(9);\n    } else if (value.startsWith('#')) {\n      id = value.slice(1);\n    }\n    if (id) {\n      const replacement = idToUuid[id];\n      if (replacement) {\n        return 'urn:uuid:' + replacement;\n      }\n    }\n  }\n  return value;\n}\n\n/**\n * Topologically sorts a `batch` or `transaction` bundle to improve reference resolution.\n * The bundle is sorted such that a resource is created _before_ references to that resource appear in the bundle.\n *\n * In the event of cycles, this function will first create a POST request for each resource in the cycle, and then will\n * append a PUT request to the bundle. This ensures that each resources in the cycle is visited twice, and all\n * references can be resolved\n * @param bundle - Input bundle with type `batch` or `transaction`\n * @returns Bundle of the same type, with Bundle.entry reordered\n */\nexport function reorderBundle(bundle: Bundle): Bundle {\n  const adjacencyList = buildAdjacencyList(bundle);\n  const { sorted: sortedFullUrls, cycles } = topologicalSortWithCycles(adjacencyList);\n\n  const entryMap: Record<string, BundleEntry> = {};\n\n  for (const entry of bundle.entry || []) {\n    if (entry.fullUrl) {\n      entryMap[entry.fullUrl] = entry;\n    }\n  }\n\n  const reorderedEntries = sortedFullUrls.map((fullUrl) => entryMap[fullUrl]);\n\n  // Handle cycles by appending additional entries with a method of 'PUT'\n  for (const cycle of cycles) {\n    for (const fullUrl of cycle) {\n      const originalEntry = entryMap[fullUrl];\n      const putEntry: BundleEntry = {\n        ...originalEntry,\n        request: {\n          ...originalEntry.request,\n          method: 'PUT',\n        },\n      };\n      reorderedEntries.push(putEntry);\n    }\n  }\n\n  return { ...bundle, entry: reorderedEntries };\n}\n\ntype AdjacencyList = Record<string, string[]>;\n\nenum VertexState {\n  NotVisited,\n  Visiting,\n  Visited,\n}\n\nfunction topologicalSortWithCycles(graph: AdjacencyList): { sorted: string[]; cycles: string[][] } {\n  const sorted: string[] = [];\n  const state: Record<string, VertexState> = {};\n  const cycles: string[][] = [];\n\n  // Initialize all vertices to NotVisited state\n  for (const vertex of Object.keys(graph)) {\n    state[vertex] = VertexState.NotVisited;\n  }\n\n  function visit(vertex: string, path: string[]): boolean {\n    // If this vertex is already visited, return true\n    if (state[vertex] === VertexState.Visited) {\n      return true;\n    }\n\n    // If this vertex is currently being visited, we have a cycle\n    if (state[vertex] === VertexState.Visiting) {\n      const cycleStartIndex = path.lastIndexOf(vertex);\n      if (cycleStartIndex !== -1) {\n        cycles.push(path.slice(cycleStartIndex));\n      }\n      return true; // return true for vertices that are part of cycles\n    }\n\n    // Mark the vertex as visiting and add it to the path\n    state[vertex] = VertexState.Visiting;\n    path.push(vertex);\n\n    // Visit all neighbors\n    let hasCycle = false;\n    for (const neighbor of graph[vertex]) {\n      if (!visit(neighbor, path)) {\n        hasCycle = true;\n      }\n    }\n\n    // Mark the vertex as visited, remove it from the path, and add it to the sorted list\n    state[vertex] = VertexState.Visited;\n    path.pop();\n    sorted.unshift(vertex);\n\n    return !hasCycle;\n  }\n\n  for (const vertex in graph) {\n    if (state[vertex] === VertexState.NotVisited) {\n      const path: string[] = [];\n      visit(vertex, path);\n    }\n  }\n\n  return { sorted, cycles };\n}\n\nfunction findReferences(resource: any, callback: (reference: string) => void): void {\n  for (const key in resource) {\n    if (resource[key] && typeof resource[key] === 'object') {\n      const value = resource[key];\n\n      if (isReference(value)) {\n        const reference = value.reference;\n        if (reference.startsWith('urn:uuid:')) {\n          callback(reference);\n        }\n      } else {\n        findReferences(value, callback);\n      }\n    }\n  }\n}\n\nfunction buildAdjacencyList(bundle: Bundle): AdjacencyList {\n  const adjacencyList: AdjacencyList = {};\n\n  // Initialize adjacency list with empty arrays for each entry's fullUrl\n  for (const entry of bundle.entry || []) {\n    if (entry.fullUrl) {\n      adjacencyList[entry.fullUrl] = [];\n    }\n  }\n\n  for (const entry of bundle.entry || []) {\n    const fullUrl = entry.fullUrl;\n\n    if (entry.resource) {\n      findReferences(entry.resource, (reference: string) => {\n        // Add an incoming reference to the adjacency list\n        if (adjacencyList[reference]) {\n          adjacencyList[reference].push(fullUrl as string);\n        }\n      });\n    }\n  }\n\n  return adjacencyList;\n}\n\n/**\n * Converts a resource with contained resources to a transaction bundle.\n * This function is useful when creating a resource that contains other resources.\n * Handles local references and topological sorting.\n * @param resource - The input resource which may or may not include contained resources.\n * @returns A bundle with the input resource and all contained resources.\n */\nexport function convertContainedResourcesToBundle(resource: Resource & { contained?: Resource[] }): Bundle {\n  // Create a clone so we don't modify the original resource\n  resource = deepClone(resource);\n\n  // Create the simple naive bundle\n  const simpleBundle = {\n    resourceType: 'Bundle',\n    type: 'transaction',\n    entry: [{ resource }] as BundleEntry[],\n  } satisfies Bundle;\n\n  // Move all contained resources to the bundle\n  if (resource.contained) {\n    for (const contained of resource.contained) {\n      simpleBundle.entry.push({ resource: contained });\n    }\n    resource.contained = undefined;\n  }\n\n  // Make sure that all resources have an ID\n  // This is required for convertToTransactionBundle\n  for (const entry of simpleBundle.entry) {\n    if (entry.resource && !entry.resource.id) {\n      entry.resource.id = generateId();\n    }\n  }\n\n  // Convert to a transaction bundle\n  // This adds fullUrl and request properties to each entry\n  // and reorders the bundle to ensure that contained resources are created before they are referenced.\n  return convertToTransactionBundle(simpleBundle);\n}\n", "/**\n * LRU cache (least recently used)\n * Source: https://stackoverflow.com/a/46432113\n */\nexport class LRUCache<T> {\n  private readonly max: number;\n  private readonly cache: Map<string, T>;\n\n  constructor(max = 10) {\n    this.max = max;\n    this.cache = new Map();\n  }\n\n  /**\n   * Deletes all values from the cache.\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Returns the value for the given key.\n   * @param key - The key to retrieve.\n   * @returns The value if found; undefined otherwise.\n   */\n  get(key: string): T | undefined {\n    const item = this.cache.get(key);\n    if (item) {\n      this.cache.delete(key);\n      this.cache.set(key, item);\n    }\n    return item;\n  }\n\n  /**\n   * Sets the value for the given key.\n   * @param key - The key to set.\n   * @param val - The value to set.\n   */\n  set(key: string, val: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.max) {\n      this.cache.delete(this.first());\n    }\n    this.cache.set(key, val);\n  }\n\n  /**\n   * Deletes the value for the given key.\n   * @param key - The key to delete.\n   */\n  delete(key: string): void {\n    this.cache.delete(key);\n  }\n\n  /**\n   * Returns the list of all keys in the cache.\n   * @returns The array of keys in the cache.\n   */\n  keys(): IterableIterator<string> {\n    return this.cache.keys();\n  }\n\n  private first(): string {\n    // This works because the Map class maintains ordered keys.\n    return this.cache.keys().next().value;\n  }\n}\n", "/**\n * Content type constants.\n */\nexport const ContentType = {\n  CSS: 'text/css',\n  FAVICON: 'image/vnd.microsoft.icon',\n  FHIR_JSON: 'application/fhir+json',\n  FORM_URL_ENCODED: 'application/x-www-form-urlencoded',\n  HL7_V2: 'x-application/hl7-v2+er7',\n  HTML: 'text/html',\n  JAVASCRIPT: 'text/javascript',\n  JSON: 'application/json',\n  JSON_PATCH: 'application/json-patch+json',\n  PNG: 'image/png',\n  SVG: 'image/svg+xml',\n  TEXT: 'text/plain',\n  TYPESCRIPT: 'text/typescript',\n} as const;\n", "/*\n * Based on: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n */\n\nexport interface Event {\n  readonly type: string;\n  readonly defaultPrevented?: boolean;\n}\n\nexport type EventListener = (e: Event) => void;\n\nexport class EventTarget {\n  private readonly listeners: Record<string, EventListener[]>;\n\n  constructor() {\n    this.listeners = {};\n  }\n\n  addEventListener(type: string, callback: EventListener): void {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(callback);\n  }\n\n  removeEventListener(type: string, callback: EventListener): void {\n    const array = this.listeners[type];\n    if (!array) {\n      return;\n    }\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === callback) {\n        array.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  dispatchEvent(event: Event): boolean {\n    const array = this.listeners[event.type];\n    if (array) {\n      for (const listener of array) {\n        listener.call(this, event);\n      }\n    }\n    return !event.defaultPrevented;\n  }\n}\n\nexport class TypedEventTarget<TEvents extends Record<string, Event>> {\n  private emitter = new EventTarget();\n\n  dispatchEvent<TEventType extends keyof TEvents & string>(event: TEvents[TEventType]): void {\n    this.emitter.dispatchEvent(event);\n  }\n\n  addEventListener<TEventType extends keyof TEvents & string>(\n    type: TEventType,\n    handler: (event: TEvents[TEventType]) => void\n  ): void {\n    this.emitter.addEventListener(type, handler as any);\n  }\n\n  removeEventListener<TEventType extends keyof TEvents & string>(\n    type: TEventType,\n    handler: (event: TEvents[TEventType]) => void\n  ): void {\n    this.emitter.removeEventListener(type, handler as any);\n  }\n}\n", "import { Resource } from '@medplum/fhirtypes';\nimport { generateId } from '../crypto';\nimport { TypedEventTarget } from '../eventtarget';\nimport { OperationOutcomeError, validationError } from '../outcomes';\n\n// We currently try to satisfy both STU2 and STU3. Where STU3 removes a resource / key from STU2, we leave it in as a valid key but don't require it.\n\nexport const FHIRCAST_EVENT_NAMES = {\n  'Patient-open': 'Patient-open',\n  'Patient-close': 'Patient-close',\n  'ImagingStudy-open': 'ImagingStudy-open',\n  'ImagingStudy-close': 'ImagingStudy-close',\n  'Encounter-open': 'Encounter-open',\n  'Encounter-close': 'Encounter-close',\n  'DiagnosticReport-open': 'DiagnosticReport-open',\n  'DiagnosticReport-close': 'DiagnosticReport-close',\n  'DiagnosticReport-select': 'DiagnosticReport-select',\n  'DiagnosticReport-update': 'DiagnosticReport-update',\n  syncerror: 'syncerror',\n} as const;\n\nexport const FHIRCAST_RESOURCE_TYPES = [\n  'Patient',\n  'Encounter',\n  'ImagingStudy',\n  'DiagnosticReport',\n  'OperationOutcome',\n  'Bundle',\n] as const;\n\nexport const FHIRCAST_EVENT_VERSION_REQUIRED = ['DiagnosticReport-update'] as const;\nexport type FhircastEventVersionRequired = (typeof FHIRCAST_EVENT_VERSION_REQUIRED)[number];\nexport type FhircastEventVersionOptional = Exclude<FhircastEventName, FhircastEventVersionRequired>;\nexport function isContextVersionRequired(event: string): event is FhircastEventVersionRequired {\n  return (FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event);\n}\nexport function assertContextVersionOptional(event: string): asserts event is FhircastEventVersionOptional {\n  if ((FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event)) {\n    throw new OperationOutcomeError(validationError(`'context.version' is required for '${event}'.`));\n  }\n}\n\nexport type FhircastEventName = keyof typeof FHIRCAST_EVENT_NAMES;\nexport type FhircastResourceType = (typeof FHIRCAST_RESOURCE_TYPES)[number];\n\nexport type FhircastEventContextDetails = {\n  resourceType: FhircastResourceType | '*';\n  optional?: boolean; // NOTE: optional here is only referring to the schema, the spec often mentions that these are required if available as references for a given anchor resource\n  manyAllowed?: boolean;\n  isArray?: boolean;\n};\n\n// Key value pairs of { [FhircastEventName]: [required_resource1, required_resource2] }\nexport const FHIRCAST_EVENT_RESOURCES = {\n  'Patient-open': {\n    patient: { resourceType: 'Patient' },\n    /* STU2 only! `encounter` key removed in STU3 */\n    encounter: { resourceType: 'Encounter', optional: true },\n  },\n  'Patient-close': {\n    patient: { resourceType: 'Patient' },\n    /* STU2 only! `encounter` key removed in STU3 */\n    encounter: { resourceType: 'Encounter', optional: true },\n  },\n  'ImagingStudy-open': {\n    study: { resourceType: 'ImagingStudy' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    patient: { resourceType: 'Patient', optional: true },\n  },\n  'ImagingStudy-close': {\n    study: { resourceType: 'ImagingStudy' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    patient: { resourceType: 'Patient', optional: true },\n  },\n  'Encounter-open': {\n    encounter: { resourceType: 'Encounter' },\n    patient: { resourceType: 'Patient' },\n  },\n  'Encounter-close': {\n    encounter: { resourceType: 'Encounter' },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-open': {\n    report: { resourceType: 'DiagnosticReport' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true, manyAllowed: true },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-close': {\n    report: { resourceType: 'DiagnosticReport' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true, manyAllowed: true },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-select': {\n    report: { resourceType: 'DiagnosticReport' },\n    select: { resourceType: '*', isArray: true },\n  },\n  'DiagnosticReport-update': {\n    report: { resourceType: 'DiagnosticReport' },\n    patient: { resourceType: 'Patient', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true },\n    updates: { resourceType: 'Bundle' },\n  },\n  syncerror: {\n    operationoutcome: { resourceType: 'OperationOutcome' },\n  },\n} as const satisfies Record<FhircastEventName, Record<string, FhircastEventContextDetails>>;\n\n/**\n * Checks if a `ResourceType` can be used in a `FHIRcast` context.\n *\n * @param resourceType - A `ResourceType` to test.\n * @returns `true` if this is a resource type associated with `FHIRcast` contexts, otherwise returns `false`.\n */\nexport function isFhircastResourceType(resourceType: FhircastResourceType): boolean {\n  return FHIRCAST_RESOURCE_TYPES.includes(resourceType);\n}\n\n/**\n * A `FHIRcast` subscription request.\n *\n * Can be passed to `MedplumClient.fhircastConnect` or `MedplumClient.fhircastUnsubscribe` to either open a `FHIRcast` connection, or unsubscribe from the subscription.\n */\nexport type SubscriptionRequest = {\n  channelType: 'websocket';\n  mode: 'subscribe' | 'unsubscribe';\n  events: FhircastEventName[];\n  topic: string;\n  endpoint: string;\n};\n\nexport type PendingSubscriptionRequest = Omit<SubscriptionRequest, 'endpoint'>;\n\nexport type FhircastEventContextMap<EventName extends FhircastEventName = FhircastEventName> =\n  (typeof FHIRCAST_EVENT_RESOURCES)[EventName];\nexport type FhircastEventContextKey<EventName extends FhircastEventName = FhircastEventName> =\n  keyof FhircastEventContextMap<EventName>;\n\nexport type FhircastEventResourceType<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? _Ev['resourceType']\n  : never;\n\nexport type FhircastEventResource<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? FhircastEventResourceType<EventName, K> extends '*'\n    ? Resource & { id: string }\n    : Resource & { resourceType: FhircastEventResourceType<EventName, K>; id: string }\n  : never;\n\nexport type FhircastSingleResourceContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = { key: K; resource: FhircastEventResource<EventName, K> };\n\nexport type FhircastMultiResourceContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = { key: K; resources: FhircastEventResource<EventName, K>[] };\n\nexport type FhircastEventContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? _Ev['isArray'] extends true\n    ? FhircastMultiResourceContext<EventName, K>\n    : FhircastSingleResourceContext<EventName, K>\n  : never;\n\nexport type ConvertToUnion<T> = T[keyof T];\nexport type FhircastValidContextForEvent<EventName extends FhircastEventName = FhircastEventName> = ConvertToUnion<{\n  [key in FhircastEventContextKey<EventName>]: FhircastEventContext<EventName, key>;\n}>;\n\nexport type FhircastEventPayload<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = {\n  'hub.topic': string;\n  'hub.event': EventName;\n  context: FhircastEventContext<EventName, K>[];\n  'context.versionId'?: string;\n  'context.priorVersionId'?: string;\n};\n\nexport type FhircastMessagePayload<EventName extends FhircastEventName = FhircastEventName> = {\n  timestamp: string;\n  id: string;\n  event: FhircastEventPayload<EventName>;\n};\n\nexport function isCompletedSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): subscriptionRequest is SubscriptionRequest {\n  return !!(subscriptionRequest as SubscriptionRequest).endpoint;\n}\n\n/**\n * Creates a serialized url-encoded payload for a `FHIRcast` subscription from a `SubscriptionRequest` object that can be directly used in an HTTP request to the Hub.\n *\n * @param subscriptionRequest - An object representing a subscription request.\n * @returns A serialized subscription in url-encoded form.\n */\nexport function serializeFhircastSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): string {\n  if (!validateFhircastSubscriptionRequest(subscriptionRequest)) {\n    throw new OperationOutcomeError(\n      validationError('subscriptionRequest must be an object conforming to SubscriptionRequest type.')\n    );\n  }\n\n  const { channelType, mode, topic, events } = subscriptionRequest;\n\n  const formattedSubRequest = {\n    'hub.channel.type': channelType,\n    'hub.mode': mode,\n    'hub.topic': topic,\n    'hub.events': events.join(','),\n  } as Record<string, string>;\n\n  if (isCompletedSubscriptionRequest(subscriptionRequest)) {\n    formattedSubRequest.endpoint = subscriptionRequest.endpoint;\n  }\n  return new URLSearchParams(formattedSubRequest).toString();\n}\n\n/**\n * Validates that a `SubscriptionRequest`.\n *\n * @param subscriptionRequest - The `SubscriptionRequest` to validate.\n * @returns A `boolean` indicating whether or not the `SubscriptionRequest` is valid.\n */\nexport function validateFhircastSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): boolean {\n  if (typeof subscriptionRequest !== 'object') {\n    return false;\n  }\n  const { channelType, mode, topic, events } = subscriptionRequest;\n  if (!(channelType && mode && topic && events)) {\n    return false;\n  }\n  if (typeof topic !== 'string') {\n    return false;\n  }\n  if (typeof events !== 'object' || !Array.isArray(events) || events.length < 1) {\n    return false;\n  }\n  if (channelType !== 'websocket') {\n    return false;\n  }\n  if (mode !== 'subscribe' && mode !== 'unsubscribe') {\n    return false;\n  }\n  for (const event of events) {\n    if (!FHIRCAST_EVENT_NAMES[event]) {\n      return false;\n    }\n  }\n  if (\n    isCompletedSubscriptionRequest(subscriptionRequest) &&\n    !(typeof subscriptionRequest.endpoint === 'string' && subscriptionRequest.endpoint.startsWith('ws'))\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Throws if the context resource type is invalid. Intended as a helper for `validateFhircastContexts` only.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param resource - The `FHIRcast` event context resource to validate for given key.\n * @param i - The index of the current context in the context list.\n * @param keySchema - Schema for given key for FHIRcast event.\n */\nfunction validateSingleResourceContext<\n  EventName extends FhircastEventName,\n  K extends FhircastEventContextKey<EventName>,\n>(\n  event: EventName,\n  resource: FhircastEventResource<EventName, K>,\n  i: number,\n  keySchema: FhircastEventContextDetails\n): void {\n  if (typeof resource !== 'object') {\n    throw new OperationOutcomeError(\n      validationError(\n        `context[${i}] is invalid. Context must contain a single valid FHIR resource! Resource is not an object.`\n      )\n    );\n  }\n  if (!(resource.id && typeof resource.id === 'string')) {\n    throw new OperationOutcomeError(\n      validationError(`context[${i}] is invalid. Resource must contain a valid string ID.`)\n    );\n  }\n  if (!resource.resourceType) {\n    throw new OperationOutcomeError(\n      validationError(`context[${i}] is invalid. Resource must contain a resource type. No resource type found.`)\n    );\n  }\n  const expectedResourceType = keySchema.resourceType;\n  // Make sure that resource is a valid type for this event if expected is not wildcard\n  if (expectedResourceType !== '*') {\n    if (!isFhircastResourceType(resource.resourceType as FhircastResourceType)) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. Resource must contain a valid FHIRcast resource type. Resource type is not a known resource type.`\n        )\n      );\n    }\n    if (expectedResourceType && resource.resourceType !== expectedResourceType) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. context[${i}] for the '${event}' event should contain resource of type ${expectedResourceType}.`\n        )\n      );\n    }\n  }\n}\n\n/**\n * Throws if the context is invalid. Intended as a helper for `validateFhircastContexts` only.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param context - The `FHIRcast` event contexts to validate.\n * @param i - The index of the current context in the context list.\n * @param keySchema - Schema for given key for FHIRcast event.\n * @param keysSeen - Set of keys seen so far. Used to prevent duplicate keys.\n */\nfunction validateFhircastContext<EventName extends FhircastEventName>(\n  event: EventName,\n  context: FhircastEventContext<EventName>,\n  i: number,\n  keySchema: FhircastEventContextDetails,\n  keysSeen: Map<FhircastEventContextKey<EventName>, number>\n): void {\n  keysSeen.set(context.key, (keysSeen.get(context.key) ?? 0) + 1);\n\n  // Cases:\n  // 1. isArray, resourceType: *\n  //    Don't validate resource types, just check that they are resources\n  // 2. isArray, resourceType: not *\n  //    Validate all resources match resourceType\n  // 3. not isArray, resourceType: *\n  //    Validate that it is a resource\n  // not isArray, resourceType: not *\n  //    Validate that it matches expected resource type\n\n  if (!keySchema.isArray) {\n    // validateSingleResourceKey\n    validateSingleResourceContext(event, context.resource, i, keySchema);\n  } else {\n    // validateMultipleResourceKey\n    const { resources } = context as unknown as {\n      key: FhircastEventContextKey<EventName>;\n      resources: FhircastEventResource<EventName>[];\n    };\n    if (!resources) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. context[${i}] for the '${event}' with key '${String(\n            context.key\n          )}' should contain an array of resources on the key 'resources'.`\n        )\n      );\n    }\n    for (const resource of resources) {\n      validateSingleResourceContext(event, resource, i, keySchema);\n    }\n  }\n}\n\n/**\n * Throws if any context in the given array of contexts is invalid.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param contexts - The `FHIRcast` event contexts to validate.\n */\nfunction validateFhircastContexts<EventName extends FhircastEventName>(\n  event: EventName,\n  contexts: FhircastEventContext<EventName>[]\n): void {\n  const keysSeen = new Map<FhircastEventContextKey, number>();\n  const eventSchema = FHIRCAST_EVENT_RESOURCES[event] as Record<FhircastEventContextKey, FhircastEventContextDetails>;\n  for (let i = 0; i < contexts.length; i++) {\n    const key = contexts[i].key as FhircastEventContextKey;\n    if (!eventSchema[key]) {\n      throw new OperationOutcomeError(\n        validationError(`Key '${key}' not found for event '${event}'. Make sure to add only valid keys.`)\n      );\n    }\n    validateFhircastContext(event, contexts[i], i, eventSchema[key], keysSeen);\n  }\n  // Iterate each key, if conditions for keys are not met as confirmed by `keysSeen` map, throw an error\n  for (const [key, details] of Object.entries(eventSchema) as [\n    FhircastEventContextKey,\n    FhircastEventContextDetails,\n  ][]) {\n    // If not optional and not keysSeen.has(key), throw\n    if (!(details.optional || keysSeen.has(key))) {\n      throw new OperationOutcomeError(\n        validationError(`Missing required key '${key}' on context for '${event}' event.`)\n      );\n    }\n    // If not multiple allowed and keySeen.get(key) > 1, throw\n    if (!details.manyAllowed && (keysSeen.get(key) || 0) > 1) {\n      throw new OperationOutcomeError(\n        validationError(\n          `${keysSeen.get(\n            key\n          )} context entries with key '${key}' found for the '${event}' event when schema only allows for 1.`\n        )\n      );\n    }\n  }\n}\n\n/**\n * Creates a serializable JSON payload for the `FHIRcast` protocol\n *\n * @param topic - The topic that this message will be published on. Usually a UUID.\n * @param event - The event name, ie. \"Patient-open\" or \"Patient-close\".\n * @param context - The updated context, containing new versions of resources related to this event.\n * @param versionId - The current `versionId` of the anchor context. For example, in `DiagnosticReport-update`, it's the `versionId` of the `DiagnosticReport`.\n * @returns A serializable `FhircastMessagePayload`.\n */\nexport function createFhircastMessagePayload<EventName extends FhircastEventVersionOptional>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId?: never\n): FhircastMessagePayload<EventName>;\n\nexport function createFhircastMessagePayload<EventName extends FhircastEventVersionRequired>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId: string\n): FhircastMessagePayload<EventName>;\n\nexport function createFhircastMessagePayload<\n  EventName extends FhircastEventVersionOptional | FhircastEventVersionRequired,\n>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId?: string | undefined\n): FhircastMessagePayload<EventName> {\n  if (!(topic && typeof topic === 'string')) {\n    throw new OperationOutcomeError(validationError('Must provide a topic.'));\n  }\n  if (!FHIRCAST_EVENT_NAMES[event]) {\n    throw new OperationOutcomeError(\n      validationError(\n        `Must provide a valid FHIRcast event name. Supported events: ${Object.keys(FHIRCAST_EVENT_NAMES).join(', ')}`\n      )\n    );\n  }\n  if (typeof context !== 'object') {\n    throw new OperationOutcomeError(validationError('context must be a context object or array of context objects.'));\n  }\n  if ((FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event) && !versionId) {\n    throw new OperationOutcomeError(validationError(`The '${event}' event must contain a 'context.versionId'.`));\n  }\n  const normalizedContexts = Array.isArray(context) ? context : [context];\n  // This will throw if any context in the array is invalid\n  validateFhircastContexts(event, normalizedContexts);\n  return {\n    timestamp: new Date().toISOString(),\n    id: generateId(),\n    event: {\n      'hub.topic': topic,\n      'hub.event': event,\n      context: normalizedContexts,\n      ...(versionId ? { 'context.versionId': versionId } : {}),\n    },\n  };\n}\n\nexport type FhircastConnectEvent = { type: 'connect' };\nexport type FhircastMessageEvent = { type: 'message'; payload: FhircastMessagePayload };\nexport type FhircastDisconnectEvent = { type: 'disconnect' };\n\nexport type FhircastSubscriptionEventMap = {\n  connect: FhircastConnectEvent;\n  message: FhircastMessageEvent;\n  disconnect: FhircastDisconnectEvent;\n};\n\n/**\n * A class representing a `FHIRcast` connection.\n *\n * `FhircastConnection` extends `EventTarget` and emits 3 lifecycle events:\n * 1. `connect` - An event to signal when a WebSocket connection has been opened. Fired as soon as a WebSocket emits `open`.\n * 2. `message` - Contains a `payload` field containing a `FHIRcast` message payload exactly as it comes in over WebSockets.\n * 3. `disconnect` - An event to signal when a WebSocket connection has been closed. Fired as soon as a WebSocket emits `close`.\n *\n * To close the connection, call `connection.disconnect()` and listen to the `disconnect` event to know when the connection has been disconnected.\n */\nexport class FhircastConnection extends TypedEventTarget<FhircastSubscriptionEventMap> {\n  subRequest: SubscriptionRequest;\n  private websocket: WebSocket;\n\n  /**\n   * Creates a new `FhircastConnection`.\n   * @param subRequest - The subscription request to initialize the connection from.\n   */\n  constructor(subRequest: SubscriptionRequest) {\n    super();\n    this.subRequest = subRequest;\n    if (!subRequest.endpoint) {\n      throw new OperationOutcomeError(validationError('Subscription request should contain an endpoint.'));\n    }\n    if (!validateFhircastSubscriptionRequest(subRequest)) {\n      throw new OperationOutcomeError(validationError('Subscription request failed validation.'));\n    }\n    const websocket = new WebSocket(subRequest.endpoint);\n    websocket.addEventListener('open', () => {\n      this.dispatchEvent({ type: 'connect' });\n\n      websocket.addEventListener('message', (event: MessageEvent) => {\n        const message = JSON.parse(event.data) as Record<string, string | object>;\n\n        // This is a check for `subscription request confirmations`, we just discard these for now\n        if (message['hub.topic']) {\n          return;\n        }\n\n        const fhircastMessage = message as unknown as FhircastMessagePayload;\n        this.dispatchEvent({ type: 'message', payload: fhircastMessage });\n\n        websocket.send(\n          JSON.stringify({\n            id: message?.id,\n            timestamp: new Date().toISOString(),\n          })\n        );\n      });\n\n      websocket.addEventListener('close', () => {\n        this.dispatchEvent({ type: 'disconnect' });\n      });\n    });\n    this.websocket = websocket;\n  }\n\n  disconnect(): void {\n    this.websocket.close();\n  }\n}\n", "import { decodeBase64 } from './base64';\n\n/**\n * Decodes a section of a JWT.\n * See: https://tools.ietf.org/html/rfc7519\n * @param payload - The JWT payload string.\n * @returns Collection of key value claims in the JWT payload.\n */\nfunction decodePayload(payload: string): Record<string, number | string> {\n  const cleanedPayload = payload.replace(/-/g, '+').replace(/_/g, '/');\n  const decodedPayload = decodeBase64(cleanedPayload);\n  const uriEncodedPayload = Array.from(decodedPayload).reduce((acc, char) => {\n    const uriEncodedChar = ('00' + char.charCodeAt(0).toString(16)).slice(-2);\n    return `${acc}%${uriEncodedChar}`;\n  }, '');\n  const jsonPayload = decodeURIComponent(uriEncodedPayload);\n  return JSON.parse(jsonPayload);\n}\n\n/**\n * Returns true if the token is a JWT.\n * @param token - The potential JWT token.\n * @returns True if the token is a JWT.\n */\nexport function isJwt(token: string): boolean {\n  return token.split('.').length === 3;\n}\n\n/**\n * Parses the JWT payload.\n * @param token - JWT token.\n * @returns Collection of key value claims in the JWT payload.\n */\nexport function parseJWTPayload(token: string): Record<string, number | string> {\n  const [_header, payload, _signature] = token.split('.');\n  return decodePayload(payload);\n}\n\n/**\n * Returns true if the access token was issued by a Medplum server.\n * @param accessToken - An access token of unknown origin.\n * @returns True if the access token was issued by a Medplum server.\n */\nexport function isMedplumAccessToken(accessToken: string): boolean {\n  try {\n    const payload = parseJWTPayload(accessToken);\n    return typeof payload.login_id === 'string';\n  } catch (err) {\n    return false;\n  }\n}\n", "/**\n * The ReadablePromise class wraps a request promise suitable for React Suspense.\n * See: https://blog.logrocket.com/react-suspense-data-fetching/#wrappromise-js\n * See: https://github.com/ovieokeh/suspense-data-fetching/blob/master/lib/api/wrapPromise.js\n */\nexport class ReadablePromise<T> implements Promise<T> {\n  readonly [Symbol.toStringTag]: string = 'ReadablePromise';\n  private suspender: Promise<T>;\n  private status: 'pending' | 'error' | 'success' = 'pending';\n  private response: T | undefined;\n  private error: Error | undefined;\n\n  constructor(requestPromise: Promise<T>) {\n    this.suspender = requestPromise.then(\n      (res: T) => {\n        this.status = 'success';\n        this.response = res;\n        return res;\n      },\n      (err: any) => {\n        this.status = 'error';\n        this.error = err;\n        throw err;\n      }\n    );\n  }\n\n  /**\n   * Returns true if the promise is pending.\n   * @returns True if the Promise is pending.\n   */\n  isPending(): boolean {\n    return this.status === 'pending';\n  }\n\n  /**\n   * Returns true if the promise resolved successfully.\n   * @returns True if the Promise resolved successfully.\n   */\n  isOk(): boolean {\n    return this.status === 'success';\n  }\n\n  /**\n   * Attempts to read the value of the promise.\n   * If the promise is pending, this method will throw a promise.\n   * If the promise rejected, this method will throw the rejection reason.\n   * If the promise resolved, this method will return the resolved value.\n   * @returns The resolved value of the Promise.\n   */\n  read(): T {\n    switch (this.status) {\n      case 'pending':\n        throw this.suspender; //eslint-disable-line @typescript-eslint/no-throw-literal\n      case 'error':\n        throw this.error as Error;\n      default:\n        return this.response as T;\n    }\n  }\n\n  /**\n   * Attaches callbacks for the resolution and/or rejection of the Promise.\n   * @param onfulfilled - The callback to execute when the Promise is resolved.\n   * @param onrejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of which ever callback is executed.\n   */\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2> {\n    return this.suspender.then(onfulfilled, onrejected);\n  }\n\n  /**\n   * Attaches a callback for only the rejection of the Promise.\n   * @param onrejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of the callback.\n   */\n  catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<T | TResult> {\n    return this.suspender.catch(onrejected);\n  }\n\n  /**\n   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n   * resolved value cannot be modified from the callback.\n   * @param onfinally - The callback to execute when the Promise is settled (fulfilled or rejected).\n   * @returns A Promise for the completion of the callback.\n   */\n  finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.suspender.finally(onfinally);\n  }\n}\n", "import { stringify } from './utils';\n\n/**\n * The ClientStorage class is a utility class for storing strings and objects.\n *\n * When using MedplumClient in the browser, it will be backed by browser localStorage.\n *\n * When Using MedplumClient in the server, it will be backed by the MemoryStorage class.  For example, the Medplum CLI uses `FileSystemStorage`.\n */\nexport class ClientStorage {\n  private readonly storage: Storage;\n\n  constructor() {\n    this.storage = typeof localStorage !== 'undefined' ? localStorage : new MemoryStorage();\n  }\n\n  clear(): void {\n    this.storage.clear();\n  }\n\n  getString(key: string): string | undefined {\n    return this.storage.getItem(key) ?? undefined;\n  }\n\n  setString(key: string, value: string | undefined): void {\n    if (value) {\n      this.storage.setItem(key, value);\n    } else {\n      this.storage.removeItem(key);\n    }\n  }\n\n  getObject<T>(key: string): T | undefined {\n    const str = this.getString(key);\n    return str ? (JSON.parse(str) as T) : undefined;\n  }\n\n  setObject<T>(key: string, value: T): void {\n    this.setString(key, value ? stringify(value) : undefined);\n  }\n}\n\n/**\n * The MemoryStorage class is a minimal in-memory implementation of the Storage interface.\n */\nexport class MemoryStorage implements Storage {\n  private data: Map<string, string>;\n\n  constructor() {\n    this.data = new Map<string, string>();\n  }\n\n  /**\n   * Returns the number of key/value pairs.\n   * @returns The number of key/value pairs.\n   */\n  get length(): number {\n    return this.data.size;\n  }\n\n  /**\n   * Removes all key/value pairs, if there are any.\n   */\n  clear(): void {\n    this.data.clear();\n  }\n\n  /**\n   * Returns the current value associated with the given key, or null if the given key does not exist.\n   * @param key - The specified storage key.\n   * @returns The current value associated with the given key, or null if the given key does not exist.\n   */\n  getItem(key: string): string | null {\n    return this.data.get(key) ?? null;\n  }\n\n  /**\n   * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n   * @param key - The storage key.\n   * @param value - The new value.\n   */\n  setItem(key: string, value: string | null): void {\n    if (value) {\n      this.data.set(key, value);\n    } else {\n      this.data.delete(key);\n    }\n  }\n\n  /**\n   * Removes the key/value pair with the given key, if a key/value pair with the given key exists.\n   * @param key - The storage key.\n   */\n  removeItem(key: string): void {\n    this.data.delete(key);\n  }\n\n  /**\n   * Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.\n   * @param index - The numeric index.\n   * @returns The nth key.\n   */\n  key(index: number): string | null {\n    return Array.from(this.data.keys())[index];\n  }\n}\n", "// PKCE auth based on:\n// https://aws.amazon.com/blogs/security/how-to-add-authentication-single-page-web-application-with-amazon-cognito-oauth2-implementation/\n\nimport {\n  AccessPolicy,\n  Agent,\n  Attachment,\n  Binary,\n  BulkDataExport,\n  Bundle,\n  BundleEntry,\n  BundleLink,\n  Communication,\n  Device,\n  Encounter,\n  ExtractResource,\n  Identifier,\n  Media,\n  OperationOutcome,\n  Patient,\n  Project,\n  ProjectMembership,\n  ProjectMembershipAccess,\n  ProjectSecret,\n  Reference,\n  Resource,\n  ResourceType,\n  SearchParameter,\n  StructureDefinition,\n  UserConfiguration,\n  ValueSet,\n} from '@medplum/fhirtypes';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n/** @ts-ignore */\nimport type { CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\nimport { encodeBase64 } from './base64';\nimport { LRUCache } from './cache';\nimport { ContentType } from './contenttype';\nimport { encryptSHA256, getRandomString } from './crypto';\nimport { EventTarget } from './eventtarget';\nimport {\n  FhircastConnection,\n  FhircastEventContext,\n  FhircastEventName,\n  FhircastEventVersionOptional,\n  FhircastEventVersionRequired,\n  PendingSubscriptionRequest,\n  SubscriptionRequest,\n  assertContextVersionOptional,\n  createFhircastMessagePayload,\n  isContextVersionRequired,\n  serializeFhircastSubscriptionRequest,\n  validateFhircastSubscriptionRequest,\n} from './fhircast';\nimport { Hl7Message } from './hl7';\nimport { isJwt, isMedplumAccessToken, parseJWTPayload } from './jwt';\nimport {\n  OperationOutcomeError,\n  badRequest,\n  isOk,\n  isOperationOutcome,\n  normalizeOperationOutcome,\n  notFound,\n  validationError,\n} from './outcomes';\nimport { ReadablePromise } from './readablepromise';\nimport { ClientStorage } from './storage';\nimport { indexSearchParameter } from './types';\nimport { indexStructureDefinitionBundle, isDataTypeLoaded } from './typeschema/types';\nimport {\n  CodeChallengeMethod,\n  ProfileResource,\n  arrayBufferToBase64,\n  createReference,\n  getReferenceString,\n  resolveId,\n  sleep,\n} from './utils';\n\nexport const MEDPLUM_VERSION = process.env.MEDPLUM_VERSION ?? '';\nexport const DEFAULT_ACCEPT = ContentType.FHIR_JSON + ', */*; q=0.1';\n\nconst DEFAULT_BASE_URL = 'https://api.medplum.com/';\nconst DEFAULT_RESOURCE_CACHE_SIZE = 1000;\nconst DEFAULT_CACHE_TIME = 60000; // 60 seconds\nconst BINARY_URL_PREFIX = 'Binary/';\n\nconst system: Device = { resourceType: 'Device', id: 'system', deviceName: [{ name: 'System' }] };\n\n/**\n * The MedplumClientOptions interface defines configuration options for MedplumClient.\n *\n * All configuration settings are optional.\n */\nexport interface MedplumClientOptions {\n  /**\n   * Base server URL.\n   *\n   * Default value is https://api.medplum.com/\n   *\n   * Use this to point to a custom Medplum deployment.\n   */\n  baseUrl?: string;\n\n  /**\n   * OAuth2 authorize URL.\n   *\n   * Default value is baseUrl + \"/oauth2/authorize\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  authorizeUrl?: string;\n\n  /**\n   * FHIR URL path.\n   *\n   * Default value is \"fhir/R4/\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a different path when connecting to a FHIR server.\n   */\n  fhirUrlPath?: string;\n\n  /**\n   * OAuth2 token URL.\n   *\n   * Default value is baseUrl + \"/oauth2/token\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  tokenUrl?: string;\n\n  /**\n   * OAuth2 logout URL.\n   *\n   * Default value is baseUrl + \"/oauth2/logout\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  logoutUrl?: string;\n\n  /**\n   * The client ID.\n   *\n   * Client ID can be used for SMART-on-FHIR customization.\n   */\n  clientId?: string;\n\n  /**\n   * The client secret.\n   *\n   * Client secret can be used for FHIR Oauth Client Credential flows\n   */\n  clientSecret?: string;\n\n  /**\n   * The OAuth Access Token.\n   *\n   * Access Token used to connect to make request to FHIR servers\n   */\n  accessToken?: string;\n\n  /**\n   * Number of resources to store in the cache.\n   *\n   * Default value is 1000.\n   *\n   * Consider using this for performance of displaying Patient or Practitioner resources.\n   */\n  resourceCacheSize?: number;\n\n  /**\n   * The length of time in milliseconds to cache resources.\n   *\n   * Default value is 10000 (10 seconds).\n   *\n   * Cache time of zero disables all caching.\n   *\n   * For any individual request, the cache behavior can be overridden by setting the cache property on request options.\n   *\n   * See: https://developer.mozilla.org/en-US/docs/Web/API/Request/cache\n   */\n  cacheTime?: number;\n\n  /**\n   * The length of time in milliseconds to delay requests for auto batching.\n   *\n   * Auto batching attempts to group multiple requests together into a single batch request.\n   *\n   * Default value is 0, which disables auto batching.\n   */\n  autoBatchTime?: number;\n\n  /**\n   * Fetch implementation.\n   *\n   * Default is window.fetch (if available).\n   *\n   * For Node.js applications, consider the 'node-fetch' package.\n   */\n  fetch?: FetchLike;\n\n  /**\n   * Storage implementation.\n   *\n   * Default is window.localStorage (if available), this is the common implementation for use in the browser, or an in-memory storage implementation.  If using Medplum on a server it may be useful to provide a custom storage implementation, for example using redis, a database or a file based storage.  Medplum CLI is an an example of `FileSystemStorage`, for reference.\n   */\n  storage?: ClientStorage;\n\n  /**\n   * Create PDF implementation.\n   *\n   * Default is none, and PDF generation is disabled.\n   *\n   * @example\n   * In browser environments, import the client-side pdfmake library.\n   *\n   * ```html\n   * <script src=\"pdfmake.min.js\"></script>\n   * <script>\n   * async function createPdf(docDefinition, tableLayouts, fonts) {\n   *   return new Promise((resolve) => {\n   *     pdfMake.createPdf(docDefinition, tableLayouts, fonts).getBlob(resolve);\n   *   });\n   * }\n   * </script>\n   * ```\n   *\n   * @example\n   * In Node.js applications:\n   *\n   * ```ts\n   * import type { CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\n   * function createPdf(\n   *   docDefinition: TDocumentDefinitions,\n   *   tableLayouts?: { [name: string]: CustomTableLayout },\n   *   fonts?: TFontDictionary\n   * ): Promise<Buffer> {\n   *   return new Promise((resolve, reject) => {\n   *     const printer = new PdfPrinter(fonts ?? {});\n   *     const pdfDoc = printer.createPdfKitDocument(docDefinition, { tableLayouts });\n   *     const chunks: Uint8Array[] = [];\n   *     pdfDoc.on('data', (chunk: Uint8Array) => chunks.push(chunk));\n   *     pdfDoc.on('end', () => resolve(Buffer.concat(chunks)));\n   *     pdfDoc.on('error', reject);\n   *     pdfDoc.end();\n   *   });\n   * }\n   * ```\n   */\n  createPdf?: CreatePdfFunction;\n\n  /**\n   * Callback for when the client is unauthenticated.\n   *\n   * Default is do nothing.\n   *\n   * For client side applications, consider redirecting to a sign in page.\n   */\n  onUnauthenticated?: () => void;\n\n  /**\n   * The default redirect behavior.\n   *\n   * The default behavior is to not follow redirects.\n   *\n   * Use \"follow\" to automatically follow redirects.\n   */\n  redirect?: RequestRedirect;\n\n  /**\n   * When the verbose flag is set, the client will log all requests and responses to the console.\n   */\n  verbose?: boolean;\n}\n\nexport type FetchLike = (url: string, options?: any) => Promise<any>;\n\n/**\n * QueryTypes defines the different ways to specify FHIR search parameters.\n *\n * Can be any valid input to the URLSearchParams() constructor.\n *\n * TypeScript definitions for URLSearchParams do not match runtime behavior.\n * The official spec only accepts string values.\n * Web browsers and Node.js automatically coerce values to strings.\n * See: https://github.com/microsoft/TypeScript/issues/32951\n */\nexport type QueryTypes = URLSearchParams | string[][] | Record<string, any> | string | undefined;\n\n/**\n * ResourceArray is an array of resources with a bundle property.\n * The bundle property is a FHIR Bundle containing the search results.\n * This is useful for retrieving bundle metadata such as total, offset, and next link.\n */\nexport type ResourceArray<T extends Resource = Resource> = T[] & { bundle: Bundle<T> };\n\nexport interface CreatePdfFunction {\n  (\n    docDefinition: TDocumentDefinitions,\n    tableLayouts?: Record<string, CustomTableLayout> | undefined,\n    fonts?: TFontDictionary | undefined\n  ): Promise<any>;\n}\n\nexport interface BaseLoginRequest {\n  readonly projectId?: string;\n  readonly clientId?: string;\n  readonly resourceType?: string;\n  readonly scope?: string;\n  readonly nonce?: string;\n  readonly codeChallenge?: string;\n  readonly codeChallengeMethod?: CodeChallengeMethod;\n  readonly googleClientId?: string;\n  readonly launch?: string;\n  readonly redirectUri?: string;\n}\n\nexport interface EmailPasswordLoginRequest extends BaseLoginRequest {\n  readonly email: string;\n  readonly password: string;\n  /** @deprecated Use scope of \"offline\" or \"offline_access\" instead. */\n  readonly remember?: boolean;\n}\n\nexport interface NewUserRequest {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly email: string;\n  readonly password: string;\n  readonly recaptchaToken: string;\n  readonly recaptchaSiteKey?: string;\n  readonly remember?: boolean;\n  readonly projectId?: string;\n  readonly clientId?: string;\n}\n\nexport interface NewProjectRequest {\n  readonly login: string;\n  readonly projectName: string;\n}\n\nexport interface NewPatientRequest {\n  readonly login: string;\n  readonly projectId: string;\n}\n\nexport interface GoogleCredentialResponse {\n  readonly clientId: string;\n  readonly credential: string;\n}\n\nexport interface GoogleLoginRequest extends BaseLoginRequest {\n  readonly googleClientId: string;\n  readonly googleCredential: string;\n  readonly createUser?: boolean;\n}\n\nexport interface LoginAuthenticationResponse {\n  readonly login: string;\n  readonly mfaRequired?: boolean;\n  readonly code?: string;\n  readonly memberships?: ProjectMembership[];\n}\n\nexport interface LoginProfileResponse {\n  readonly login: string;\n  readonly scope: string;\n}\n\nexport interface LoginScopeResponse {\n  readonly login: string;\n  readonly code: string;\n}\n\nexport interface LoginState {\n  readonly project: Reference<Project>;\n  readonly profile: Reference<ProfileResource>;\n  readonly accessToken: string;\n  readonly refreshToken: string;\n}\n\nexport interface TokenResponse {\n  readonly token_type: string;\n  readonly id_token: string;\n  readonly access_token: string;\n  readonly refresh_token: string;\n  readonly expires_in: number;\n  readonly project: Reference<Project>;\n  readonly profile: Reference<ProfileResource>;\n}\n\nexport interface BotEvent<T = Resource | Hl7Message | string | Record<string, any>> {\n  readonly contentType: string;\n  readonly input: T;\n  readonly secrets: Record<string, ProjectSecret>;\n}\n\nexport interface InviteRequest {\n  resourceType: 'Patient' | 'Practitioner' | 'RelatedPerson';\n  firstName: string;\n  lastName: string;\n  email?: string;\n  externalId?: string;\n  password?: string;\n  sendEmail?: boolean;\n  membership?: Partial<ProjectMembership>;\n  /** @deprecated Use membership.accessPolicy instead. */\n  accessPolicy?: Reference<AccessPolicy>;\n  /** @deprecated Use membership.access instead. */\n  access?: ProjectMembershipAccess[];\n  /** @deprecated Use membership.admin instead. */\n  admin?: boolean;\n}\n\n/**\n * JSONPatch patch operation.\n * Compatible with fast-json-patch and rfc6902 Operation.\n */\nexport interface PatchOperation {\n  readonly op: 'add' | 'remove' | 'replace' | 'copy' | 'move' | 'test';\n  readonly path: string;\n  readonly value?: any;\n}\n\n/**\n * Source for a FHIR Binary.\n */\nexport type BinarySource = string | File | Blob | Uint8Array;\n\n/**\n * Email address definition.\n * Compatible with nodemailer Mail.Address.\n */\nexport interface MailAddress {\n  readonly name: string;\n  readonly address: string;\n}\n\n/**\n * Email destination definition.\n */\nexport type MailDestination = string | MailAddress | string[] | MailAddress[];\n\n/**\n * Email attachment definition.\n * Compatible with nodemailer Mail.Options.\n */\nexport interface MailAttachment {\n  /** String, Buffer or a Stream contents for the attachmentent */\n  readonly content?: string;\n  /** path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments) */\n  readonly path?: string;\n  /** filename to be reported as the name of the attached file, use of unicode is allowed. If you do not want to use a filename, set this value as false, otherwise a filename is generated automatically */\n  readonly filename?: string | false;\n  /** optional content type for the attachment, if not set will be derived from the filename property */\n  readonly contentType?: string;\n}\n\n/**\n * Email message definition.\n * Compatible with nodemailer Mail.Options.\n */\nexport interface MailOptions {\n  /** The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>` */\n  readonly from?: string | MailAddress;\n  /** An e-mail address that will appear on the Sender: field */\n  readonly sender?: string | MailAddress;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the To: field */\n  readonly to?: MailDestination;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the Cc: field */\n  readonly cc?: MailDestination;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the Bcc: field */\n  readonly bcc?: MailDestination;\n  /** An e-mail address that will appear on the Reply-To: field */\n  readonly replyTo?: string | MailAddress;\n  /** The subject of the e-mail */\n  readonly subject?: string;\n  /** The plaintext version of the message */\n  readonly text?: string;\n  /** The HTML version of the message */\n  readonly html?: string;\n  /** An array of attachment objects */\n  readonly attachments?: MailAttachment[];\n}\n\ninterface SchemaGraphQLResponse {\n  readonly data: {\n    readonly StructureDefinitionList: StructureDefinition[];\n    readonly SearchParameterList: SearchParameter[];\n  };\n}\n\ninterface RequestCacheEntry {\n  readonly requestTime: number;\n  readonly value: ReadablePromise<any>;\n}\n\ninterface AutoBatchEntry<T = any> {\n  readonly method: string;\n  readonly url: string;\n  readonly options: RequestInit;\n  readonly resolve: (value: T) => void;\n  readonly reject: (reason: any) => void;\n}\n\n/**\n * OAuth 2.0 Grant Type Identifiers\n * Standard identifiers: https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-07#name-grant-types\n * JWT bearer extension: https://datatracker.ietf.org/doc/html/rfc7523\n * Token exchange extension: https://datatracker.ietf.org/doc/html/rfc8693\n */\nexport enum OAuthGrantType {\n  ClientCredentials = 'client_credentials',\n  AuthorizationCode = 'authorization_code',\n  RefreshToken = 'refresh_token',\n  JwtBearer = 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n  TokenExchange = 'urn:ietf:params:oauth:grant-type:token-exchange',\n}\n\n/**\n * OAuth 2.0 Token Type Identifiers\n * See: https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers\n */\nexport enum OAuthTokenType {\n  /** Indicates that the token is an OAuth 2.0 access token issued by the given authorization server. */\n  AccessToken = 'urn:ietf:params:oauth:token-type:access_token',\n  /** Indicates that the token is an OAuth 2.0 refresh token issued by the given authorization server. */\n  RefreshToken = 'urn:ietf:params:oauth:token-type:refresh_token',\n  /** Indicates that the token is an ID Token as defined in Section 2 of [OpenID.Core]. */\n  IdToken = 'urn:ietf:params:oauth:token-type:id_token',\n  /** Indicates that the token is a base64url-encoded SAML 1.1 [OASIS.saml-core-1.1] assertion. */\n  Saml1Token = 'urn:ietf:params:oauth:token-type:saml1',\n  /** Indicates that the token is a base64url-encoded SAML 2.0 [OASIS.saml-core-2.0-os] assertion. */\n  Saml2Token = 'urn:ietf:params:oauth:token-type:saml2',\n}\n\n/**\n * OAuth 2.0 Client Authentication Methods\n * See: https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n */\nexport enum OAuthTokenAuthMethod {\n  ClientSecretBasic = 'client_secret_basic',\n  ClientSecretPost = 'client_secret_post',\n  ClientSecretJwt = 'client_secret_jwt',\n  PrivateKeyJwt = 'private_key_jwt',\n  None = 'none',\n}\n\n/**\n * OAuth 2.0 Client Authentication Methods\n * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.2\n */\nexport enum OAuthClientAssertionType {\n  /** Using JWTs for Client Authentication */\n  JwtBearer = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n}\n\ninterface SessionDetails {\n  project: Project;\n  membership: ProjectMembership;\n  profile: ProfileResource;\n  config: UserConfiguration;\n  accessPolicy: AccessPolicy;\n}\n\n/**\n * The MedplumClient class provides a client for the Medplum FHIR server.\n *\n * The client can be used in the browser, in a Node.js application, or in a Medplum Bot.\n *\n * The client provides helpful methods for common operations such as:\n *   1. Authenticating\n *   2. Creating resources\n *   3. Reading resources\n *   4. Updating resources\n *   5. Deleting resources\n *   6. Searching\n *   7. Making GraphQL queries\n *\n * @example\n * Here is a quick example of how to use the client:\n *\n * ```typescript\n * import { MedplumClient } from '@medplum/core';\n * const medplum = new MedplumClient();\n * ```\n *\n * @example\n * Create a `Patient`:\n *\n * ```typescript\n * const patient = await medplum.createResource({\n *   resourceType: 'Patient',\n *   name: [{\n *     given: ['Alice'],\n *     family: 'Smith'\n *   }]\n * });\n * ```\n *\n * @example\n * Read a `Patient` by ID:\n *\n * ```typescript\n * const patient = await medplum.readResource('Patient', '123');\n * console.log(patient.name[0].given[0]);\n * ```\n *\n * @example\n * Search for a `Patient` by name:\n *\n * ```typescript\n * const bundle = await medplum.search('Patient', 'name=Alice');\n * console.log(bundle.total);\n * ```\n *\n *  <head>\n *    <meta name=\"algolia:pageRank\" content=\"100\" />\n *  </head>\n */\nexport class MedplumClient extends EventTarget {\n  private readonly options: MedplumClientOptions;\n  private readonly fetch: FetchLike;\n  private readonly createPdfImpl?: CreatePdfFunction;\n  private readonly storage: ClientStorage;\n  private readonly requestCache: LRUCache<RequestCacheEntry> | undefined;\n  private readonly cacheTime: number;\n  private readonly baseUrl: string;\n  private readonly fhirBaseUrl: string;\n  private readonly authorizeUrl: string;\n  private readonly tokenUrl: string;\n  private readonly logoutUrl: string;\n  private readonly onUnauthenticated?: () => void;\n  private readonly autoBatchTime: number;\n  private readonly autoBatchQueue: AutoBatchEntry[] | undefined;\n  private medplumServer?: boolean;\n  private clientId?: string;\n  private clientSecret?: string;\n  private autoBatchTimerId?: any;\n  private accessToken?: string;\n  private refreshToken?: string;\n  private refreshPromise?: Promise<any>;\n  private profilePromise?: Promise<any>;\n  private sessionDetails?: SessionDetails;\n  private basicAuth?: string;\n\n  constructor(options?: MedplumClientOptions) {\n    super();\n\n    if (options?.baseUrl) {\n      if (!options.baseUrl.startsWith('http')) {\n        throw new Error('Base URL must start with http or https');\n      }\n    }\n\n    this.options = options ?? {};\n    this.fetch = options?.fetch ?? getDefaultFetch();\n    this.storage = options?.storage ?? new ClientStorage();\n    this.createPdfImpl = options?.createPdf;\n    this.baseUrl = ensureTrailingSlash(options?.baseUrl ?? DEFAULT_BASE_URL);\n    this.fhirBaseUrl = ensureTrailingSlash(concatUrls(this.baseUrl, options?.fhirUrlPath ?? 'fhir/R4/'));\n    this.authorizeUrl = concatUrls(this.baseUrl, options?.authorizeUrl ?? 'oauth2/authorize');\n    this.tokenUrl = concatUrls(this.baseUrl, options?.tokenUrl ?? 'oauth2/token');\n    this.logoutUrl = concatUrls(this.baseUrl, options?.logoutUrl ?? 'oauth2/logout');\n    this.clientId = options?.clientId ?? '';\n    this.clientSecret = options?.clientSecret ?? '';\n    this.onUnauthenticated = options?.onUnauthenticated;\n\n    this.cacheTime = options?.cacheTime ?? DEFAULT_CACHE_TIME;\n    if (this.cacheTime > 0) {\n      this.requestCache = new LRUCache(options?.resourceCacheSize ?? DEFAULT_RESOURCE_CACHE_SIZE);\n    } else {\n      this.requestCache = undefined;\n    }\n\n    if (options?.autoBatchTime) {\n      this.autoBatchTime = options.autoBatchTime;\n      this.autoBatchQueue = [];\n    } else {\n      this.autoBatchTime = 0;\n      this.autoBatchQueue = undefined;\n    }\n\n    if (options?.accessToken) {\n      this.setAccessToken(options.accessToken);\n    } else {\n      const activeLogin = this.getActiveLogin();\n      if (activeLogin) {\n        this.setAccessToken(activeLogin.accessToken, activeLogin.refreshToken);\n        this.refreshProfile().catch(console.log);\n      }\n    }\n\n    this.setupStorageListener();\n  }\n\n  /**\n   * Returns the current base URL for all API requests.\n   * By default, this is set to `https://api.medplum.com/`.\n   * This can be overridden by setting the `baseUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current base URL for all API requests.\n   */\n  getBaseUrl(): string {\n    return this.baseUrl;\n  }\n\n  /**\n   * Returns the current authorize URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/authorize`.\n   * This can be overridden by setting the `authorizeUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current authorize URL.\n   */\n  getAuthorizeUrl(): string {\n    return this.authorizeUrl;\n  }\n\n  /**\n   * Returns the current token URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/token`.\n   * This can be overridden by setting the `tokenUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current token URL.\n   */\n  getTokenUrl(): string {\n    return this.tokenUrl;\n  }\n\n  /**\n   * Returns the current logout URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/logout`.\n   * This can be overridden by setting the `logoutUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current logout URL.\n   */\n  getLogoutUrl(): string {\n    return this.logoutUrl;\n  }\n\n  /**\n   * Clears all auth state including local storage and session storage.\n   * @category Authentication\n   */\n  clear(): void {\n    this.storage.clear();\n    sessionStorage.clear();\n    this.clearActiveLogin();\n  }\n\n  /**\n   * Clears the active login from local storage.\n   * Does not clear all local storage (such as other logins).\n   * @category Authentication\n   */\n  clearActiveLogin(): void {\n    this.storage.setString('activeLogin', undefined);\n    this.requestCache?.clear();\n    this.accessToken = undefined;\n    this.refreshToken = undefined;\n    this.sessionDetails = undefined;\n    this.medplumServer = undefined;\n    this.dispatchEvent({ type: 'change' });\n  }\n\n  /**\n   * Invalidates any cached values or cached requests for the given URL.\n   * @category Caching\n   * @param url - The URL to invalidate.\n   */\n  invalidateUrl(url: URL | string): void {\n    url = url.toString();\n    this.requestCache?.delete(url);\n  }\n\n  /**\n   * Invalidates all cached values and flushes the cache.\n   * @category Caching\n   */\n  invalidateAll(): void {\n    this.requestCache?.clear();\n  }\n\n  /**\n   * Invalidates all cached search results or cached requests for the given resourceType.\n   * @category Caching\n   * @param resourceType - The resource type to invalidate.\n   */\n  invalidateSearches<K extends ResourceType>(resourceType: K): void {\n    const url = this.fhirBaseUrl + resourceType;\n    if (this.requestCache) {\n      for (const key of this.requestCache.keys()) {\n        if (key.endsWith(url) || key.includes(url + '?')) {\n          this.requestCache.delete(key);\n        }\n      }\n    }\n  }\n\n  /**\n   * Makes an HTTP GET request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `readResource()`, `search()`, etc.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  get<T = any>(url: URL | string, options: RequestInit = {}): ReadablePromise<T> {\n    url = url.toString();\n    const cached = this.getCacheEntry(url, options);\n    if (cached) {\n      return cached.value;\n    }\n\n    let promise: Promise<T>;\n\n    if (url.startsWith(this.fhirBaseUrl) && this.autoBatchQueue) {\n      promise = new Promise<T>((resolve, reject) => {\n        (this.autoBatchQueue as AutoBatchEntry[]).push({\n          method: 'GET',\n          url: (url as string).replace(this.fhirBaseUrl, ''),\n          options,\n          resolve,\n          reject,\n        });\n        if (!this.autoBatchTimerId) {\n          this.autoBatchTimerId = setTimeout(() => this.executeAutoBatch(), this.autoBatchTime);\n        }\n      });\n    } else {\n      promise = this.request<T>('GET', url, options);\n    }\n\n    const readablePromise = new ReadablePromise(promise);\n    this.setCacheEntry(url, readablePromise);\n    return readablePromise;\n  }\n\n  /**\n   * Makes an HTTP POST request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `createResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  post(url: URL | string, body: any, contentType?: string, options: RequestInit = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, body);\n    if (contentType) {\n      this.setRequestContentType(options, contentType);\n    }\n    this.invalidateUrl(url);\n    return this.request('POST', url, options);\n  }\n\n  /**\n   * Makes an HTTP PUT request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `updateResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  put(url: URL | string, body: any, contentType?: string, options: RequestInit = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, body);\n    if (contentType) {\n      this.setRequestContentType(options, contentType);\n    }\n    this.invalidateUrl(url);\n    return this.request('PUT', url, options);\n  }\n\n  /**\n   * Makes an HTTP PATCH request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `patchResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param operations - Array of JSONPatch operations.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  patch(url: URL | string, operations: PatchOperation[], options: RequestInit = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, operations);\n    this.setRequestContentType(options, ContentType.JSON_PATCH);\n    this.invalidateUrl(url);\n    return this.request('PATCH', url, options);\n  }\n\n  /**\n   * Makes an HTTP DELETE request to the specified URL.\n   *\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `deleteResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  delete(url: URL | string, options?: RequestInit): Promise<any> {\n    url = url.toString();\n    this.invalidateUrl(url);\n    return this.request('DELETE', url, options);\n  }\n\n  /**\n   * Initiates a new user flow.\n   *\n   * This method is part of the two different user registration flows:\n   * 1) New Practitioner and new Project\n   * 2) New Patient registration\n   * @category Authentication\n   * @param newUserRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewUser(newUserRequest: NewUserRequest, options?: RequestInit): Promise<LoginAuthenticationResponse> {\n    const { codeChallengeMethod, codeChallenge } = await this.startPkce();\n    return this.post(\n      'auth/newuser',\n      {\n        ...newUserRequest,\n        clientId: newUserRequest.clientId ?? this.clientId,\n        codeChallengeMethod,\n        codeChallenge,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a new project flow.\n   *\n   * This requires a partial login from `startNewUser` or `startNewGoogleUser`.\n   * @param newProjectRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewProject(\n    newProjectRequest: NewProjectRequest,\n    options?: RequestInit\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post('auth/newproject', newProjectRequest, undefined, options) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a new patient flow.\n   *\n   * This requires a partial login from `startNewUser` or `startNewGoogleUser`.\n   * @param newPatientRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewPatient(\n    newPatientRequest: NewPatientRequest,\n    options?: RequestInit\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post('auth/newpatient', newPatientRequest, undefined, options) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a user login flow.\n   * @category Authentication\n   * @param loginRequest - Login request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startLogin(\n    loginRequest: EmailPasswordLoginRequest,\n    options?: RequestInit\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post(\n      'auth/login',\n      {\n        ...(await this.ensureCodeChallenge(loginRequest)),\n        clientId: loginRequest.clientId ?? this.clientId,\n        scope: loginRequest.scope,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Tries to sign in with Google authentication.\n   * The response parameter is the result of a Google authentication.\n   * See: https://developers.google.com/identity/gsi/web/guides/handle-credential-responses-js-functions\n   * @category Authentication\n   * @param loginRequest - Login request including Google credential response.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startGoogleLogin(\n    loginRequest: GoogleLoginRequest,\n    options?: RequestInit\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post(\n      'auth/google',\n      {\n        ...(await this.ensureCodeChallenge(loginRequest)),\n        clientId: loginRequest.clientId ?? this.clientId,\n        scope: loginRequest.scope,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Returns the PKCE code challenge and method.\n   * If the login request already includes a code challenge, it is returned.\n   * Otherwise, a new PKCE code challenge is generated.\n   * @category Authentication\n   * @param loginRequest - The original login request.\n   * @returns The PKCE code challenge and method.\n   */\n  async ensureCodeChallenge<T extends BaseLoginRequest>(loginRequest: T): Promise<T> {\n    if (loginRequest.codeChallenge) {\n      return loginRequest;\n    }\n    return { ...loginRequest, ...(await this.startPkce()) };\n  }\n\n  /**\n   * Signs out locally.\n   * Does not invalidate tokens with the server.\n   * @category Authentication\n   */\n  async signOut(): Promise<void> {\n    await this.post(this.logoutUrl, {});\n    this.clear();\n  }\n\n  /**\n   * Tries to sign in the user.\n   * Returns true if the user is signed in.\n   * This may result in navigating away to the sign in page.\n   * @category Authentication\n   * @param loginParams - Optional login parameters.\n   * @returns The user profile resource if available.\n   */\n  async signInWithRedirect(loginParams?: Partial<BaseLoginRequest>): Promise<ProfileResource | undefined> {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    if (!code) {\n      await this.requestAuthorization(loginParams);\n      return undefined;\n    } else {\n      return this.processCode(code);\n    }\n  }\n\n  /**\n   * Tries to sign out the user.\n   * See: https://docs.aws.amazon.com/cognito/latest/developerguide/logout-endpoint.html\n   * @category Authentication\n   */\n  signOutWithRedirect(): void {\n    window.location.assign(this.logoutUrl);\n  }\n\n  /**\n   * Initiates sign in with an external identity provider.\n   * @param authorizeUrl - The external authorization URL.\n   * @param clientId - The external client ID.\n   * @param redirectUri - The external identity provider redirect URI.\n   * @param baseLogin - The Medplum login request.\n   * @param pkceEnabled - Whether `PKCE` should be enabled for this external auth request. Defaults to `true`.\n   * @category Authentication\n   */\n  async signInWithExternalAuth(\n    authorizeUrl: string,\n    clientId: string,\n    redirectUri: string,\n    baseLogin: BaseLoginRequest,\n    pkceEnabled = true\n  ): Promise<void> {\n    let loginRequest = baseLogin;\n    if (pkceEnabled) {\n      loginRequest = await this.ensureCodeChallenge(baseLogin);\n    }\n    window.location.assign(\n      this.getExternalAuthRedirectUri(authorizeUrl, clientId, redirectUri, loginRequest, pkceEnabled)\n    );\n  }\n\n  /**\n   * Exchange an external access token for a Medplum access token.\n   * @param token - The access token that was generated by the external identity provider.\n   * @param clientId - The ID of the `ClientApplication` in your Medplum project that will be making the exchange request.\n   * @returns The user profile resource.\n   * @category Authentication\n   */\n  async exchangeExternalAccessToken(token: string, clientId?: string): Promise<ProfileResource> {\n    clientId = clientId ?? this.clientId;\n    if (!clientId) {\n      throw new Error('MedplumClient is missing clientId');\n    }\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.TokenExchange);\n    formBody.set('subject_token_type', OAuthTokenType.AccessToken);\n    formBody.set('client_id', clientId);\n    formBody.set('subject_token', token);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Builds the external identity provider redirect URI.\n   * @param authorizeUrl - The external authorization URL.\n   * @param clientId - The external client ID.\n   * @param redirectUri - The external identity provider redirect URI.\n   * @param loginRequest - The Medplum login request.\n   * @param pkceEnabled - Whether `PKCE` should be enabled for this external auth request. Defaults to `true`.\n   * @returns The external identity provider redirect URI.\n   * @category Authentication\n   */\n  getExternalAuthRedirectUri(\n    authorizeUrl: string,\n    clientId: string,\n    redirectUri: string,\n    loginRequest: BaseLoginRequest,\n    pkceEnabled = true\n  ): string {\n    const url = new URL(authorizeUrl);\n    url.searchParams.set('response_type', 'code');\n    url.searchParams.set('client_id', clientId);\n    url.searchParams.set('redirect_uri', redirectUri);\n    url.searchParams.set('scope', 'openid profile email');\n    url.searchParams.set('state', JSON.stringify(loginRequest));\n\n    if (pkceEnabled) {\n      const { codeChallenge, codeChallengeMethod } = loginRequest;\n      if (!codeChallengeMethod) {\n        throw new Error('`LoginRequest` for external auth must include a `codeChallengeMethod`.');\n      }\n      if (!codeChallenge) {\n        throw new Error('`LoginRequest` for external auth must include a `codeChallenge`.');\n      }\n      url.searchParams.set('code_challenge_method', codeChallengeMethod);\n      url.searchParams.set('code_challenge', codeChallenge);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Builds a FHIR URL from a collection of URL path components.\n   * For example, `buildUrl('/Patient', '123')` returns `fhir/R4/Patient/123`.\n   * @category HTTP\n   * @param path - The path component of the URL.\n   * @returns The well-formed FHIR URL.\n   */\n  fhirUrl(...path: string[]): URL {\n    return new URL(path.join('/'), this.fhirBaseUrl);\n  }\n\n  /**\n   * Builds a FHIR search URL from a search query or structured query object.\n   * @category HTTP\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - The FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @returns The well-formed FHIR URL.\n   */\n  fhirSearchUrl(resourceType: ResourceType, query: QueryTypes): URL {\n    const url = this.fhirUrl(resourceType);\n    if (query) {\n      url.search = new URLSearchParams(query).toString();\n    }\n    return url;\n  }\n\n  /**\n   * Sends a FHIR search request.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const bundle = await client.search('Patient', 'name=Alice');\n   * console.log(bundle);\n   * ```\n   *\n   * @example\n   * The return value is a FHIR bundle:\n   *\n   * ```json\n   * {\n   *    \"resourceType\": \"Bundle\",\n   *    \"type\": \"searchset\",\n   *    \"entry\": [\n   *       {\n   *          \"resource\": {\n   *             \"resourceType\": \"Patient\",\n   *             \"name\": [\n   *                {\n   *                   \"given\": [\n   *                      \"George\"\n   *                   ],\n   *                   \"family\": \"Washington\"\n   *                }\n   *             ],\n   *          }\n   *       }\n   *    ]\n   * }\n   * ```\n   *\n   * @example\n   * To query the count of a search, use the summary feature like so:\n   *\n   * ```typescript\n   * const patients = medplum.search('Patient', '_summary=count');\n   * ```\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the search result bundle.\n   */\n  search<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: RequestInit\n  ): ReadablePromise<Bundle<ExtractResource<K>>> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    const cacheKey = url.toString() + '-search';\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(\n      (async () => {\n        const bundle = await this.get<Bundle<ExtractResource<K>>>(url, options);\n        if (bundle.entry) {\n          for (const entry of bundle.entry) {\n            this.cacheResource(entry.resource);\n          }\n        }\n        return bundle;\n      })()\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Sends a FHIR search request for a single resource.\n   *\n   * This is a convenience method for `search()` that returns the first resource rather than a `Bundle`.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const patient = await client.searchOne('Patient', 'identifier=123');\n   * console.log(patient);\n   * ```\n   *\n   * The return value is the resource, if available; otherwise, undefined.\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the first search result.\n   */\n  searchOne<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: RequestInit\n  ): ReadablePromise<ExtractResource<K> | undefined> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    url.searchParams.set('_count', '1');\n    url.searchParams.sort();\n    const cacheKey = url.toString() + '-searchOne';\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(\n      this.search<K>(resourceType, url.searchParams, options).then((b) => b.entry?.[0]?.resource)\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Sends a FHIR search request for an array of resources.\n   *\n   * This is a convenience method for `search()` that returns the resources as an array rather than a `Bundle`.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const patients = await client.searchResources('Patient', 'name=Alice');\n   * console.log(patients);\n   * ```\n   *\n   * The return value is an array of resources.\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the array of search results.\n   */\n  searchResources<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: RequestInit\n  ): ReadablePromise<ResourceArray<ExtractResource<K>>> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    const cacheKey = url.toString() + '-searchResources';\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(this.search<K>(resourceType, query, options).then(bundleToResourceArray));\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Creates an\n   * [async generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n   * over a series of FHIR search requests for paginated search results. Each iteration of the generator yields\n   * the array of resources on each page.\n   *\n   * @example\n   *\n   * ```typescript\n   * for await (const page of medplum.searchResourcePages('Patient', { _count: 10 })) {\n   *  for (const patient of page) {\n   *    console.log(`Processing Patient resource with ID: ${patient.id}`);\n   *  }\n   * }\n   * ```\n   *\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @yields An async generator, where each result is an array of resources for each page.\n   */\n  async *searchResourcePages<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: RequestInit\n  ): AsyncGenerator<ResourceArray<ExtractResource<K>>> {\n    let url: URL | undefined = this.fhirSearchUrl(resourceType, query);\n\n    while (url) {\n      const searchParams: URLSearchParams = new URL(url).searchParams;\n      const bundle = await this.search(resourceType, searchParams, options);\n      const nextLink: BundleLink | undefined = bundle.link?.find((link) => link.relation === 'next');\n      if (!bundle.entry?.length && !nextLink) {\n        break;\n      }\n\n      yield bundleToResourceArray(bundle);\n      url = nextLink?.url ? new URL(nextLink.url) : undefined;\n    }\n  }\n\n  /**\n   * Searches a ValueSet resource using the \"expand\" operation.\n   * See: https://www.hl7.org/fhir/operation-valueset-expand.html\n   * @category Search\n   * @param system - The ValueSet system url.\n   * @param filter - The search string.\n   * @param options - Optional fetch options.\n   * @returns Promise to expanded ValueSet.\n   */\n  searchValueSet(system: string, filter: string, options?: RequestInit): ReadablePromise<ValueSet> {\n    const url = this.fhirUrl('ValueSet', '$expand');\n    url.searchParams.set('url', system);\n    url.searchParams.set('filter', filter);\n    return this.get(url.toString(), options);\n  }\n\n  /**\n   * Returns a cached resource if it is available.\n   * @category Caching\n   * @param resourceType - The FHIR resource type.\n   * @param id - The FHIR resource ID.\n   * @returns The resource if it is available in the cache; undefined otherwise.\n   */\n  getCached<K extends ResourceType>(resourceType: K, id: string): ExtractResource<K> | undefined {\n    const cached = this.requestCache?.get(this.fhirUrl(resourceType, id).toString())?.value;\n    return cached?.isOk() ? (cached.read() as ExtractResource<K>) : undefined;\n  }\n\n  /**\n   * Returns a cached resource if it is available.\n   * @category Caching\n   * @param reference - The FHIR reference.\n   * @returns The resource if it is available in the cache; undefined otherwise.\n   */\n  getCachedReference<T extends Resource>(reference: Reference<T>): T | undefined {\n    const refString = reference.reference as string;\n    if (!refString) {\n      return undefined;\n    }\n    if (refString === 'system') {\n      return system as T;\n    }\n    const [resourceType, id] = refString.split('/');\n    if (!resourceType || !id) {\n      return undefined;\n    }\n    return this.getCached(resourceType as ResourceType, id) as T | undefined;\n  }\n\n  /**\n   * Reads a resource by resource type and ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const patient = await medplum.readResource('Patient', '123');\n   * console.log(patient);\n   * ```\n   *\n   * See the FHIR \"read\" operation for full details: https://www.hl7.org/fhir/http.html#read\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns The resource if available; undefined otherwise.\n   */\n  readResource<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    options?: RequestInit\n  ): ReadablePromise<ExtractResource<K>> {\n    return this.get<ExtractResource<K>>(this.fhirUrl(resourceType, id), options);\n  }\n\n  /**\n   * Reads a resource by `Reference`.\n   *\n   * This is a convenience method for `readResource()` that accepts a `Reference` object.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const serviceRequest = await medplum.readResource('ServiceRequest', '123');\n   * const patient = await medplum.readReference(serviceRequest.subject);\n   * console.log(patient);\n   * ```\n   *\n   * See the FHIR \"read\" operation for full details: https://www.hl7.org/fhir/http.html#read\n   * @category Read\n   * @param reference - The FHIR reference object.\n   * @param options - Optional fetch options.\n   * @returns The resource if available; undefined otherwise.\n   */\n  readReference<T extends Resource>(reference: Reference<T>, options?: RequestInit): ReadablePromise<T> {\n    const refString = reference.reference;\n    if (!refString) {\n      return new ReadablePromise(Promise.reject(new Error('Missing reference')));\n    }\n    if (refString === 'system') {\n      return new ReadablePromise(Promise.resolve(system as unknown as T));\n    }\n    const [resourceType, id] = refString.split('/');\n    if (!resourceType || !id) {\n      return new ReadablePromise(Promise.reject(new Error('Invalid reference')));\n    }\n    return this.readResource(resourceType as ResourceType, id, options) as ReadablePromise<T>;\n  }\n\n  /**\n   * Requests the schema for a resource type.\n   * If the schema is already cached, the promise is resolved immediately.\n   * @category Schema\n   * @param resourceType - The FHIR resource type.\n   * @returns Promise to a schema with the requested resource type.\n   */\n  requestSchema(resourceType: string): Promise<void> {\n    if (isDataTypeLoaded(resourceType)) {\n      return Promise.resolve();\n    }\n\n    const cacheKey = resourceType + '-requestSchema';\n    const cached = this.getCacheEntry(cacheKey, undefined);\n    if (cached) {\n      return cached.value;\n    }\n\n    const promise = new ReadablePromise<void>(\n      (async () => {\n        const query = `{\n      StructureDefinitionList(name: \"${resourceType}\") {\n        resourceType,\n        name,\n        kind,\n        description,\n        snapshot {\n          element {\n            id,\n            path,\n            definition,\n            min,\n            max,\n            base {\n              path,\n              min,\n              max\n            },\n            contentReference,\n            type {\n              code,\n              targetProfile\n            },\n            binding {\n              strength,\n              valueSet\n            }\n          }\n        }\n      }\n      SearchParameterList(base: \"${resourceType}\", _count: 100) {\n        base,\n        code,\n        type,\n        expression,\n        target\n      }\n    }`.replace(/\\s+/g, ' ');\n\n        const response = (await this.graphql(query)) as SchemaGraphQLResponse;\n\n        indexStructureDefinitionBundle(response.data.StructureDefinitionList);\n\n        for (const searchParameter of response.data.SearchParameterList) {\n          indexSearchParameter(searchParameter);\n        }\n      })()\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Reads resource history by resource type and ID.\n   *\n   * The return value is a bundle of all versions of the resource.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const history = await medplum.readHistory('Patient', '123');\n   * console.log(history);\n   * ```\n   *\n   * See the FHIR \"history\" operation for full details: https://www.hl7.org/fhir/http.html#history\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns Promise to the resource history.\n   */\n  readHistory<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    options?: RequestInit\n  ): ReadablePromise<Bundle<ExtractResource<K>>> {\n    return this.get(this.fhirUrl(resourceType, id, '_history'), options);\n  }\n\n  /**\n   * Reads a specific version of a resource by resource type, ID, and version ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const version = await medplum.readVersion('Patient', '123', '456');\n   * console.log(version);\n   * ```\n   *\n   * See the FHIR \"vread\" operation for full details: https://www.hl7.org/fhir/http.html#vread\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param vid - The version ID.\n   * @param options - Optional fetch options.\n   * @returns The resource if available; undefined otherwise.\n   */\n  readVersion<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    vid: string,\n    options?: RequestInit\n  ): ReadablePromise<ExtractResource<K>> {\n    return this.get(this.fhirUrl(resourceType, id, '_history', vid), options);\n  }\n\n  /**\n   * Executes the Patient \"everything\" operation for a patient.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const bundle = await medplum.readPatientEverything('123');\n   * console.log(bundle);\n   * ```\n   *\n   * See the FHIR \"patient-everything\" operation for full details: https://hl7.org/fhir/operation-patient-everything.html\n   * @category Read\n   * @param id - The Patient Id\n   * @param options - Optional fetch options.\n   * @returns A Bundle of all Resources related to the Patient\n   */\n  readPatientEverything(id: string, options?: RequestInit): ReadablePromise<Bundle> {\n    return this.get(this.fhirUrl('Patient', id, '$everything'), options);\n  }\n\n  /**\n   * Creates a new FHIR resource.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createResource({\n   *   resourceType: 'Patient',\n   *   name: [{\n   *    family: 'Smith',\n   *    given: ['John']\n   *   }]\n   * });\n   * console.log(result.id);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   * @category Create\n   * @param resource - The FHIR resource to create.\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  createResource<T extends Resource>(resource: T, options?: RequestInit): Promise<T> {\n    if (!resource.resourceType) {\n      throw new Error('Missing resourceType');\n    }\n    this.invalidateSearches(resource.resourceType);\n    return this.post(this.fhirUrl(resource.resourceType), resource, undefined, options);\n  }\n\n  /**\n   * Conditionally create a new FHIR resource only if some equivalent resource does not already exist on the server.\n   *\n   * The return value is the existing resource or the newly created resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createResourceIfNoneExist(\n   *   {\n   *     resourceType: 'Patient',\n   *     identifier: [{\n   *      system: 'http://example.com/mrn',\n   *      value: '123'\n   *     }]\n   *     name: [{\n   *      family: 'Smith',\n   *      given: ['John']\n   *     }]\n   *   },\n   *   'identifier=123'\n   * );\n   * console.log(result.id);\n   * ```\n   *\n   * This method is syntactic sugar for:\n   *\n   * ```typescript\n   * return searchOne(resourceType, query) ?? createResource(resource);\n   * ```\n   *\n   * The query parameter only contains the search parameters (what would be in the URL following the \"?\").\n   *\n   * See the FHIR \"conditional create\" operation for full details: https://www.hl7.org/fhir/http.html#ccreate\n   * @category Create\n   * @param resource - The FHIR resource to create.\n   * @param query - The search query for an equivalent resource (should not include resource type or \"?\").\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  async createResourceIfNoneExist<T extends Resource>(resource: T, query: string, options?: RequestInit): Promise<T> {\n    return ((await this.searchOne(resource.resourceType, query, options)) ??\n      this.createResource(resource, options)) as Promise<T>;\n  }\n\n  /**\n   * Creates a FHIR `Attachment` with the provided data content.\n   *\n   * This is a convenience method for creating a `Binary` resource and then creating an `Attachment` element.\n   *\n   * The `data` parameter can be a string or a `File` object.\n   *\n   * A `File` object often comes from a `<input type=\"file\">` element.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createAttachment(myFile, 'test.jpg', 'image/jpeg');\n   * console.log(result);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   * @category Create\n   * @param data - The binary data to upload.\n   * @param filename - Optional filename for the binary.\n   * @param contentType - Content type for the binary.\n   * @param onProgress - Optional callback for progress events.\n   * @returns The result of the create operation.\n   */\n  async createAttachment(\n    data: BinarySource,\n    filename: string | undefined,\n    contentType: string,\n    onProgress?: (e: ProgressEvent) => void\n  ): Promise<Attachment> {\n    const binary = await this.createBinary(data, filename, contentType, onProgress);\n    return {\n      contentType,\n      url: binary.url,\n      title: filename,\n    };\n  }\n\n  /**\n   * Creates a FHIR `Binary` resource with the provided data content.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * The `data` parameter can be a string or a `File` object.\n   *\n   * A `File` object often comes from a `<input type=\"file\">` element.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createBinary(myFile, 'test.jpg', 'image/jpeg');\n   * console.log(result.id);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   * @category Create\n   * @param data - The binary data to upload.\n   * @param filename - Optional filename for the binary.\n   * @param contentType - Content type for the binary.\n   * @param onProgress - Optional callback for progress events.\n   * @returns The result of the create operation.\n   */\n  createBinary(\n    data: BinarySource,\n    filename: string | undefined,\n    contentType: string,\n    onProgress?: (e: ProgressEvent) => void\n  ): Promise<Binary> {\n    const url = this.fhirUrl('Binary');\n    if (filename) {\n      url.searchParams.set('_filename', filename);\n    }\n\n    if (onProgress) {\n      return this.uploadwithProgress(url, data, contentType, onProgress);\n    } else {\n      return this.post(url, data, contentType);\n    }\n  }\n\n  uploadwithProgress(\n    url: URL,\n    data: BinarySource,\n    contentType: string,\n    onProgress: (e: ProgressEvent) => void\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onabort = () => reject(new Error('Request aborted'));\n      xhr.onerror = () => reject(new Error('Request error'));\n\n      if (onProgress) {\n        xhr.upload.onprogress = (e) => onProgress(e);\n        xhr.upload.onload = (e) => onProgress(e);\n      }\n\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject(new OperationOutcomeError(normalizeOperationOutcome(xhr.response || xhr.statusText)));\n        }\n      };\n\n      xhr.open('POST', url);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader('Authorization', 'Bearer ' + this.accessToken);\n      xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, max-age=0');\n      xhr.setRequestHeader('Content-Type', contentType);\n      xhr.setRequestHeader('X-Medplum', 'extended');\n      xhr.send(data);\n    });\n  }\n\n  /**\n   * Creates a PDF as a FHIR `Binary` resource based on pdfmake document definition.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * The `docDefinition` parameter is a pdfmake document definition.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createPdf({\n   *   content: ['Hello world']\n   * });\n   * console.log(result.id);\n   * ```\n   *\n   * See the pdfmake document definition for full details: https://pdfmake.github.io/docs/0.1/document-definition-object/\n   * @category Media\n   * @param docDefinition - The PDF document definition.\n   * @param filename - Optional filename for the PDF binary resource.\n   * @param tableLayouts - Optional pdfmake custom table layout.\n   * @param fonts - Optional pdfmake custom font dictionary.\n   * @returns The result of the create operation.\n   */\n  async createPdf(\n    docDefinition: TDocumentDefinitions,\n    filename?: string,\n    tableLayouts?: Record<string, CustomTableLayout>,\n    fonts?: TFontDictionary\n  ): Promise<Binary> {\n    if (!this.createPdfImpl) {\n      throw new Error('PDF creation not enabled');\n    }\n    const blob = await this.createPdfImpl(docDefinition, tableLayouts, fonts);\n    return this.createBinary(blob, filename, 'application/pdf');\n  }\n\n  /**\n   * Creates a FHIR `Communication` resource with the provided data content.\n   *\n   * This is a convenience method to handle commmon cases where a `Communication` resource is created with a `payload`.\n   * @category Create\n   * @param resource - The FHIR resource to comment on.\n   * @param text - The text of the comment.\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  createComment(resource: Resource, text: string, options?: RequestInit): Promise<Communication> {\n    const profile = this.getProfile();\n    let encounter: Reference<Encounter> | undefined = undefined;\n    let subject: Reference<Patient> | undefined = undefined;\n\n    if (resource.resourceType === 'Encounter') {\n      encounter = createReference(resource);\n      subject = resource.subject as Reference<Patient> | undefined;\n    }\n\n    if (resource.resourceType === 'ServiceRequest') {\n      encounter = resource.encounter;\n      subject = resource.subject as Reference<Patient> | undefined;\n    }\n\n    if (resource.resourceType === 'Patient') {\n      subject = createReference(resource);\n    }\n\n    return this.createResource<Communication>(\n      {\n        resourceType: 'Communication',\n        basedOn: [createReference(resource)],\n        encounter,\n        subject,\n        sender: profile ? createReference(profile) : undefined,\n        sent: new Date().toISOString(),\n        payload: [{ contentString: text }],\n      },\n      options\n    );\n  }\n\n  /**\n   * Updates a FHIR resource.\n   *\n   * The return value is the updated resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.updateResource({\n   *   resourceType: 'Patient',\n   *   id: '123',\n   *   name: [{\n   *    family: 'Smith',\n   *    given: ['John']\n   *   }]\n   * });\n   * console.log(result.meta.versionId);\n   * ```\n   *\n   * See the FHIR \"update\" operation for full details: https://www.hl7.org/fhir/http.html#update\n   * @category Write\n   * @param resource - The FHIR resource to update.\n   * @param options - Optional fetch options.\n   * @returns The result of the update operation.\n   */\n  async updateResource<T extends Resource>(resource: T, options?: RequestInit): Promise<T> {\n    if (!resource.resourceType) {\n      throw new Error('Missing resourceType');\n    }\n    if (!resource.id) {\n      throw new Error('Missing id');\n    }\n    this.invalidateSearches(resource.resourceType);\n    let result = await this.put(this.fhirUrl(resource.resourceType, resource.id), resource, undefined, options);\n    if (!result) {\n      // On 304 not modified, result will be undefined\n      // Return the user input instead\n      // return result ?? resource;\n      result = resource;\n    }\n    this.cacheResource(result);\n    return result;\n  }\n\n  /**\n   * Updates a FHIR resource using JSONPatch operations.\n   *\n   * The return value is the updated resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.patchResource('Patient', '123', [\n   *   {op: 'replace', path: '/name/0/family', value: 'Smith'},\n   * ]);\n   * console.log(result.meta.versionId);\n   * ```\n   *\n   * See the FHIR \"update\" operation for full details: https://www.hl7.org/fhir/http.html#patch\n   *\n   * See the JSONPatch specification for full details: https://tools.ietf.org/html/rfc6902\n   * @category Write\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param operations - The JSONPatch operations.\n   * @param options - Optional fetch options.\n   * @returns The result of the patch operations.\n   */\n  patchResource<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    operations: PatchOperation[],\n    options?: RequestInit\n  ): Promise<ExtractResource<K>> {\n    this.invalidateSearches(resourceType);\n    return this.patch(this.fhirUrl(resourceType, id), operations, options);\n  }\n\n  /**\n   * Deletes a FHIR resource by resource type and ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * await medplum.deleteResource('Patient', '123');\n   * ```\n   *\n   * See the FHIR \"delete\" operation for full details: https://www.hl7.org/fhir/http.html#delete\n   * @category Delete\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns The result of the delete operation.\n   */\n  deleteResource(resourceType: ResourceType, id: string, options?: RequestInit): Promise<any> {\n    this.deleteCacheEntry(this.fhirUrl(resourceType, id).toString());\n    this.invalidateSearches(resourceType);\n    return this.delete(this.fhirUrl(resourceType, id), options);\n  }\n\n  /**\n   * Executes the validate operation with the provided resource.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.validateResource({\n   *   resourceType: 'Patient',\n   *   name: [{ given: ['Alice'], family: 'Smith' }],\n   * });\n   * ```\n   *\n   * See the FHIR \"$validate\" operation for full details: https://www.hl7.org/fhir/resource-operation-validate.html\n   * @param resource - The FHIR resource.\n   * @param options - Optional fetch options.\n   * @returns The validate operation outcome.\n   */\n  validateResource<T extends Resource>(resource: T, options?: RequestInit): Promise<OperationOutcome> {\n    return this.post(this.fhirUrl(resource.resourceType, '$validate'), resource, undefined, options);\n  }\n\n  /**\n   * Executes a bot by ID or Identifier.\n   * @param idOrIdentifier - The Bot ID or Identifier.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns The Bot return value.\n   */\n  executeBot(\n    idOrIdentifier: string | Identifier,\n    body: any,\n    contentType?: string,\n    options?: RequestInit\n  ): Promise<any> {\n    let url;\n    if (typeof idOrIdentifier === 'string') {\n      const id = idOrIdentifier;\n      url = this.fhirUrl('Bot', id, '$execute');\n    } else {\n      const identifier = idOrIdentifier;\n      url = this.fhirUrl('Bot', '$execute') + `?identifier=${identifier.system}|${identifier.value}`;\n    }\n    return this.post(url, body, contentType, options);\n  }\n\n  /**\n   * Executes a batch or transaction of FHIR operations.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * await medplum.executeBatch({\n   *   \"resourceType\": \"Bundle\",\n   *   \"type\": \"transaction\",\n   *   \"entry\": [\n   *     {\n   *       \"fullUrl\": \"urn:uuid:61ebe359-bfdc-4613-8bf2-c5e300945f0a\",\n   *       \"resource\": {\n   *         \"resourceType\": \"Patient\",\n   *         \"name\": [{ \"use\": \"official\", \"given\": [\"Alice\"], \"family\": \"Smith\" }],\n   *         \"gender\": \"female\",\n   *         \"birthDate\": \"1974-12-25\"\n   *       },\n   *       \"request\": {\n   *         \"method\": \"POST\",\n   *         \"url\": \"Patient\"\n   *       }\n   *     },\n   *     {\n   *       \"fullUrl\": \"urn:uuid:88f151c0-a954-468a-88bd-5ae15c08e059\",\n   *       \"resource\": {\n   *         \"resourceType\": \"Patient\",\n   *         \"identifier\": [{ \"system\": \"http:/example.org/fhir/ids\", \"value\": \"234234\" }],\n   *         \"name\": [{ \"use\": \"official\", \"given\": [\"Bob\"], \"family\": \"Jones\" }],\n   *         \"gender\": \"male\",\n   *         \"birthDate\": \"1974-12-25\"\n   *       },\n   *       \"request\": {\n   *         \"method\": \"POST\",\n   *         \"url\": \"Patient\",\n   *         \"ifNoneExist\": \"identifier=http:/example.org/fhir/ids|234234\"\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * See The FHIR \"batch/transaction\" section for full details: https://hl7.org/fhir/http.html#transaction\n   * @category Batch\n   * @param bundle - The FHIR batch/transaction bundle.\n   * @param options - Optional fetch options.\n   * @returns The FHIR batch/transaction response bundle.\n   */\n  executeBatch(bundle: Bundle, options?: RequestInit): Promise<Bundle> {\n    return this.post(this.fhirBaseUrl.slice(0, -1), bundle, undefined, options);\n  }\n\n  /**\n   * Sends an email using the Medplum Email API.\n   *\n   * Builds the email using nodemailer MailComposer.\n   *\n   * Examples:\n   *\n   * @example\n   * Send a simple text email:\n   *\n   * ```typescript\n   * await medplum.sendEmail({\n   *   to: 'alice@example.com',\n   *   cc: 'bob@example.com',\n   *   subject: 'Hello',\n   *   text: 'Hello Alice',\n   * });\n   * ```\n   *\n   * @example\n   * Send an email with a `Binary` attachment:\n   *\n   * ```typescript\n   * await medplum.sendEmail({\n   *   to: 'alice@example.com',\n   *   subject: 'Email with attachment',\n   *   text: 'See the attached report',\n   *   attachments: [{\n   *     filename: 'report.pdf',\n   *     path: \"Binary/\" + binary.id\n   *   }]\n   * });\n   * ```\n   *\n   * See options here: https://nodemailer.com/extras/mailcomposer/\n   * @category Media\n   * @param email - The MailComposer options.\n   * @param options - Optional fetch options.\n   * @returns Promise to the operation outcome.\n   */\n  sendEmail(email: MailOptions, options?: RequestInit): Promise<OperationOutcome> {\n    return this.post('email/v1/send', email, ContentType.JSON, options);\n  }\n\n  /**\n   * Executes a GraphQL query.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.graphql(`{\n   *   Patient(id: \"123\") {\n   *     resourceType\n   *     id\n   *     name {\n   *       given\n   *       family\n   *     }\n   *   }\n   * }`);\n   * ```\n   *\n   * @example\n   * Advanced queries such as named operations and variable substitution are supported:\n   *\n   * ```typescript\n   * const result = await medplum.graphql(\n   *   `query GetPatientById($patientId: ID!) {\n   *     Patient(id: $patientId) {\n   *       resourceType\n   *       id\n   *       name {\n   *         given\n   *         family\n   *       }\n   *     }\n   *   }`,\n   *   'GetPatientById',\n   *   { patientId: '123' }\n   * );\n   * ```\n   *\n   * See the GraphQL documentation for more details: https://graphql.org/learn/\n   *\n   * See the FHIR GraphQL documentation for FHIR specific details: https://www.hl7.org/fhir/graphql.html\n   * @category Read\n   * @param query - The GraphQL query.\n   * @param operationName - Optional GraphQL operation name.\n   * @param variables - Optional GraphQL variables.\n   * @param options - Optional fetch options.\n   * @returns The GraphQL result.\n   */\n  graphql(query: string, operationName?: string | null, variables?: any, options?: RequestInit): Promise<any> {\n    return this.post(this.fhirUrl('$graphql'), { query, operationName, variables }, ContentType.JSON, options);\n  }\n\n  /**\n   * Executes the $graph operation on this resource to fetch a Bundle of resources linked to the target resource\n   * according to a graph definition\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param graphName - `name` parameter of the GraphDefinition\n   * @param options - Optional fetch options.\n   * @returns A Bundle\n   */\n  readResourceGraph<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    graphName: string,\n    options?: RequestInit\n  ): ReadablePromise<Bundle> {\n    return this.get<Bundle>(`${this.fhirUrl(resourceType, id)}/$graph?graph=${graphName}`, options);\n  }\n\n  /**\n   * Pushes a message to an agent.\n   *\n   * @param agent - The agent to push to.\n   * @param destination - The destination device.\n   * @param body - The message body.\n   * @param contentType - Optional message content type.\n   * @param options - Optional fetch options.\n   * @returns Promise to the operation outcome.\n   */\n  pushToAgent(\n    agent: Agent | Reference<Agent>,\n    destination: Device | Reference<Device>,\n    body: any,\n    contentType?: string,\n    options?: RequestInit\n  ): Promise<OperationOutcome> {\n    return this.post(\n      this.fhirUrl('Agent', resolveId(agent) as string, '$push'),\n      {\n        destination: getReferenceString(destination),\n        body,\n        contentType,\n      },\n      ContentType.FHIR_JSON,\n      options\n    );\n  }\n\n  /**\n   * @category Authentication\n   * @returns The Login State\n   */\n  getActiveLogin(): LoginState | undefined {\n    return this.storage.getObject('activeLogin');\n  }\n\n  /**\n   * Sets the active login.\n   * @param login - The new active login state.\n   * @category Authentication\n   */\n  async setActiveLogin(login: LoginState): Promise<void> {\n    if (!this.sessionDetails?.profile || getReferenceString(this.sessionDetails.profile) !== login.profile?.reference) {\n      this.clearActiveLogin();\n    }\n    this.setAccessToken(login.accessToken, login.refreshToken);\n    this.storage.setObject('activeLogin', login);\n    this.addLogin(login);\n    this.refreshPromise = undefined;\n    await this.refreshProfile();\n  }\n\n  /**\n   * Returns the current access token.\n   * @returns The current access token.\n   * @category Authentication\n   */\n  getAccessToken(): string | undefined {\n    return this.accessToken;\n  }\n\n  /**\n   * Sets the current access token.\n   * @param accessToken - The new access token.\n   * @param refreshToken - Optional refresh token.\n   * @category Authentication\n   */\n  setAccessToken(accessToken: string, refreshToken?: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    this.sessionDetails = undefined;\n    this.medplumServer = isMedplumAccessToken(accessToken);\n  }\n\n  /**\n   * Returns the list of available logins.\n   * @returns The list of available logins.\n   * @category Authentication\n   */\n  getLogins(): LoginState[] {\n    return this.storage.getObject<LoginState[]>('logins') ?? [];\n  }\n\n  private addLogin(newLogin: LoginState): void {\n    const logins = this.getLogins().filter((login) => login.profile?.reference !== newLogin.profile?.reference);\n    logins.push(newLogin);\n    this.storage.setObject('logins', logins);\n  }\n\n  private async refreshProfile(): Promise<ProfileResource | undefined> {\n    if (!this.medplumServer) {\n      return Promise.resolve(undefined);\n    }\n    this.profilePromise = new Promise((resolve, reject) => {\n      this.get('auth/me')\n        .then((result: SessionDetails) => {\n          this.profilePromise = undefined;\n          const profileChanged = this.sessionDetails?.profile?.id !== result.profile.id;\n          this.sessionDetails = result;\n          if (profileChanged) {\n            this.dispatchEvent({ type: 'change' });\n          }\n          resolve(result.profile);\n        })\n        .catch(reject);\n    });\n\n    return this.profilePromise;\n  }\n\n  /**\n   * Returns true if the client is waiting for authentication.\n   * @returns True if the client is waiting for authentication.\n   * @category Authentication\n   */\n  isLoading(): boolean {\n    return !!this.profilePromise;\n  }\n\n  /**\n   * Returns true if the current user is authenticated as a super admin.\n   * @returns True if the current user is authenticated as a super admin.\n   * @category Authentication\n   */\n  isSuperAdmin(): boolean {\n    return !!this.sessionDetails?.project.superAdmin;\n  }\n\n  /**\n   * Returns true if the current user is authenticated as a project admin.\n   * @returns True if the current user is authenticated as a project admin.\n   * @category Authentication\n   */\n  isProjectAdmin(): boolean {\n    return !!this.sessionDetails?.membership.admin;\n  }\n\n  /**\n   * Returns the current project if available.\n   * @returns The current project if available.\n   * @category User Profile\n   */\n  getProject(): Project | undefined {\n    return this.sessionDetails?.project;\n  }\n\n  /**\n   * Returns the current project membership if available.\n   * @returns The current project membership if available.\n   * @category User Profile\n   */\n  getProjectMembership(): ProjectMembership | undefined {\n    return this.sessionDetails?.membership;\n  }\n\n  /**\n   * Returns the current user profile resource if available.\n   * This method does not wait for loading promises.\n   * @returns The current user profile resource if available.\n   * @category User Profile\n   */\n  getProfile(): ProfileResource | undefined {\n    return this.sessionDetails?.profile;\n  }\n\n  /**\n   * Returns the current user profile resource, retrieving form the server if necessary.\n   * This method waits for loading promises.\n   * @returns The current user profile resource.\n   * @category User Profile\n   */\n  async getProfileAsync(): Promise<ProfileResource | undefined> {\n    if (this.profilePromise) {\n      return this.profilePromise;\n    } else if (this.sessionDetails) {\n      return this.sessionDetails.profile;\n    }\n    return this.refreshProfile();\n  }\n\n  /**\n   * Returns the current user configuration if available.\n   * @returns The current user configuration if available.\n   * @category User Profile\n   */\n  getUserConfiguration(): UserConfiguration | undefined {\n    return this.sessionDetails?.config;\n  }\n\n  /**\n   * Returns the current user access policy if available.\n   * @returns The current user access policy if available.\n   * @category User Profile\n   */\n  getAccessPolicy(): AccessPolicy | undefined {\n    return this.sessionDetails?.accessPolicy;\n  }\n\n  /**\n   * Downloads the URL as a blob. Can accept binary URLs in the form of `Binary/{id}` as well.\n   * @category Read\n   * @param url - The URL to request. Can be a standard URL or one in the form of `Binary/{id}`.\n   * @param options - Optional fetch request init options.\n   * @returns Promise to the response body as a blob.\n   */\n  async download(url: URL | string, options: RequestInit = {}): Promise<Blob> {\n    if (this.refreshPromise) {\n      await this.refreshPromise;\n    }\n    const urlString = url.toString();\n    if (urlString.startsWith(BINARY_URL_PREFIX)) {\n      url = this.fhirUrl(urlString);\n    }\n    this.addFetchOptionsDefaults(options);\n    const response = await this.fetchWithRetry(url.toString(), options);\n    return response.blob();\n  }\n\n  /**\n   * Upload media to the server and create a Media instance for the uploaded content.\n   * @param contents - The contents of the media file, as a string, Uint8Array, File, or Blob.\n   * @param contentType - The media type of the content.\n   * @param filename - The name of the file to be uploaded, or undefined if not applicable.\n   * @param additionalFields - Additional fields for Media.\n   * @param options - Optional fetch options.\n   * @returns Promise that resolves to the created Media\n   */\n  async uploadMedia(\n    contents: string | Uint8Array | File | Blob,\n    contentType: string,\n    filename: string | undefined,\n    additionalFields?: Partial<Media>,\n    options?: RequestInit\n  ): Promise<Media> {\n    const binary = await this.createBinary(contents, filename, contentType);\n    return this.createResource(\n      {\n        resourceType: 'Media',\n        status: 'completed',\n        content: {\n          contentType: contentType,\n          url: BINARY_URL_PREFIX + binary.id,\n          title: filename,\n        },\n        ...additionalFields,\n      },\n      options\n    );\n  }\n\n  /**\n   * Performs Bulk Data Export operation request flow. See The FHIR \"Bulk Data Export\" for full details: https://build.fhir.org/ig/HL7/bulk-data/export.html#bulk-data-export\n   * @param exportLevel - Optional export level. Defaults to system level export. 'Group/:id' - Group of Patients, 'Patient' - All Patients.\n   * @param resourceTypes - A string of comma-delimited FHIR resource types.\n   * @param since - Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\n   * @param options - Optional fetch options.\n   * @returns Bulk Data Response containing links to Bulk Data files. See \"Response - Complete Status\" for full details: https://build.fhir.org/ig/HL7/bulk-data/export.html#response---complete-status\n   */\n  async bulkExport(\n    //eslint-disable-next-line default-param-last\n    exportLevel = '',\n    resourceTypes?: string,\n    since?: string,\n    options?: RequestInit\n  ): Promise<Partial<BulkDataExport>> {\n    const fhirPath = exportLevel ? `${exportLevel}/` : exportLevel;\n    const url = this.fhirUrl(`${fhirPath}$export`);\n\n    if (resourceTypes) {\n      url.searchParams.set('_type', resourceTypes);\n    }\n    if (since) {\n      url.searchParams.set('_since', since);\n    }\n\n    return this.startAsyncRequest<Partial<BulkDataExport>>(url.toString(), options);\n  }\n\n  /**\n   * Starts an async request following the FHIR \"Asynchronous Request Pattern\".\n   * See: https://hl7.org/fhir/r4/async.html\n   * @param url - The URL to request.\n   * @param options - Optional fetch options.\n   * @returns The response body.\n   */\n  async startAsyncRequest<T>(url: string, options: RequestInit = {}): Promise<T> {\n    this.addFetchOptionsDefaults(options);\n\n    const headers = options.headers as Record<string, string>;\n    headers['Prefer'] = 'respond-async';\n\n    const response = await this.fetchWithRetry(url, options);\n\n    if (response.status === 202) {\n      const contentLocation = await tryGetContentLocation(response);\n      if (contentLocation) {\n        return this.pollStatus(contentLocation);\n      }\n    }\n\n    return this.parseResponse(response, 'POST', url);\n  }\n\n  //\n  // Private helpers\n  //\n\n  /**\n   * Returns the cache entry if available and not expired.\n   * @param key - The cache key to retrieve.\n   * @param options - Optional fetch options for cache settings.\n   * @returns The cached entry if found.\n   */\n  private getCacheEntry(key: string, options: RequestInit | undefined): RequestCacheEntry | undefined {\n    if (!this.requestCache || options?.cache === 'no-cache' || options?.cache === 'reload') {\n      return undefined;\n    }\n    const entry = this.requestCache.get(key);\n    if (!entry || entry.requestTime + this.cacheTime < Date.now()) {\n      return undefined;\n    }\n    return entry;\n  }\n\n  /**\n   * Adds a readable promise to the cache.\n   * @param key - The cache key to store.\n   * @param value - The readable promise to store.\n   */\n  private setCacheEntry(key: string, value: ReadablePromise<any>): void {\n    if (this.requestCache) {\n      this.requestCache.set(key, { requestTime: Date.now(), value });\n    }\n  }\n\n  /**\n   * Adds a concrete value as the cache entry for the given resource.\n   * This is used in cases where the resource is loaded indirectly.\n   * For example, when a resource is loaded as part of a Bundle.\n   * @param resource - The resource to cache.\n   */\n  private cacheResource(resource: Resource | undefined): void {\n    if (resource?.id && !resource.meta?.tag?.some((t) => t.code === 'SUBSETTED')) {\n      this.setCacheEntry(\n        this.fhirUrl(resource.resourceType, resource.id).toString(),\n        new ReadablePromise(Promise.resolve(resource))\n      );\n    }\n  }\n\n  /**\n   * Deletes a cache entry.\n   * @param key - The cache key to delete.\n   */\n  private deleteCacheEntry(key: string): void {\n    if (this.requestCache) {\n      this.requestCache.delete(key);\n    }\n  }\n\n  /**\n   * Makes an HTTP request.\n   * @param method - The HTTP method (GET, POST, etc).\n   * @param url - The target URL.\n   * @param options - Optional fetch request init options.\n   * @returns The JSON content body if available.\n   */\n  private async request<T>(method: string, url: string, options: RequestInit = {}): Promise<T> {\n    if (this.refreshPromise) {\n      await this.refreshPromise;\n    }\n\n    options.method = method;\n    this.addFetchOptionsDefaults(options);\n\n    const response = await this.fetchWithRetry(url, options);\n\n    return this.parseResponse(response, method, url, options);\n  }\n\n  private async parseResponse<T>(\n    response: Response,\n    method: string,\n    url: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    if (response.status === 401) {\n      // Refresh and try again\n      return this.handleUnauthenticated(method, url, options);\n    }\n\n    if (response.status === 204 || response.status === 304) {\n      // No content or change\n      return undefined as unknown as T;\n    }\n\n    const contentType = response.headers.get('content-type');\n    const isJson = contentType?.includes('json');\n\n    if (response.status === 404 && !isJson) {\n      throw new OperationOutcomeError(notFound);\n    }\n\n    const contentLocation = response.headers.get('content-location');\n    const redirectMode = options.redirect ?? this.options.redirect;\n    if (response.status === 201 && contentLocation && redirectMode === 'follow') {\n      // Follow redirect\n      return this.request('GET', contentLocation, { ...options, body: undefined });\n    }\n\n    let obj: any = undefined;\n    if (isJson) {\n      try {\n        obj = await response.json();\n      } catch (err) {\n        console.error('Error parsing response', response.status, err);\n        throw err;\n      }\n    } else {\n      obj = await response.text();\n    }\n\n    if (response.status >= 400) {\n      throw new OperationOutcomeError(normalizeOperationOutcome(obj));\n    }\n\n    return obj;\n  }\n\n  private async fetchWithRetry(url: string, options: RequestInit): Promise<Response> {\n    if (!url.startsWith('http')) {\n      url = new URL(url, this.baseUrl).href;\n    }\n\n    const maxRetries = 3;\n    const retryDelay = 200;\n    let response: Response | undefined = undefined;\n    for (let retry = 0; retry < maxRetries; retry++) {\n      try {\n        if (this.options.verbose) {\n          this.logRequest(url, options);\n        }\n        response = (await this.fetch(url, options)) as Response;\n        if (this.options.verbose) {\n          this.logResponse(response);\n        }\n        if (response.status < 500) {\n          return response;\n        }\n      } catch (err: any) {\n        this.retryCatch(retry, maxRetries, err);\n      }\n      await sleep(retryDelay);\n    }\n    return response as Response;\n  }\n\n  private logRequest(url: string, options: RequestInit): void {\n    console.log(`> ${options.method} ${url}`);\n    if (options.headers) {\n      const headers = options.headers as Record<string, string>;\n      const entries = Object.entries(headers).sort((a, b) => a[0].localeCompare(b[0]));\n      for (const [key, value] of entries) {\n        console.log(`> ${key}: ${value}`);\n      }\n    }\n  }\n\n  private logResponse(response: Response): void {\n    console.log(`< ${response.status} ${response.statusText}`);\n    if (response.headers) {\n      response.headers.forEach((value, key) => console.log(`< ${key}: ${value}`));\n    }\n  }\n\n  private async pollStatus<T>(statusUrl: string): Promise<T> {\n    let checkStatus = true;\n    let resultResponse;\n    const retryDelay = 2000;\n\n    while (checkStatus) {\n      const fetchOptions = {};\n      this.addFetchOptionsDefaults(fetchOptions);\n      const statusResponse = await this.fetchWithRetry(statusUrl, fetchOptions);\n      if (statusResponse.status !== 202) {\n        checkStatus = false;\n        resultResponse = statusResponse;\n\n        if (statusResponse.status === 201) {\n          const contentLocation = await tryGetContentLocation(statusResponse);\n          if (contentLocation) {\n            resultResponse = await this.fetchWithRetry(contentLocation, fetchOptions);\n          }\n        }\n      }\n      await sleep(retryDelay);\n    }\n    return this.parseResponse(resultResponse as Response, 'POST', statusUrl);\n  }\n\n  /**\n   * Executes a batch of requests that were automatically batched together.\n   */\n  private async executeAutoBatch(): Promise<void> {\n    // Get the current queue\n    const entries = [...(this.autoBatchQueue as AutoBatchEntry[])];\n\n    // Clear the queue\n    (this.autoBatchQueue as AutoBatchEntry[]).length = 0;\n\n    // Clear the timer\n    this.autoBatchTimerId = undefined;\n\n    // If there is only one request in the batch, just execute it\n    if (entries.length === 1) {\n      const entry = entries[0];\n      try {\n        entry.resolve(await this.request(entry.method, this.fhirBaseUrl + entry.url, entry.options));\n      } catch (err) {\n        entry.reject(new OperationOutcomeError(normalizeOperationOutcome(err)));\n      }\n      return;\n    }\n\n    // Build the batch request\n    const batch: Bundle = {\n      resourceType: 'Bundle',\n      type: 'batch',\n      entry: entries.map(\n        (e) =>\n          ({\n            request: {\n              method: e.method,\n              url: e.url,\n            },\n            resource: e.options.body ? (JSON.parse(e.options.body as string) as Resource) : undefined,\n          }) as BundleEntry\n      ),\n    };\n\n    // Execute the batch request\n    const response = (await this.post(this.fhirBaseUrl.slice(0, -1), batch)) as Bundle;\n\n    // Process the response\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      const responseEntry = response.entry?.[i];\n      if (responseEntry?.response?.outcome && !isOk(responseEntry.response.outcome)) {\n        entry.reject(new OperationOutcomeError(responseEntry.response.outcome));\n      } else {\n        entry.resolve(responseEntry?.resource);\n      }\n    }\n  }\n\n  /**\n   * Adds default options to the fetch options.\n   * @param options - The options to add defaults to.\n   */\n  private addFetchOptionsDefaults(options: RequestInit): void {\n    let headers = options.headers as Record<string, string> | undefined;\n    if (!headers) {\n      headers = {};\n      options.headers = headers;\n    }\n\n    if (!headers['Accept']) {\n      headers['Accept'] = DEFAULT_ACCEPT;\n    }\n\n    headers['X-Medplum'] = 'extended';\n\n    if (options.body && !headers['Content-Type']) {\n      headers['Content-Type'] = ContentType.FHIR_JSON;\n    }\n\n    if (this.accessToken) {\n      headers['Authorization'] = 'Bearer ' + this.accessToken;\n    } else if (this.basicAuth) {\n      headers['Authorization'] = 'Basic ' + this.basicAuth;\n    }\n    if (!options.cache) {\n      options.cache = 'no-cache';\n    }\n\n    if (!options.credentials) {\n      options.credentials = 'include';\n    }\n  }\n\n  /**\n   * Sets the \"Content-Type\" header on fetch options.\n   * @param options - The fetch options.\n   * @param contentType - The new content type to set.\n   */\n  private setRequestContentType(options: RequestInit, contentType: string): void {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    const headers = options.headers as Record<string, string>;\n    headers['Content-Type'] = contentType;\n  }\n\n  /**\n   * Sets the body on fetch options.\n   * @param options - The fetch options.\n   * @param data - The new content body.\n   */\n  private setRequestBody(options: RequestInit, data: any): void {\n    if (\n      typeof data === 'string' ||\n      (typeof Blob !== 'undefined' && data instanceof Blob) ||\n      (typeof File !== 'undefined' && data instanceof File) ||\n      (typeof Uint8Array !== 'undefined' && data instanceof Uint8Array)\n    ) {\n      options.body = data;\n    } else if (data) {\n      options.body = JSON.stringify(data);\n    }\n  }\n\n  /**\n   * Handles an unauthenticated response from the server.\n   * First, tries to refresh the access token and retry the request.\n   * Otherwise, calls unauthenticated callbacks and rejects.\n   * @param method - The HTTP method of the original request.\n   * @param url - The URL of the original request.\n   * @param options - Optional fetch request init options.\n   * @returns The result of the retry.\n   */\n  private handleUnauthenticated(method: string, url: string, options: RequestInit): Promise<any> {\n    if (this.refresh()) {\n      return this.request(method, url, options);\n    }\n    this.clearActiveLogin();\n    if (this.onUnauthenticated) {\n      this.onUnauthenticated();\n    }\n    return Promise.reject(new Error('Unauthenticated'));\n  }\n\n  /**\n   * Starts a new PKCE flow.\n   * These PKCE values are stateful, and must survive redirects and page refreshes.\n   * @category Authentication\n   * @returns The PKCE code challenge details.\n   */\n  async startPkce(): Promise<{ codeChallengeMethod: CodeChallengeMethod; codeChallenge: string }> {\n    const pkceState = getRandomString();\n    sessionStorage.setItem('pkceState', pkceState);\n\n    const codeVerifier = getRandomString();\n    sessionStorage.setItem('codeVerifier', codeVerifier);\n\n    const arrayHash = await encryptSHA256(codeVerifier);\n    const codeChallenge = arrayBufferToBase64(arrayHash).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n    sessionStorage.setItem('codeChallenge', codeChallenge);\n\n    return { codeChallengeMethod: 'S256', codeChallenge };\n  }\n\n  /**\n   * Redirects the user to the login screen for authorization.\n   * Clears all auth state including local storage and session storage.\n   * @param loginParams - The authorization login parameters.\n   * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint\n   */\n  private async requestAuthorization(loginParams?: Partial<BaseLoginRequest>): Promise<void> {\n    const loginRequest = await this.ensureCodeChallenge(loginParams ?? {});\n    const url = new URL(this.authorizeUrl);\n    url.searchParams.set('response_type', 'code');\n    url.searchParams.set('state', sessionStorage.getItem('pkceState') as string);\n    url.searchParams.set('client_id', loginRequest.clientId ?? (this.clientId as string));\n    url.searchParams.set('redirect_uri', loginRequest.redirectUri ?? getWindowOrigin());\n    url.searchParams.set('code_challenge_method', loginRequest.codeChallengeMethod as string);\n    url.searchParams.set('code_challenge', loginRequest.codeChallenge as string);\n    url.searchParams.set('scope', loginRequest.scope ?? 'openid profile');\n    window.location.assign(url.toString());\n  }\n\n  /**\n   * Processes an OAuth authorization code.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenRequest\n   * @param code - The authorization code received by URL parameter.\n   * @param loginParams - Optional login parameters.\n   * @returns The user profile resource.\n   * @category Authentication\n   */\n  processCode(code: string, loginParams?: Partial<BaseLoginRequest>): Promise<ProfileResource> {\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.AuthorizationCode);\n    formBody.set('code', code);\n    formBody.set('client_id', loginParams?.clientId ?? (this.clientId as string));\n    formBody.set('redirect_uri', loginParams?.redirectUri ?? getWindowOrigin());\n\n    if (typeof sessionStorage !== 'undefined') {\n      const codeVerifier = sessionStorage.getItem('codeVerifier');\n      if (codeVerifier) {\n        formBody.set('code_verifier', codeVerifier);\n      }\n    }\n\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Tries to refresh the auth tokens.\n   * @returns The refresh promise if available; otherwise undefined.\n   * @see https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens\n   */\n  private refresh(): Promise<void> | undefined {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    if (this.refreshToken) {\n      const formBody = new URLSearchParams();\n      formBody.set('grant_type', OAuthGrantType.RefreshToken);\n      formBody.set('client_id', this.clientId as string);\n      formBody.set('refresh_token', this.refreshToken);\n      this.refreshPromise = this.fetchTokens(formBody);\n      return this.refreshPromise;\n    }\n\n    if (this.clientId && this.clientSecret) {\n      this.refreshPromise = this.startClientLogin(this.clientId, this.clientSecret);\n      return this.refreshPromise;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Starts a new OAuth2 client credentials flow.\n   *\n   * @example\n   * ```typescript\n   * await medplum.startClientLogin(process.env.MEDPLUM_CLIENT_ID, process.env.MEDPLUM_CLIENT_SECRET)\n   * // Example Search\n   * await medplum.searchResources('Patient')\n   * ```\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param clientSecret - The client secret.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startClientLogin(clientId: string, clientSecret: string): Promise<ProfileResource> {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.ClientCredentials);\n    formBody.set('client_id', clientId);\n    formBody.set('client_secret', clientSecret);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Starts a new OAuth2 JWT bearer flow.\n   *\n   * @example\n   * ```typescript\n   * await medplum.startJwtBearerLogin(process.env.MEDPLUM_CLIENT_ID, process.env.MEDPLUM_JWT_BEARER_ASSERTION, 'openid profile');\n   * // Example Search\n   * await medplum.searchResources('Patient')\n   * ```\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.1\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param assertion - The JWT assertion.\n   * @param scope - The OAuth scope.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startJwtBearerLogin(clientId: string, assertion: string, scope: string): Promise<ProfileResource> {\n    this.clientId = clientId;\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.JwtBearer);\n    formBody.set('client_id', clientId);\n    formBody.set('assertion', assertion);\n    formBody.set('scope', scope);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Starts a new OAuth2 JWT assertion flow.\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.2\n   *\n   * @category Authentication\n   * @param jwt - The JWT assertion.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startJwtAssertionLogin(jwt: string): Promise<ProfileResource> {\n    const formBody = new URLSearchParams();\n    formBody.append('grant_type', OAuthGrantType.ClientCredentials);\n    formBody.append('client_assertion_type', OAuthClientAssertionType.JwtBearer);\n    formBody.append('client_assertion', jwt);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Sets the client ID and secret for basic auth.\n   *\n   * @example\n   * ```typescript\n   * medplum.setBasicAuth(process.env.MEDPLUM_CLIENT_ID, process.env.MEDPLUM_CLIENT_SECRET);\n   * // Example Search\n   * await medplum.searchResources('Patient');\n   * ```\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param clientSecret - The client secret.\n   */\n  setBasicAuth(clientId: string, clientSecret: string): void {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.basicAuth = encodeBase64(clientId + ':' + clientSecret);\n  }\n\n  /**\n   * Subscribes to a specified topic, listening for a list of specified events.\n   *\n   * Once you have the `SubscriptionRequest` returned from this method, you can call `fhircastConnect(subscriptionRequest)` to connect to the subscription stream.\n   *\n   * @category FHIRcast\n   * @param topic - The topic to publish to. Usually a UUID.\n   * @param events - An array of event names to listen for.\n   * @returns A `Promise` that resolves once the request completes, or rejects if it fails.\n   */\n  async fhircastSubscribe(topic: string, events: FhircastEventName[]): Promise<SubscriptionRequest> {\n    if (!(typeof topic === 'string' && topic !== '')) {\n      throw new OperationOutcomeError(validationError('Invalid topic provided. Topic must be a valid string.'));\n    }\n    if (!(typeof events === 'object' && Array.isArray(events) && events.length > 0)) {\n      throw new OperationOutcomeError(\n        validationError(\n          'Invalid events provided. Events must be an array of event names containing at least one event.'\n        )\n      );\n    }\n\n    const subRequest = {\n      channelType: 'websocket',\n      mode: 'subscribe',\n      topic,\n      events,\n    } as PendingSubscriptionRequest;\n\n    const body = (await this.post(\n      '/fhircast/STU3',\n      serializeFhircastSubscriptionRequest(subRequest),\n      ContentType.FORM_URL_ENCODED\n    )) as { 'hub.channel.endpoint': string };\n\n    const endpoint = body['hub.channel.endpoint'];\n    if (!endpoint) {\n      throw new Error('Invalid response!');\n    }\n\n    // Add endpoint to subscription request before returning\n    (subRequest as SubscriptionRequest).endpoint = endpoint;\n    return subRequest as SubscriptionRequest;\n  }\n\n  /**\n   * Unsubscribes from the specified topic.\n   *\n   * @category FHIRcast\n   * @param subRequest - A `SubscriptionRequest` representing a subscription to cancel. Mode will be set to `unsubscribe` automatically.\n   * @returns A `Promise` that resolves when request to unsubscribe is completed.\n   */\n  async fhircastUnsubscribe(subRequest: SubscriptionRequest): Promise<void> {\n    if (!validateFhircastSubscriptionRequest(subRequest)) {\n      throw new OperationOutcomeError(\n        validationError('Invalid topic or subscriptionRequest. SubscriptionRequest must be an object.')\n      );\n    }\n    if (!(subRequest.endpoint && typeof subRequest.endpoint === 'string' && subRequest.endpoint.startsWith('ws'))) {\n      throw new OperationOutcomeError(\n        validationError('Provided subscription request must have an endpoint in order to unsubscribe.')\n      );\n    }\n\n    // Turn subRequest -> unsubRequest\n    subRequest.mode = 'unsubscribe';\n    // Send unsub request\n    await this.post('/fhircast/STU3', serializeFhircastSubscriptionRequest(subRequest), ContentType.FORM_URL_ENCODED);\n  }\n\n  /**\n   * Connects to a `FHIRcast` session.\n   *\n   * @category FHIRcast\n   * @param subRequest - The `SubscriptionRequest` to use for connecting.\n   * @returns A `FhircastConnection` which emits lifecycle events for the `FHIRcast` WebSocket connection.\n   */\n  fhircastConnect(subRequest: SubscriptionRequest): FhircastConnection {\n    return new FhircastConnection(subRequest);\n  }\n\n  /**\n   * Publishes a new context to a given topic for a specified event type.\n   *\n   * @category FHIRcast\n   * @param topic - The topic to publish to. Usually a UUID.\n   * @param event - The name of the event to publish an updated context for, ie. `Patient-open`.\n   * @param context - The updated context containing resources relevant to this event.\n   * @param versionId - The `versionId` of the `anchor context` of the given event. Used for `DiagnosticReport-update` event.\n   * @returns A `Promise` that resolves once the request completes, or rejects if it fails.\n   */\n  async fhircastPublish<EventName extends FhircastEventVersionOptional>(\n    topic: string,\n    event: EventName,\n    context: FhircastEventContext<EventName> | FhircastEventContext<EventName>[],\n    versionId?: never\n  ): Promise<void>;\n\n  async fhircastPublish<RequiredVersionEvent extends FhircastEventVersionRequired>(\n    topic: string,\n    event: RequiredVersionEvent,\n    context: FhircastEventContext<RequiredVersionEvent> | FhircastEventContext<RequiredVersionEvent>[],\n    versionId: string\n  ): Promise<void>;\n\n  async fhircastPublish<EventName extends FhircastEventVersionRequired | FhircastEventVersionOptional>(\n    topic: string,\n    event: EventName,\n    context: FhircastEventContext<EventName> | FhircastEventContext<EventName>[],\n    versionId?: string | undefined\n  ): Promise<void> {\n    if (isContextVersionRequired(event)) {\n      return this.post(\n        `/fhircast/STU3/${topic}`,\n        createFhircastMessagePayload<typeof event>(topic, event, context, versionId as string),\n        ContentType.JSON\n      );\n    }\n    assertContextVersionOptional(event);\n    return this.post(\n      `/fhircast/STU3/${topic}`,\n      createFhircastMessagePayload<typeof event>(topic, event, context),\n      ContentType.JSON\n    );\n  }\n\n  /**\n   * Invite a user to a project.\n   * @param projectId - The project ID.\n   * @param body - The InviteRequest.\n   * @returns Promise that returns a project membership or an operation outcome.\n   */\n  async invite(projectId: string, body: InviteRequest): Promise<ProjectMembership | OperationOutcome> {\n    return this.post('admin/projects/' + projectId + '/invite', body);\n  }\n\n  /**\n   * Makes a POST request to the tokens endpoint.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n   * @param formBody - Token parameters in URL encoded format.\n   * @returns The user profile resource.\n   */\n  private async fetchTokens(formBody: URLSearchParams): Promise<ProfileResource> {\n    const options: RequestInit = {\n      method: 'POST',\n      headers: { 'Content-Type': ContentType.FORM_URL_ENCODED },\n      body: formBody.toString(),\n      credentials: 'include',\n    };\n    const headers = options.headers as Record<string, string>;\n\n    if (this.basicAuth) {\n      headers['Authorization'] = `Basic ${this.basicAuth}`;\n    }\n\n    const response = await this.fetchWithRetry(this.tokenUrl, options);\n    if (!response.ok) {\n      this.clearActiveLogin();\n      try {\n        const error = await response.json();\n        throw new OperationOutcomeError(badRequest(error.error_description));\n      } catch (err) {\n        throw new OperationOutcomeError(badRequest('Failed to fetch tokens'), err);\n      }\n    }\n    const tokens = await response.json();\n    await this.verifyTokens(tokens);\n    return this.getProfile() as ProfileResource;\n  }\n\n  /**\n   * Verifies the tokens received from the auth server.\n   * Validates the JWT against the JWKS.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n   * @param tokens - The token response.\n   * @returns Promise to complete.\n   */\n  private async verifyTokens(tokens: TokenResponse): Promise<void> {\n    const token = tokens.access_token;\n\n    if (isJwt(token)) {\n      // Verify token has not expired\n      const tokenPayload = parseJWTPayload(token);\n\n      if (Date.now() >= (tokenPayload.exp as number) * 1000) {\n        this.clearActiveLogin();\n        throw new Error('Token expired');\n      }\n\n      // Verify app_client_id\n      if (tokenPayload.cid) {\n        if (tokenPayload.cid !== this.clientId) {\n          this.clearActiveLogin();\n          throw new Error('Token was not issued for this audience');\n        }\n      } else if (this.clientId && tokenPayload.client_id !== this.clientId) {\n        this.clearActiveLogin();\n        throw new Error('Token was not issued for this audience');\n      }\n    }\n\n    return this.setActiveLogin({\n      accessToken: token,\n      refreshToken: tokens.refresh_token,\n      project: tokens.project,\n      profile: tokens.profile,\n    });\n  }\n\n  /**\n   * Sets up a listener for window storage events.\n   * This synchronizes state across browser windows and browser tabs.\n   */\n  private setupStorageListener(): void {\n    try {\n      window.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === null || e.key === 'activeLogin') {\n          // Storage events fire when different tabs make changes.\n          // On storage clear (key === null) or activeLogin change (key === 'activeLogin')\n          // Refresh the page to ensure the active login is up to date.\n          window.location.reload();\n        }\n      });\n    } catch (err) {\n      // Silently ignore if this environment does not support storage events\n    }\n  }\n\n  private retryCatch(retryNumber: number, maxRetries: number, err: Error): void {\n    // This is for the 1st retry to avoid multiple notifications\n    if (err.message === 'Failed to fetch' && retryNumber === 1) {\n      this.dispatchEvent({ type: 'offline' });\n    }\n    if (retryNumber >= maxRetries - 1) {\n      throw err;\n    }\n  }\n}\n\n/**\n * Returns the default fetch method.\n * The default fetch is currently only available in browser environments.\n * If you want to use SSR such as Next.js, you should pass a custom fetch function.\n * @returns The default fetch function for the current environment.\n */\nfunction getDefaultFetch(): FetchLike {\n  if (!globalThis.fetch) {\n    throw new Error('Fetch not available in this environment');\n  }\n  return globalThis.fetch.bind(globalThis);\n}\n\n/**\n * Returns the base URL for the current page.\n * @returns The window origin string.\n * @category HTTP\n */\nfunction getWindowOrigin(): string {\n  if (typeof window === 'undefined') {\n    return '';\n  }\n  return window.location.protocol + '//' + window.location.host + '/';\n}\n\n/**\n * Ensures the given URL has a trailing slash.\n * @param url - The URL to ensure has a trailing slash.\n * @returns The URL with a trailing slash.\n */\nfunction ensureTrailingSlash(url: string): string {\n  return url.endsWith('/') ? url : url + '/';\n}\n\n/**\n * Concatenates the given base URL and URL.\n *\n * If the URL is absolute, it is returned as-is.\n *\n * @param baseUrl - The base URL.\n * @param url - The URL to concat. Can be relative or absolute.\n * @returns The concatenated URL.\n */\nfunction concatUrls(baseUrl: string, url: string): string {\n  return new URL(url, baseUrl).toString();\n}\n\n/**\n * Attempts to retrieve the content location from the given HTTP response.\n *\n * This function prioritizes the \"Content-Location\" HTTP header as the\n * most authoritative source for the content location. If this header is\n * not present, it falls back to the \"Location\" HTTP header.\n *\n * In cases where neither of these headers are available (for instance,\n * due to CORS restrictions), it attempts to retrieve the content location\n * from the 'diagnostics' field of the first issue in an OperationOutcome object\n * present in the response body. If all attempts fail, the function returns 'undefined'.\n * @async\n * @param response - The HTTP response object from which to extract the content location.\n * @returns A Promise that resolves to the content location string if it is found, or 'undefined' if the content location cannot be determined from the response.\n */\nasync function tryGetContentLocation(response: Response): Promise<string | undefined> {\n  // Accepted content location can come from multiple sources\n  // The authoritative source is the \"Content-Location\" HTTP header.\n  const contentLocation = response.headers.get('content-location');\n  if (contentLocation) {\n    return contentLocation;\n  }\n\n  // The next best source is the \"Location\" HTTP header.\n  const location = response.headers.get('location');\n  if (location) {\n    return location;\n  }\n\n  // However, \"Content-Location\" may not be available due to CORS limitations.\n  // In this case, we use the OperationOutcome.diagnostics field.\n  const body = await response.json();\n  if (isOperationOutcome(body) && body.issue?.[0]?.diagnostics) {\n    return body.issue[0].diagnostics;\n  }\n\n  // If all else fails, return undefined.\n  return undefined;\n}\n\n/**\n * Converts a FHIR resource bundle to a resource array.\n * The bundle is attached to the array as a property named \"bundle\".\n * @param bundle - A FHIR resource bundle.\n * @returns The resource array with the bundle attached.\n */\nfunction bundleToResourceArray<T extends Resource>(bundle: Bundle<T>): ResourceArray<T> {\n  const array = bundle.entry?.map((e) => e.resource as T) ?? [];\n  return Object.assign(array, { bundle });\n}\n", "import { TypeName } from './types';\n\nexport const ExternalSecretSystems = {\n  aws_ssm_parameter_store: 'aws_ssm_parameter_store',\n} as const;\n\nexport type ExternalSecretSystem = keyof typeof ExternalSecretSystems;\nexport type ExternalSecretPrimitive = string | boolean | number;\nexport type ExternalSecretPrimitiveType = 'string' | 'boolean' | 'number';\nexport type ExternalSecret<T extends ExternalSecretPrimitive = ExternalSecretPrimitive> = {\n  system: ExternalSecretSystem;\n  key: string;\n  type: TypeName<T>;\n};\nexport type ValueOrExternalSecret<T extends ExternalSecretPrimitive> = T | ExternalSecret<T>;\n\nexport interface MedplumSourceInfraConfig {\n  name: ValueOrExternalSecret<string>;\n  stackName: ValueOrExternalSecret<string>;\n  accountNumber: ValueOrExternalSecret<string>;\n  region: string;\n  domainName: ValueOrExternalSecret<string>;\n  vpcId: ValueOrExternalSecret<string>;\n  apiPort: ValueOrExternalSecret<number>;\n  apiDomainName: ValueOrExternalSecret<string>;\n  apiSslCertArn: ValueOrExternalSecret<string>;\n  apiInternetFacing?: ValueOrExternalSecret<boolean>;\n  appDomainName: ValueOrExternalSecret<string>;\n  appSslCertArn: ValueOrExternalSecret<string>;\n  appApiProxy?: ValueOrExternalSecret<boolean>;\n  appLoggingBucket?: ValueOrExternalSecret<string>;\n  appLoggingPrefix?: ValueOrExternalSecret<string>;\n  storageBucketName: ValueOrExternalSecret<string>;\n  storageDomainName: ValueOrExternalSecret<string>;\n  storageSslCertArn: ValueOrExternalSecret<string>;\n  signingKeyId: ValueOrExternalSecret<string>;\n  storagePublicKey: ValueOrExternalSecret<string>;\n  storageLoggingBucket?: ValueOrExternalSecret<string>;\n  storageLoggingPrefix?: ValueOrExternalSecret<string>;\n  baseUrl: ValueOrExternalSecret<string>;\n  maxAzs: ValueOrExternalSecret<number>;\n  rdsInstances: ValueOrExternalSecret<number>;\n  rdsInstanceType: ValueOrExternalSecret<string>;\n  rdsSecretsArn?: ValueOrExternalSecret<string>;\n  cacheNodeType?: ValueOrExternalSecret<string>;\n  desiredServerCount: ValueOrExternalSecret<number>;\n  serverImage: ValueOrExternalSecret<string>;\n  serverMemory: ValueOrExternalSecret<number>;\n  serverCpu: ValueOrExternalSecret<number>;\n  loadBalancerLoggingBucket?: ValueOrExternalSecret<string>;\n  loadBalancerLoggingPrefix?: ValueOrExternalSecret<string>;\n  clamscanEnabled: ValueOrExternalSecret<boolean>;\n  clamscanLoggingBucket: ValueOrExternalSecret<string>;\n  clamscanLoggingPrefix: ValueOrExternalSecret<string>;\n  skipDns?: ValueOrExternalSecret<boolean>;\n  additionalContainers?: {\n    name: ValueOrExternalSecret<string>;\n    image: ValueOrExternalSecret<string>;\n    cpu?: ValueOrExternalSecret<number>;\n    memory?: ValueOrExternalSecret<number>;\n    essential?: ValueOrExternalSecret<boolean>;\n    command?: ValueOrExternalSecret<string>[];\n    environment?: {\n      [key: string]: ValueOrExternalSecret<string>;\n    };\n  }[];\n  cloudTrailAlarms?: {\n    logGroupName: ValueOrExternalSecret<string>;\n    logGroupCreate?: ValueOrExternalSecret<boolean>;\n    snsTopicArn?: ValueOrExternalSecret<string>;\n    snsTopicName?: ValueOrExternalSecret<string>;\n  };\n}\n\nexport interface MedplumInfraConfig {\n  name: string;\n  stackName: string;\n  accountNumber: string;\n  region: string;\n  domainName: string;\n  vpcId: string;\n  apiPort: number;\n  apiDomainName: string;\n  apiSslCertArn: string;\n  apiInternetFacing?: boolean;\n  appDomainName: string;\n  appSslCertArn: string;\n  appApiProxy?: boolean;\n  appLoggingBucket?: string;\n  appLoggingPrefix?: string;\n  storageBucketName: string;\n  storageDomainName: string;\n  storageSslCertArn: string;\n  signingKeyId: string;\n  storagePublicKey: string;\n  storageLoggingBucket?: string;\n  storageLoggingPrefix?: string;\n  baseUrl: string;\n  maxAzs: number;\n  rdsInstances: number;\n  rdsInstanceType: string;\n  rdsSecretsArn?: string;\n  cacheNodeType?: string;\n  desiredServerCount: number;\n  serverImage: string;\n  serverMemory: number;\n  serverCpu: number;\n  loadBalancerLoggingBucket?: string;\n  loadBalancerLoggingPrefix?: string;\n  clamscanEnabled: boolean;\n  clamscanLoggingBucket: string;\n  clamscanLoggingPrefix: string;\n  skipDns?: boolean;\n  additionalContainers?: {\n    name: string;\n    image: string;\n    cpu?: number;\n    memory?: number;\n    essential?: boolean;\n    command?: string[];\n    environment?: {\n      [key: string]: string;\n    };\n  }[];\n  cloudTrailAlarms?: {\n    logGroupName: string;\n    logGroupCreate?: boolean;\n    snsTopicArn?: string;\n    snsTopicName?: string;\n  };\n}\n", "// Common terminology systems, taken from https://terminology.hl7.org/external_terminologies.html\nexport const UCUM = 'http://unitsofmeasure.org';\nexport const LOINC = 'http://loinc.org';\nexport const SNOMED = 'http://snomed.info/sct';\nexport const RXNORM = 'http://www.nlm.nih.gov/research/umls/rxnorm';\nexport const CPT = 'http://www.ama-assn.org/go/cpt';\nexport const ICD10 = 'http://hl7.org/fhir/sid/icd-10';\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\nimport { FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS } from '../fhirpath/tokenize';\n\nconst MAPPING_LANGUAGE_OPERATORS = [...FHIRPATH_OPERATORS, '->', '<<', '>>'];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, MAPPING_LANGUAGE_OPERATORS).tokenize();\n}\n", "import {\n  StructureMap,\n  StructureMapGroup,\n  StructureMapGroupInput,\n  StructureMapGroupRule,\n  StructureMapGroupRuleDependent,\n  StructureMapGroupRuleSource,\n  StructureMapGroupRuleTarget,\n  StructureMapStructure,\n} from '@medplum/fhirtypes';\nimport { Parser } from '../fhirlexer/parse';\nimport { FunctionAtom, LiteralAtom, SymbolAtom } from '../fhirpath/atoms';\nimport { initFhirPathParserBuilder, OperatorPrecedence } from '../fhirpath/parse';\nimport { tokenize } from './tokenize';\n\nclass StructureMapParser {\n  readonly structureMap: StructureMap = { resourceType: 'StructureMap' };\n  constructor(readonly parser: Parser) {}\n\n  parse(): StructureMap {\n    // 'map' url '=' identifier\n    // map \"http://hl7.org/fhir/StructureMap/tutorial\" = tutorial\n    this.parser.consume('Symbol', 'map');\n    this.structureMap.url = this.parser.consume('String').value;\n    this.parser.consume('=');\n    this.structureMap.name = this.parser.consume().value;\n    while (this.parser.hasMore()) {\n      const next = this.parser.peek()?.value;\n      switch (next) {\n        case 'uses':\n          this.parseUses();\n          break;\n        case 'imports':\n          this.parseImport();\n          break;\n        case 'group':\n          this.parseGroup();\n          break;\n        case 'conceptmap':\n          this.parseConceptMap();\n          break;\n        default:\n          throw new Error(`Unexpected token: ${next}`);\n      }\n    }\n    return this.structureMap;\n  }\n\n  private parseUses(): void {\n    // 'uses' url structureAlias? 'as' modelMode\n    // uses \"http://hl7.org/fhir/StructureDefinition/tutorial-left\" as source\n    this.parser.consume('Symbol', 'uses');\n    const result: StructureMapStructure = {};\n    result.url = this.parser.consume('String').value;\n    if (this.parser.peek()?.value === 'alias') {\n      this.parser.consume('Symbol', 'alias');\n      result.alias = this.parser.consume('Symbol').value;\n    }\n    this.parser.consume('Symbol', 'as');\n    result.mode = this.parser.consume().value as 'source' | 'queried' | 'target' | 'produced';\n    if (!this.structureMap.structure) {\n      this.structureMap.structure = [];\n    }\n    this.structureMap.structure.push(result);\n  }\n\n  private parseImport(): void {\n    this.parser.consume('Symbol', 'imports');\n    if (!this.structureMap.import) {\n      this.structureMap.import = [];\n    }\n    this.structureMap.import.push(this.parser.consume('String').value);\n  }\n\n  private parseGroup(): void {\n    // 'group' identifier parameters extends? typeMode? rules\n    // group tutorial(source src : TLeft, target tgt : TRight) {\n    const result: StructureMapGroup = {};\n    this.parser.consume('Symbol', 'group');\n    result.name = this.parser.consume('Symbol').value;\n    result.input = this.parseParameters();\n\n    if (this.parser.peek()?.value === 'extends') {\n      this.parser.consume('Symbol', 'extends');\n      result.extends = this.parser.consume('Symbol').value;\n    }\n\n    if (this.parser.peek()?.value === '<<') {\n      this.parser.consume('<<');\n      result.typeMode = this.parser.consume().value as 'none' | 'types' | 'type-and-types';\n      if (this.parser.peek()?.value === '+') {\n        this.parser.consume('+');\n        result.typeMode = 'type-and-types';\n      }\n      this.parser.consume('>>');\n    } else {\n      result.typeMode = 'none';\n    }\n\n    result.rule = this.parseRules();\n\n    if (!this.structureMap.group) {\n      this.structureMap.group = [];\n    }\n    this.structureMap.group.push(result);\n  }\n\n  private parseParameters(): StructureMapGroupInput[] {\n    const parameters: StructureMapGroupInput[] = [];\n    this.parser.consume('(');\n    while (this.parser.hasMore() && this.parser.peek()?.value !== ')') {\n      parameters.push(this.parseParameter());\n      if (this.parser.peek()?.value === ',') {\n        this.parser.consume(',');\n      }\n    }\n    this.parser.consume(')');\n    return parameters;\n  }\n\n  private parseParameter(): StructureMapGroupInput {\n    // inputMode identifier type?\n    // ':' identifier\n    // source src : TLeft\n    const result: StructureMapGroupInput = {};\n    result.mode = this.parser.consume().value as 'source' | 'target';\n    result.name = this.parser.consume('Symbol').value;\n    if (this.parser.peek()?.value === ':') {\n      this.parser.consume(':');\n      result.type = this.parser.consume('Symbol').value;\n    }\n    return result;\n  }\n\n  private parseRules(): StructureMapGroupRule[] {\n    const rules = [];\n    this.parser.consume('{');\n    while (this.parser.hasMore() && this.parser.peek()?.value !== '}') {\n      rules.push(this.parseRule());\n    }\n    this.parser.consume('}');\n    return rules;\n  }\n\n  private parseRule(): StructureMapGroupRule {\n    const result: StructureMapGroupRule = {\n      source: this.parseRuleSources(),\n    };\n\n    if (this.parser.peek()?.value === '->') {\n      this.parser.consume('->');\n      result.target = this.parseRuleTargets();\n    }\n\n    if (this.parser.peek()?.value === 'then') {\n      this.parser.consume('Symbol', 'then');\n      if (this.parser.peek()?.id === '{') {\n        result.rule = this.parseRules();\n      } else {\n        result.dependent = this.parseRuleDependents();\n      }\n    }\n\n    if (this.parser.peek()?.id === 'String') {\n      result.name = this.parser.consume().value;\n    } else {\n      result.name = result.source?.[0]?.element;\n    }\n\n    this.parser.consume(';');\n    return result;\n  }\n\n  private parseRuleSources(): StructureMapGroupRuleSource[] {\n    const sources = [this.parseRuleSource()];\n    while (this.parser.hasMore() && this.parser.peek()?.value === ',') {\n      this.parser.consume(',');\n      sources.push(this.parseRuleSource());\n    }\n    return sources;\n  }\n\n  private parseRuleSource(): StructureMapGroupRuleSource {\n    const result: StructureMapGroupRuleSource = {};\n\n    const context = this.parseRuleContext();\n    if (context.includes('.')) {\n      const parts = context.split('.');\n      result.context = parts[0];\n      result.element = parts[1];\n    } else {\n      result.context = context;\n    }\n\n    if (this.parser.hasMore() && this.parser.peek()?.value === ':') {\n      this.parser.consume(':');\n      result.type = this.parser.consume().value;\n    }\n\n    if (this.parser.hasMore() && this.parser.peek()?.value === 'default') {\n      this.parser.consume('default');\n      this.parser.consumeAndParse();\n    }\n\n    if (\n      this.parser.peek()?.value === 'first' ||\n      this.parser.peek()?.value === 'not_first' ||\n      this.parser.peek()?.value === 'last' ||\n      this.parser.peek()?.value === 'not_last' ||\n      this.parser.peek()?.value === 'only_one'\n    ) {\n      result.listMode = this.parser.consume().value as 'first' | 'not_first' | 'last' | 'not_last' | 'only_one';\n    }\n\n    if (this.parser.peek()?.value === 'as') {\n      this.parser.consume('Symbol', 'as');\n      result.variable = this.parser.consume().value;\n    }\n\n    if (this.parser.peek()?.value === 'where') {\n      this.parser.consume('Symbol', 'where');\n      const whereFhirPath = this.parser.consumeAndParse(OperatorPrecedence.Arrow);\n      result.condition = whereFhirPath.toString();\n    }\n\n    if (this.parser.peek()?.value === 'check') {\n      this.parser.consume('Symbol', 'check');\n      const checkFhirPath = this.parser.consumeAndParse(OperatorPrecedence.Arrow);\n      result.check = checkFhirPath.toString();\n    }\n\n    return result;\n  }\n\n  private parseRuleTargets(): StructureMapGroupRuleTarget[] {\n    const targets = [this.parseRuleTarget()];\n    while (this.parser.hasMore() && this.parser.peek()?.value === ',') {\n      this.parser.consume(',');\n      targets.push(this.parseRuleTarget());\n    }\n    return targets;\n  }\n\n  private parseRuleTarget(): StructureMapGroupRuleTarget {\n    const result: StructureMapGroupRuleTarget = {};\n\n    const context = this.parseRuleContext();\n    if (context.includes('.')) {\n      const parts = context.split('.');\n      result.contextType = 'variable';\n      result.context = parts[0];\n      result.element = parts[1];\n    } else {\n      result.context = context;\n    }\n\n    if (this.parser.peek()?.value === '=') {\n      this.parser.consume('=');\n      this.parseRuleTargetTransform(result);\n    }\n\n    if (this.parser.peek()?.value === 'as') {\n      this.parser.consume('Symbol', 'as');\n      result.variable = this.parser.consume().value;\n    }\n\n    if (\n      this.parser.peek()?.value === 'first' ||\n      this.parser.peek()?.value === 'share' ||\n      this.parser.peek()?.value === 'last' ||\n      this.parser.peek()?.value === 'collate'\n    ) {\n      result.listMode = [this.parser.consume().value as 'first' | 'share' | 'last' | 'collate'];\n    }\n\n    return result;\n  }\n\n  private parseRuleTargetTransform(result: StructureMapGroupRuleTarget): void {\n    result.transform = 'copy';\n\n    const transformFhirPath = this.parser.consumeAndParse(OperatorPrecedence.As);\n    if (transformFhirPath instanceof SymbolAtom) {\n      this.parseRuleTargetSymbol(result, transformFhirPath);\n    } else if (transformFhirPath instanceof FunctionAtom) {\n      this.parseRuleTargetFunction(result, transformFhirPath);\n    } else if (transformFhirPath instanceof LiteralAtom) {\n      this.parseRuleTargetLiteral(result, transformFhirPath);\n    } else {\n      throw new Error(`Unexpected FHIRPath: ${transformFhirPath}`);\n    }\n  }\n\n  private parseRuleTargetSymbol(result: StructureMapGroupRuleTarget, literalAtom: SymbolAtom): void {\n    result.parameter = [{ valueId: literalAtom.name }];\n  }\n\n  private parseRuleTargetFunction(result: StructureMapGroupRuleTarget, functionAtom: FunctionAtom): void {\n    const functionName = functionAtom.name;\n    switch (functionName) {\n      case 'create':\n        result.parameter = [\n          {\n            valueString: (functionAtom.args[0] as LiteralAtom).value.value as string,\n          },\n        ];\n        break;\n\n      case 'translate':\n        result.parameter = [{}];\n        break;\n\n      default:\n        throw new Error('Unknown target function: ' + functionName);\n    }\n  }\n\n  private parseRuleTargetLiteral(result: StructureMapGroupRuleTarget, literalAtom: LiteralAtom): void {\n    switch (literalAtom.value.type) {\n      case 'boolean':\n        result.parameter = [{ valueBoolean: literalAtom.value.value as boolean }];\n        break;\n      case 'decimal':\n        result.parameter = [{ valueDecimal: literalAtom.value.value as number }];\n        break;\n      case 'string':\n        result.parameter = [{ valueString: literalAtom.value.value as string }];\n        break;\n      default:\n        throw new Error('Unknown target literal type: ' + literalAtom.value.type);\n    }\n  }\n\n  private parseRuleContext(): string {\n    let identifier = this.parser.consume().value;\n    while (this.parser.peek()?.value === '.') {\n      this.parser.consume('.');\n      identifier += '.' + this.parser.consume().value;\n    }\n    return identifier;\n  }\n\n  private parseRuleDependents(): StructureMapGroupRuleDependent[] | undefined {\n    const atom = this.parser.consumeAndParse(OperatorPrecedence.Arrow) as FunctionAtom;\n    return [\n      {\n        name: atom.name,\n        variable: atom.args.map((arg) => (arg as SymbolAtom).name),\n      },\n    ];\n  }\n\n  private parseConceptMap(): void {\n    while (this.parser.peek()?.value !== '}') {\n      this.parser.consume();\n    }\n    this.parser.consume('}');\n  }\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder()\n  .registerInfix('->', { precedence: OperatorPrecedence.Arrow })\n  .registerInfix(';', { precedence: OperatorPrecedence.Semicolon });\n\n/**\n * Parses a FHIR Mapping Language document into an AST.\n * @param input - The FHIR Mapping Language document to parse.\n * @returns The AST representing the document.\n */\nexport function parseMappingLanguage(input: string): StructureMap {\n  const parser = fhirPathParserBuilder.construct(tokenize(input));\n  parser.removeComments();\n  return new StructureMapParser(parser).parse();\n}\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\nimport { FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS } from '../fhirpath/tokenize';\n\nconst MAPPING_LANGUAGE_OPERATORS = [...FHIRPATH_OPERATORS, 'eq', 'ne', 'co'];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, MAPPING_LANGUAGE_OPERATORS, {\n    dateTimeLiterals: true,\n    symbolRegex: /[^\\s\\])]/,\n  }).tokenize();\n}\n", "// See: https://hl7.org/fhir/search_filter.html\n\nimport { Operator } from '../search/search';\n\n/**\n * The FhirFilterExpression type is the base type of all filter expressions.\n */\nexport type FhirFilterExpression = FhirFilterComparison | FhirFilterNegation | FhirFilterConnective;\n\n/**\n * The FhirFilterComparison class represents a comparison expression.\n */\nexport class FhirFilterComparison {\n  constructor(\n    readonly path: string,\n    readonly operator: Operator,\n    readonly value: string\n  ) {}\n}\n\n/**\n * The FhirFilterNegation class represents a negation expression.\n * It contains a single child expression.\n */\nexport class FhirFilterNegation {\n  constructor(readonly child: FhirFilterExpression) {}\n}\n\n/**\n * The FhirFilterConnective class represents a connective expression.\n * It contains a list of child expressions.\n */\nexport class FhirFilterConnective {\n  constructor(\n    readonly keyword: 'and' | 'or',\n    readonly left: FhirFilterExpression,\n    readonly right: FhirFilterExpression\n  ) {}\n}\n", "import { Parser } from '../fhirlexer/parse';\nimport { initFhirPathParserBuilder } from '../fhirpath/parse';\nimport { OperationOutcomeError, badRequest } from '../outcomes';\nimport { Operator } from '../search/search';\nimport { tokenize } from './tokenize';\nimport { FhirFilterComparison, FhirFilterConnective, FhirFilterExpression, FhirFilterNegation } from './types';\n\n/**\n * The operatorMap maps FHIR _filter operators to Medplum search operators.\n * See _filter operators: https://www.hl7.org/fhir/search_filter.html#ops\n */\nconst operatorMap: Record<string, Operator | undefined> = {\n  // eq - an item in the set has an equal value\n  eq: Operator.EQUALS,\n  // ne - An item in the set has an unequal value\n  ne: Operator.NOT_EQUALS,\n  // co - An item in the set contains this value\n  co: Operator.CONTAINS,\n  // sw - An item in the set starts with this value\n  sw: undefined,\n  // ew - An item in the set ends with this value\n  ew: undefined,\n  // gt / lt / ge / le - A value in the set is (greater than, less than, greater or equal, less or equal) the given value\n  gt: Operator.GREATER_THAN,\n  lt: Operator.LESS_THAN,\n  ge: Operator.GREATER_THAN_OR_EQUALS,\n  le: Operator.LESS_THAN_OR_EQUALS,\n  // ap - A value in the set is approximately the same as this value.\n  // Note that the recommended value for the approximation is 10% of the stated value (or for a date, 10% of the gap between now and the date), but systems may choose other values where appropriate\n  ap: Operator.APPROXIMATELY,\n  // sa - The value starts after the specified value\n  sa: Operator.STARTS_AFTER,\n  // eb - The value ends before the specified value\n  eb: Operator.ENDS_BEFORE,\n  // pr - The set is empty or not (value is false or true)\n  pr: Operator.MISSING,\n  // po - True if a (implied) date period in the set overlaps with the implied period in the value\n  po: undefined,\n  // ss - True if the value subsumes a concept in the set\n  ss: undefined,\n  // sb - True if the value is subsumed by a concept in the set\n  sb: undefined,\n  // in - True if one of the concepts is in the nominated value set by URI, either a relative, literal or logical vs\n  in: Operator.IN,\n  // ni - True if none of the concepts are in the nominated value set by URI, either a relative, literal or logical vs\n  ni: Operator.NOT_IN,\n  // re - True if one of the references in set points to the given URL\n  re: Operator.EQUALS,\n  // identifier - True if the identifier is in the identifier set (Medplum extension)\n  identifier: Operator.IDENTIFIER,\n};\n\nfunction getOperator(value: string): Operator {\n  const operator = operatorMap[value];\n  if (!operator) {\n    throw new OperationOutcomeError(badRequest('Invalid operator: ' + value));\n  }\n  return operator;\n}\n\nclass FilterParameterParser {\n  constructor(readonly parser: Parser) {}\n\n  parse(): FhirFilterExpression {\n    let result: FhirFilterExpression;\n\n    if (this.parser.peek()?.value === '(') {\n      this.parser.consume('(');\n      result = this.parse();\n      this.parser.consume(')');\n    } else if (this.parser.peek()?.value === 'not') {\n      this.parser.consume('Symbol', 'not');\n      this.parser.consume('(');\n      result = new FhirFilterNegation(this.parse());\n      this.parser.consume(')');\n    } else {\n      result = new FhirFilterComparison(\n        this.parser.consume('Symbol').value,\n        getOperator(this.parser.consume('Symbol').value),\n        this.parser.consume().value\n      );\n    }\n\n    const next = this.parser.peek()?.value;\n    if (next === 'and' || next === 'or') {\n      this.parser.consume('Symbol', next);\n      return new FhirFilterConnective(next, result, this.parse());\n    }\n\n    return result;\n  }\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder();\n\n/**\n * Parses a FHIR _filter parameter expression into an AST.\n * @param input - The FHIR _filter parameter expression.\n * @returns The AST representing the filters.\n */\nexport function parseFilterParameter(input: string): FhirFilterExpression {\n  const parser = fhirPathParserBuilder.construct(tokenize(input));\n  parser.removeComments();\n  return new FilterParameterParser(parser).parse();\n}\n", "import { isStringArray } from './utils';\n\n/**\n * The Hl7Context class represents the parsing context for an HL7 message.\n *\n * MSH-1:\n * https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.1\n *\n * MSH-2:\n * https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.2\n *\n * See this tutorial on MSH, and why it's a bad idea to use anything other than the default values:\n * https://www.hl7soup.com/HL7TutorialMSH.html\n */\nexport class Hl7Context {\n  constructor(\n    public readonly segmentSeparator = '\\r',\n    public readonly fieldSeparator = '|',\n    public readonly componentSeparator = '^',\n    public readonly repetitionSeparator = '~',\n    public readonly escapeCharacter = '\\\\',\n    public readonly subcomponentSeparator = '&'\n  ) {}\n\n  /**\n   * Returns the MSH-1 field value based on the configured separators.\n   * @returns The HL7 MSH-1 field value.\n   */\n  getMsh1(): string {\n    return this.fieldSeparator;\n  }\n\n  /**\n   * Returns the MSH-2 field value based on the configured separators.\n   * @returns The HL7 MSH-2 field value.\n   */\n  getMsh2(): string {\n    return this.componentSeparator + this.repetitionSeparator + this.escapeCharacter + this.subcomponentSeparator;\n  }\n}\n\n/**\n * The Hl7Message class represents one HL7 message.\n * A message is a collection of segments.\n */\nexport class Hl7Message {\n  readonly context: Hl7Context;\n  readonly segments: Hl7Segment[];\n\n  /**\n   * Creates a new HL7 message.\n   * @param segments - The HL7 segments.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(segments: Hl7Segment[], context = new Hl7Context()) {\n    this.context = context;\n    this.segments = segments;\n  }\n\n  /**\n   * Returns the HL7 message header.\n   * @returns The HL7 message header.\n   */\n  get header(): Hl7Segment {\n    return this.segments[0];\n  }\n\n  /**\n   * Returns an HL7 segment by index or by name.\n   * @param index - The HL7 segment index or name.\n   * @returns The HL7 segment if found; otherwise, undefined.\n   * @deprecated Use getSegment() instead. This method will be removed in a future release.\n   */\n  get(index: number | string): Hl7Segment | undefined {\n    return this.getSegment(index);\n  }\n\n  /**\n   * Returns all HL7 segments of a given name.\n   * @param name - The HL7 segment name.\n   * @returns An array of HL7 segments with the specified name.\n   * @deprecated Use getAllSegments() instead. This method will be removed in a future release.\n   */\n  getAll(name: string): Hl7Segment[] {\n    return this.getAllSegments(name);\n  }\n\n  /**\n   * Returns an HL7 segment by index or by name.\n   *\n   * When using a numeric index, the first segment (usually the MSH header segment) is at index 0.\n   *\n   * When using a string index, this method returns the first segment with the specified name.\n   *\n   * @param index - The HL7 segment index or name.\n   * @returns The HL7 segment if found; otherwise, undefined.\n   */\n  getSegment(index: number | string): Hl7Segment | undefined {\n    if (typeof index === 'number') {\n      return this.segments[index];\n    }\n    return this.segments.find((s) => s.name === index);\n  }\n\n  /**\n   * Returns all HL7 segments of a given name.\n   * @param name - The HL7 segment name.\n   * @returns An array of HL7 segments with the specified name.\n   */\n  getAllSegments(name: string): Hl7Segment[] {\n    return this.segments.filter((s) => s.name === name);\n  }\n\n  /**\n   * Returns the HL7 message as a string.\n   * @returns The HL7 message as a string.\n   */\n  toString(): string {\n    return this.segments.map((s) => s.toString()).join(this.context.segmentSeparator);\n  }\n\n  /**\n   * Returns an HL7 \"ACK\" (acknowledgement) message for this message.\n   * @returns The HL7 \"ACK\" message.\n   */\n  buildAck(): Hl7Message {\n    const now = new Date();\n    const msh = this.getSegment('MSH');\n    const sendingApp = msh?.getField(3)?.toString() ?? '';\n    const sendingFacility = msh?.getField(4)?.toString() ?? '';\n    const receivingApp = msh?.getField(5)?.toString() ?? '';\n    const receivingFacility = msh?.getField(6)?.toString() ?? '';\n    const controlId = msh?.getField(10)?.toString() ?? '';\n    const versionId = msh?.getField(12)?.toString() ?? '2.5.1';\n\n    return new Hl7Message([\n      new Hl7Segment(\n        [\n          'MSH',\n          this.context.getMsh2(),\n          receivingApp,\n          receivingFacility,\n          sendingApp,\n          sendingFacility,\n          formatHl7DateTime(now),\n          '',\n          this.buildAckMessageType(msh),\n          now.getTime().toString(),\n          'P',\n          versionId,\n        ],\n        this.context\n      ),\n      new Hl7Segment(['MSA', 'AA', controlId, 'OK'], this.context),\n    ]);\n  }\n\n  private buildAckMessageType(msh: Hl7Segment | undefined): string {\n    // MSH 7 is the message type\n    // https://hl7-definition.caristix.com/v2/HL7v2.4/DataTypes/MSG\n    // In HL7 v2.1, the message type is a single field\n    // In HL7 v2.2 through v2.3, message type has two components.\n    // In HL7 v2.3.1 and later, message type has three components.\n    // Rather than using version to determine behavior, we instead mirror the original message.\n    const messageType = msh?.getField(9);\n    const triggerEvent = messageType?.getComponent(2);\n    const messageStructure = messageType?.getComponent(3);\n    let result = 'ACK';\n    if (triggerEvent && messageStructure) {\n      result = `ACK^${triggerEvent}^ACK`;\n    } else if (triggerEvent) {\n      result = `ACK^${triggerEvent}`;\n    }\n    return result;\n  }\n\n  /**\n   * Parses an HL7 message string into an Hl7Message object.\n   * @param text - The HL7 message text.\n   * @returns The parsed HL7 message.\n   */\n  static parse(text: string): Hl7Message {\n    if (!text.startsWith('MSH')) {\n      const err = new Error('Invalid HL7 message');\n      (err as any).type = 'entity.parse.failed';\n      throw err;\n    }\n    const context = new Hl7Context(\n      '\\r',\n      text.charAt(3), // Field separator, recommended \"|\"\n      text.charAt(4), // Component separator, recommended \"^\"\n      text.charAt(5), // Repetition separator, recommended \"~\"\n      text.charAt(6), // Escape character, recommended \"\\\"\n      text.charAt(7) // Subcomponent separator, recommended \"&\"\n    );\n    return new Hl7Message(\n      text.split(/[\\r\\n]+/).map((line) => Hl7Segment.parse(line, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Segment class represents one HL7 segment.\n * A segment is a collection of fields.\n * The name field is the first field.\n */\nexport class Hl7Segment {\n  readonly context: Hl7Context;\n  readonly name: string;\n  readonly fields: Hl7Field[];\n\n  /**\n   * Creates a new HL7 segment.\n   * @param fields - The HL7 fields. The first field is the segment name.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(fields: Hl7Field[] | string[], context = new Hl7Context()) {\n    this.context = context;\n    if (isStringArray(fields)) {\n      this.fields = fields.map((f) => Hl7Field.parse(f, context));\n    } else {\n      this.fields = fields;\n    }\n    this.name = this.fields[0].components[0][0];\n  }\n\n  /**\n   * Returns an HL7 field by index.\n   * @param index - The HL7 field index.\n   * @returns The HL7 field.\n   * @deprecated Use getSegment() instead. This method includes the segment name in the index, which leads to confusing behavior. This method will be removed in a future release.\n   */\n  get(index: number): Hl7Field {\n    return this.fields[index];\n  }\n\n  /**\n   * Returns an HL7 field by index.\n   *\n   * Note that the index is 1-based, not 0-based.\n   *\n   * For example, to get the first field, use `getField(1)`.\n   *\n   * This aligns with HL7 field names such as PID.1, PID.2, etc.\n   *\n   * Field zero is the segment name.\n   *\n   * @param index - The HL7 field index.\n   * @returns The HL7 field.\n   */\n  getField(index: number): Hl7Field {\n    if (this.name === 'MSH') {\n      // MSH segments require special handling due to field separator\n      if (index === 1) {\n        // MSH.1 is the field separator\n        return new Hl7Field([[this.context.getMsh1()]], this.context);\n      }\n      if (index === 2) {\n        // MSH.2 is the encoding characters\n        return new Hl7Field([[this.context.getMsh2()]], this.context);\n      }\n      if (index > 2) {\n        // MSH.3 through MSH.n are offset by 1\n        return this.fields[index - 1];\n      }\n    }\n    return this.fields[index];\n  }\n\n  /**\n   * Returns an HL7 component by field index and component index.\n   *\n   * This is a shortcut for `getField(field).getComponent(component)`.\n   *\n   * Note that both indexex are 1-based, not 0-based.\n   *\n   * For example, to get the first component, use `getComponent(1, 1)`.\n   *\n   * This aligns with HL7 component names such as MSH.9.2.\n   *\n   * @param fieldIndex - The HL7 field index.\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   */\n  getComponent(fieldIndex: number, component: number, subcomponent?: number, repetition = 0): string {\n    return this.getField(fieldIndex)?.getComponent(component, subcomponent, repetition) ?? '';\n  }\n\n  /**\n   * Returns the HL7 segment as a string.\n   * @returns The HL7 segment as a string.\n   */\n  toString(): string {\n    return this.fields.map((f) => f.toString()).join(this.context.fieldSeparator);\n  }\n\n  /**\n   * Parses an HL7 segment string into an Hl7Segment object.\n   * @param text - The HL7 segment text.\n   * @param context - Optional HL7 parsing context.\n   * @returns The parsed HL7 segment.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Segment {\n    return new Hl7Segment(\n      text.split(context.fieldSeparator).map((f) => Hl7Field.parse(f, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Field class represents one HL7 field.\n * A field is a collection of components.\n */\nexport class Hl7Field {\n  readonly context: Hl7Context;\n  readonly components: string[][];\n\n  /**\n   * Creates a new HL7 field.\n   * @param components - The HL7 components.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(components: string[][], context = new Hl7Context()) {\n    this.context = context;\n    this.components = components;\n  }\n\n  /**\n   * Returns an HL7 component by index.\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   * @deprecated Use getComponent() instead. This method will be removed in a future release.\n   */\n  get(component: number, subcomponent?: number, repetition = 0): string {\n    return this.getComponent(component + 1, subcomponent, repetition);\n  }\n\n  /**\n   * Returns an HL7 component by index.\n   *\n   * Note that the index is 1-based, not 0-based.\n   *\n   * For example, to get the first component, use `getComponent(1)`.\n   *\n   * This aligns with HL7 component names such as MSH.9.2.\n   *\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   */\n  getComponent(component: number, subcomponent?: number, repetition = 0): string {\n    let value = this.components[repetition][component - 1] ?? '';\n\n    if (subcomponent !== undefined) {\n      value = value.split(this.context.subcomponentSeparator)[subcomponent] ?? '';\n    }\n\n    return value;\n  }\n\n  /**\n   * Returns the HL7 field as a string.\n   * @returns The HL7 field as a string.\n   */\n  toString(): string {\n    return this.components.map((r) => r.join(this.context.componentSeparator)).join(this.context.repetitionSeparator);\n  }\n\n  /**\n   * Parses an HL7 field string into an Hl7Field object.\n   * @param text - The HL7 field text.\n   * @param context - Optional HL7 parsing context.\n   * @returns The parsed HL7 field.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Field {\n    return new Hl7Field(\n      text.split(context.repetitionSeparator).map((r) => r.split(context.componentSeparator)),\n      context\n    );\n  }\n}\n\nexport interface Hl7DateParseOptions {\n  /**\n   * Default timezone offset.\n   * Example: \"-0500\"\n   */\n  tzOffset?: string;\n}\n\n/**\n * Returns a formatted string representing the date in ISO-8601 format.\n *\n * HL7-Definition V2\n * Specifies a point in time using a 24-hour clock notation.\n *\n * Format: YYYY[MM[DD[HH[MM[SS[. S[S[S[S]]]]]]]]][+/-ZZZZ].\n *\n * @param hl7DateTime - Date/time string.\n * @param options - Optional parsing options.\n * @returns The date in ISO-8601 format.\n */\nexport function parseHl7DateTime(hl7DateTime: string | undefined, options?: Hl7DateParseOptions): string | undefined {\n  if (!hl7DateTime) {\n    return undefined;\n  }\n\n  const year = parseIntOrDefault(hl7DateTime.slice(0, 4), 0);\n  const month = parseIntOrDefault(hl7DateTime.slice(4, 6), 1) - 1; // Months are 0-indexed in JavaScript Date\n  const day = parseIntOrDefault(hl7DateTime.slice(6, 8), 1); // Default to first day of month\n  const hour = parseIntOrDefault(hl7DateTime.slice(8, 10), 0);\n  const minute = parseIntOrDefault(hl7DateTime.slice(10, 12), 0);\n  const second = parseIntOrDefault(hl7DateTime.slice(12, 14), 0);\n\n  let millisecond = 0;\n  if (hl7DateTime.includes('.')) {\n    millisecond = parseIntOrDefault(hl7DateTime.slice(15, 19), 0);\n  }\n\n  let date = new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n\n  const tzOffset = parseTimeZoneOffset(hl7DateTime, options?.tzOffset);\n  if (tzOffset !== 0) {\n    date = new Date(date.getTime() - tzOffset);\n  }\n\n  return date.toISOString();\n}\n\n/**\n * Parses an integer value from a string.\n * @param str - The string to parse.\n * @param defaultValue - The default value to return if the string is not a number.\n * @returns The parsed integer value, or the default value if the string is not a number.\n */\nfunction parseIntOrDefault(str: string, defaultValue: number): number {\n  const result = parseInt(str, 10);\n  return isNaN(result) ? defaultValue : result;\n}\n\n/**\n * Returns the timezone offset in milliseconds.\n * @param hl7DateTime - The HL7 date/time string.\n * @param defaultOffset - Optional default timezone offset.\n * @returns The timezone offset in milliseconds.\n */\nfunction parseTimeZoneOffset(hl7DateTime: string, defaultOffset?: string): number {\n  let offsetStr = defaultOffset;\n\n  const plusIndex = hl7DateTime.indexOf('+');\n  if (plusIndex !== -1) {\n    offsetStr = hl7DateTime.slice(plusIndex);\n  }\n\n  const minusIndex = hl7DateTime.indexOf('-');\n  if (minusIndex !== -1) {\n    offsetStr = hl7DateTime.slice(minusIndex);\n  }\n\n  if (!offsetStr) {\n    return 0;\n  }\n\n  const sign = offsetStr.startsWith('-') ? -1 : 1;\n\n  // Remove plus, minus, and optional colon\n  offsetStr = offsetStr.slice(1).replace(':', '');\n\n  const hour = parseInt(offsetStr.slice(0, 2), 10);\n  const minute = parseInt(offsetStr.slice(2, 4), 10);\n  return sign * (hour * 60 * 60 * 1000 + minute * 60 * 1000);\n}\n\n/**\n * Formats an ISO date/time string into an HL7 date/time string.\n * @param isoDate - The ISO date/time string.\n * @returns The HL7 date/time string.\n */\nexport function formatHl7DateTime(isoDate: Date | string): string {\n  const date = isoDate instanceof Date ? isoDate : new Date(isoDate);\n  const isoString = date.toISOString();\n\n  // Replace \"T\" and all dashes (-) and colons (:) with empty strings\n  // Replace Z with \"+0000\"\n  // Replace the last 3 digits before 'Z' with the 4-digit milliseconds\n  let result = isoString.replace(/[-:T]/g, '').replace(/(\\.\\d+)?Z$/, '');\n\n  const milliseconds = date.getUTCMilliseconds();\n  if (milliseconds > 0) {\n    result += '.' + milliseconds.toString();\n  }\n\n  return result;\n}\n", "import { OperationOutcomeIssue } from '@medplum/fhirtypes';\nimport { createStructureIssue, OperationOutcomeError, validationError } from './outcomes';\nimport { isResourceType } from './typeschema/types';\n\n/**\n * Validates that the given string is a valid FHIR resource type.\n *\n * On success, silently returns void.\n * On failure, throws an OperationOutcomeError.\n *\n * @example\n * ```ts\n * validateResourceType('Patient'); // nothing\n * validateResourceType('XYZ'); // throws OperationOutcomeError\n * ```\n *\n * Note that this depends on globalSchema, which is populated by the StructureDefinition loader.\n *\n * @example\n * In a server context, you can load all schema definitions:\n *\n * ```ts\n * import { indexStructureDefinitionBundle } from '@medplum/core';\n * import { readJson } from '@medplum/definitions';\n * import { Bundle } from '@medplum/fhirtypes';\n *\n * indexStructureDefinitionBundle(readJson('fhir/r4/profiles-resources.json') as Bundle);\n * ```\n *\n * @example\n * In a client context, you can load the schema definitions using MedplumClient:\n *\n * ```ts\n * import { MedplumClient } from '@medplum/core';\n *\n * const medplum = new MedplumClient();\n * await medplum.requestSchema('Patient');\n * ```\n *\n * @param resourceType - The candidate resource type string.\n */\nexport function validateResourceType(resourceType: string): void {\n  if (!resourceType) {\n    throw new OperationOutcomeError(validationError('Resource type is null'));\n  }\n  if (!isResourceType(resourceType)) {\n    throw new OperationOutcomeError(validationError('Unknown resource type'));\n  }\n}\n\n/**\n * Recursively checks for null values in an object.\n *\n * Note that \"null\" is a special value in JSON that is not allowed in FHIR.\n * @param value - Input value of any type.\n * @param path - Path string to the value for OperationOutcome.\n * @param issues - Output list of issues.\n */\nexport function checkForNull(value: unknown, path: string, issues: OperationOutcomeIssue[]): void {\n  if (value === null) {\n    issues.push(createStructureIssue(path, 'Invalid null value'));\n  } else if (Array.isArray(value)) {\n    checkArrayForNull(value, path, issues);\n  } else if (typeof value === 'object') {\n    checkObjectForNull(value as Record<string, unknown>, path, issues);\n  }\n}\n\nfunction checkArrayForNull(array: unknown[], path: string, issues: OperationOutcomeIssue[]): void {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === undefined) {\n      issues.push(createStructureIssue(`${path}[${i}]`, 'Invalid undefined value'));\n    } else {\n      checkForNull(array[i], `${path}[${i}]`, issues);\n    }\n  }\n}\n\nfunction checkObjectForNull(obj: Record<string, unknown>, path: string, issues: OperationOutcomeIssue[]): void {\n  for (const [key, value] of Object.entries(obj)) {\n    checkForNull(value, `${path}${path ? '.' : ''}${key}`, issues);\n  }\n}\n", "import { Readable } from 'stream';\n\n/**\n * Reads data from a Readable stream and returns a Promise that resolves with a Buffer containing all the data.\n * @param stream - The Readable stream to read from.\n * @returns A Promise that resolves with a Buffer containing all the data from the Readable stream.\n */\nexport function streamToBuffer(stream: Readable): Promise<Buffer> {\n  const chunks: Uint8Array[] = [];\n  return new Promise<Buffer>((resolve, reject) => {\n    stream.on('data', (chunk: Uint8Array) => chunks.push(Buffer.from(chunk)));\n    stream.on('error', (err: Error) => {\n      stream.destroy();\n      reject(err);\n    });\n    stream.on('end', () => {\n      resolve(Buffer.concat(chunks));\n    });\n    stream.on('close', () => {\n      stream.destroy();\n    });\n  });\n}\n", "import { Resource } from '@medplum/fhirtypes';\nimport { getTypedPropertyValue, toTypedValue } from '../fhirpath/utils';\nimport { isResource, TypedValue } from '../types';\nimport { arrayify, isLowerCase } from '../utils';\nimport { getDataType, InternalTypeSchema } from './types';\n\nexport interface ResourceVisitor {\n  onEnterObject?: (path: string, value: TypedValue, schema: InternalTypeSchema) => void;\n  onExitObject?: (path: string, value: TypedValue, schema: InternalTypeSchema) => void;\n  onEnterResource?: (path: string, value: TypedValue, schema: InternalTypeSchema) => void;\n  onExitResource?: (path: string, value: TypedValue, schema: InternalTypeSchema) => void;\n  visitProperty?: (\n    parent: TypedValue,\n    key: string,\n    path: string,\n    propertyValues: (TypedValue | TypedValue[] | undefined)[],\n    schema: InternalTypeSchema\n  ) => void;\n}\n\nexport function crawlResource(\n  resource: Resource,\n  visitor: ResourceVisitor,\n  schema?: InternalTypeSchema,\n  initialPath?: string\n): void {\n  new ResourceCrawler(resource, visitor, schema, initialPath).crawl();\n}\n\nclass ResourceCrawler {\n  private readonly rootResource: Resource;\n  private readonly visitor: ResourceVisitor;\n  private readonly schema: InternalTypeSchema;\n  private readonly initialPath: string;\n\n  constructor(rootResource: Resource, visitor: ResourceVisitor, schema?: InternalTypeSchema, initialPath?: string) {\n    this.rootResource = rootResource;\n    this.visitor = visitor;\n\n    if (schema) {\n      this.schema = schema;\n    } else {\n      this.schema = getDataType(rootResource.resourceType);\n    }\n\n    if (initialPath) {\n      this.initialPath = initialPath;\n    } else {\n      this.initialPath = rootResource.resourceType;\n    }\n  }\n\n  crawl(): void {\n    this.crawlObject(toTypedValue(this.rootResource), this.schema, this.initialPath);\n  }\n\n  private crawlObject(obj: TypedValue, schema: InternalTypeSchema, path: string): void {\n    const objIsResource = isResource(obj.value);\n\n    if (objIsResource && this.visitor.onEnterResource) {\n      this.visitor.onEnterResource(path, obj, schema);\n    }\n\n    if (this.visitor.onEnterObject) {\n      this.visitor.onEnterObject(path, obj, schema);\n    }\n\n    for (const key of Object.keys(schema.elements)) {\n      this.crawlProperty(obj, key, schema, `${path}.${key}`);\n    }\n\n    if (this.visitor.onExitObject) {\n      this.visitor.onExitObject(path, obj, schema);\n    }\n\n    if (objIsResource && this.visitor.onExitResource) {\n      this.visitor.onExitResource(path, obj, schema);\n    }\n  }\n\n  private crawlProperty(parent: TypedValue, key: string, schema: InternalTypeSchema, path: string): void {\n    const propertyValues = getNestedProperty(parent, key);\n    if (this.visitor.visitProperty) {\n      this.visitor.visitProperty(parent, key, path, propertyValues, schema);\n    }\n\n    for (const propertyValue of propertyValues) {\n      if (propertyValue) {\n        for (const value of arrayify(propertyValue) as TypedValue[]) {\n          this.crawlPropertyValue(value, path);\n        }\n      }\n    }\n  }\n\n  private crawlPropertyValue(value: TypedValue, path: string): void {\n    if (!isLowerCase(value.type.charAt(0))) {\n      // Recursively crawl as the expected data type\n      const type = getDataType(value.type);\n      this.crawlObject(value, type, path);\n    }\n  }\n}\n\nexport function getNestedProperty(value: TypedValue, key: string): (TypedValue | TypedValue[] | undefined)[] {\n  if (key === '$this') {\n    return [value];\n  }\n  const [firstProp, ...nestedProps] = key.split('.');\n  let propertyValues = [getTypedPropertyValue(value, firstProp)];\n  for (const prop of nestedProps) {\n    const next = [];\n    for (const current of propertyValues) {\n      if (Array.isArray(current)) {\n        for (const element of current) {\n          next.push(getTypedPropertyValue(element, prop));\n        }\n      } else if (current !== undefined) {\n        next.push(getTypedPropertyValue(current, prop));\n      }\n    }\n    propertyValues = next;\n  }\n  return propertyValues;\n}\n", "import { OperationOutcomeIssue, Resource, StructureDefinition } from '@medplum/fhirtypes';\nimport { UCUM } from '../constants';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { getTypedPropertyValue, toTypedValue } from '../fhirpath/utils';\nimport {\n  createConstraintIssue,\n  createProcessingIssue,\n  createStructureIssue,\n  OperationOutcomeError,\n  validationError,\n} from '../outcomes';\nimport { PropertyType, TypedValue } from '../types';\nimport { arrayify, deepEquals, deepIncludes, isEmpty, isLowerCase } from '../utils';\nimport { crawlResource, getNestedProperty, ResourceVisitor } from './crawler';\nimport {\n  Constraint,\n  getDataType,\n  InternalSchemaElement,\n  InternalTypeSchema,\n  parseStructureDefinition,\n  SliceDefinition,\n  SliceDiscriminator,\n  SlicingRules,\n} from './types';\n\n/*\n * This file provides schema validation utilities for FHIR JSON objects.\n *\n * See: [JSON Representation of Resources](https://hl7.org/fhir/json.html)\n * See: [FHIR Data Types](https://www.hl7.org/fhir/datatypes.html)\n */\nexport const fhirTypeToJsType = {\n  base64Binary: 'string',\n  boolean: 'boolean',\n  canonical: 'string',\n  code: 'string',\n  date: 'string',\n  dateTime: 'string',\n  decimal: 'number',\n  id: 'string',\n  instant: 'string',\n  integer: 'number',\n  markdown: 'string',\n  oid: 'string',\n  positiveInt: 'number',\n  string: 'string',\n  time: 'string',\n  unsignedInt: 'number',\n  uri: 'string',\n  url: 'string',\n  uuid: 'string',\n  xhtml: 'string',\n  'http://hl7.org/fhirpath/System.String': 'string', // Not actually a FHIR type, but included in some StructureDefinition resources\n} as const satisfies Record<string, 'string' | 'boolean' | 'number'>;\n\n/*\n * This file provides schema validation utilities for FHIR JSON objects.\n *\n * See: [JSON Representation of Resources](https://hl7.org/fhir/json.html)\n * See: [FHIR Data Types](https://www.hl7.org/fhir/datatypes.html)\n */\nconst validationRegexes: Record<string, RegExp> = {\n  base64Binary: /^([A-Za-z\\d+/]{4})*([A-Za-z\\d+/]{2}==|[A-Za-z\\d+/]{3}=)?$/,\n  canonical: /^\\S*$/,\n  code: /^[^\\s]+( [^\\s]+)*$/,\n  date: /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\\d|3[0-1]))?)?$/,\n  dateTime:\n    /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\\d|3[0-1])(T([01]\\d|2[0-3]):[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?)?)?(Z|[+-]((0\\d|1[0-3]):[0-5]\\d|14:00)?)?)?$/,\n  id: /^[A-Za-z0-9\\-.]{1,64}$/,\n  instant:\n    /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1])T([01]\\d|2[0-3]):[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?(Z|[+-]((0\\d|1[0-3]):[0-5]\\d|14:00))$/,\n  markdown: /^[\\s\\S]+$/,\n  oid: /^urn:oid:[0-2](\\.(0|[1-9]\\d*))+$/,\n  string: /^[\\s\\S]+$/,\n  time: /^([01]\\d|2[0-3]):[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?$/,\n  uri: /^\\S*$/,\n  url: /^\\S*$/,\n  uuid: /^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n  xhtml: /.*/,\n} as const;\n\n/**\n * List of constraint keys that aren't to be checked in an expression.\n */\nconst skippedConstraintKeys: Record<string, boolean> = { 'ele-1': true };\n\nexport function validateResource(resource: Resource, profile?: StructureDefinition): void {\n  new ResourceValidator(resource.resourceType, resource, profile).validate();\n}\n\nclass ResourceValidator implements ResourceVisitor {\n  private issues: OperationOutcomeIssue[];\n  private rootResource: Resource;\n  private currentResource: Resource[];\n  private readonly schema: InternalTypeSchema;\n\n  constructor(resourceType: string, rootResource: Resource, profile?: StructureDefinition) {\n    this.issues = [];\n    this.rootResource = rootResource;\n    this.currentResource = [];\n    if (!profile) {\n      this.schema = getDataType(resourceType);\n    } else {\n      this.schema = parseStructureDefinition(profile);\n    }\n  }\n\n  validate(): void {\n    const resourceType = this.rootResource.resourceType;\n    if (!resourceType) {\n      throw new OperationOutcomeError(validationError('Missing resource type'));\n    }\n\n    checkObjectForNull(this.rootResource as unknown as Record<string, unknown>, resourceType, this.issues);\n\n    crawlResource(this.rootResource, this, this.schema);\n\n    const issues = this.issues;\n    this.issues = []; // Reset issues to allow re-using the validator for other resources\n    if (issues.length > 0) {\n      throw new OperationOutcomeError({\n        resourceType: 'OperationOutcome',\n        issue: issues,\n      });\n    }\n  }\n\n  onExitObject(path: string, obj: TypedValue, schema: InternalTypeSchema): void {\n    //@TODO(mattwiller 2023-06-05): Detect extraneous properties in a single pass by keeping track of all keys that\n    // were correctly matched to resource properties as elements are validated above\n    this.checkAdditionalProperties(obj, schema.elements, path);\n  }\n\n  onEnterResource(_path: string, obj: TypedValue): void {\n    this.currentResource.push(obj.value);\n  }\n\n  onExitResource(): void {\n    this.currentResource.pop();\n  }\n\n  visitProperty(\n    _parent: TypedValue,\n    key: string,\n    path: string,\n    propertyValues: (TypedValue | TypedValue[] | undefined)[],\n    schema: InternalTypeSchema\n  ): void {\n    const element = schema.elements[key];\n    if (!element) {\n      throw new Error(`Missing element validation schema for ${key}`);\n    }\n    for (const value of propertyValues) {\n      if (!this.checkPresence(value, element, path)) {\n        return;\n      }\n      // Check cardinality\n      let values: TypedValue[];\n      if (element.isArray) {\n        if (!Array.isArray(value)) {\n          this.issues.push(createStructureIssue(path, 'Expected array of values for property'));\n          return;\n        }\n        values = value;\n      } else {\n        if (Array.isArray(value)) {\n          this.issues.push(createStructureIssue(path, 'Expected single value for property'));\n          return;\n        }\n        values = [value];\n      }\n\n      if (values.length < element.min || values.length > element.max) {\n        this.issues.push(\n          createStructureIssue(\n            path,\n            `Invalid number of values: expected ${element.min}..${\n              Number.isFinite(element.max) ? element.max : '*'\n            }, but found ${values.length}`\n          )\n        );\n      }\n\n      if (!matchesSpecifiedValue(value, element)) {\n        this.issues.push(createStructureIssue(path, 'Value did not match expected pattern'));\n      }\n      const sliceCounts: Record<string, number> | undefined = element.slicing\n        ? Object.fromEntries(element.slicing.slices.map((s) => [s.name, 0]))\n        : undefined;\n      for (const value of values) {\n        this.constraintsCheck(value, element, path);\n        this.checkPropertyValue(value, path);\n        const sliceName = checkSliceElement(value, element.slicing);\n        if (sliceName && sliceCounts) {\n          sliceCounts[sliceName] += 1;\n        }\n      }\n      this.validateSlices(element.slicing?.slices, sliceCounts, path);\n    }\n  }\n\n  private checkPresence(\n    value: TypedValue | TypedValue[] | undefined,\n    field: InternalSchemaElement,\n    path: string\n  ): value is TypedValue | TypedValue[] {\n    if (value === undefined) {\n      if (field.min > 0) {\n        this.issues.push(createStructureIssue(path, 'Missing required property'));\n      }\n      return false;\n    } else if (isEmpty(value)) {\n      this.issues.push(createStructureIssue(path, 'Invalid empty value'));\n      return false;\n    }\n    return true;\n  }\n\n  private checkPropertyValue(value: TypedValue, path: string): void {\n    if (isLowerCase(value.type.charAt(0))) {\n      this.validatePrimitiveType(value, path);\n    }\n  }\n\n  private validateSlices(\n    slices: SliceDefinition[] | undefined,\n    counts: Record<string, number> | undefined,\n    path: string\n  ): void {\n    if (!slices || !counts) {\n      return;\n    }\n    for (const slice of slices) {\n      const sliceCardinality = counts[slice.name];\n      if (sliceCardinality < slice.min || sliceCardinality > slice.max) {\n        this.issues.push(\n          createStructureIssue(\n            path,\n            `Incorrect number of values provided for slice '${slice.name}': expected ${slice.min}..${\n              Number.isFinite(slice.max) ? slice.max : '*'\n            }, but found ${sliceCardinality}`\n          )\n        );\n      }\n    }\n  }\n\n  private checkAdditionalProperties(\n    parent: TypedValue,\n    properties: Record<string, InternalSchemaElement>,\n    path: string\n  ): void {\n    const object = parent.value as Record<string, unknown> | undefined;\n    if (!object) {\n      return;\n    }\n    for (const key of Object.keys(object)) {\n      if (key === 'resourceType') {\n        continue; // Skip special resource type discriminator property in JSON\n      }\n      if (\n        !(key in properties) &&\n        !(key.startsWith('_') && key.slice(1) in properties) &&\n        !isChoiceOfType(parent, key, properties)\n      ) {\n        this.issues.push(createStructureIssue(`${path}.${key}`, `Invalid additional property \"${key}\"`));\n      }\n    }\n  }\n\n  private constraintsCheck(value: TypedValue, field: InternalSchemaElement, path: string): void {\n    const constraints = field.constraints;\n    if (!constraints) {\n      return;\n    }\n    for (const constraint of constraints) {\n      if (constraint.severity === 'error' && !(constraint.key in skippedConstraintKeys)) {\n        const expression = this.isExpressionTrue(constraint, value, path);\n        if (!expression) {\n          this.issues.push(createConstraintIssue(path, constraint));\n          return;\n        }\n      }\n    }\n  }\n\n  private isExpressionTrue(constraint: Constraint, value: TypedValue, path: string): boolean {\n    try {\n      const evalValues = evalFhirPathTyped(constraint.expression, [value], {\n        context: value,\n        resource: toTypedValue(this.currentResource[this.currentResource.length - 1]),\n        rootResource: toTypedValue(this.rootResource),\n        ucum: toTypedValue(UCUM),\n      });\n\n      return evalValues.length === 1 && evalValues[0].value === true;\n    } catch (e: any) {\n      this.issues.push(\n        createProcessingIssue(path, 'Error evaluating invariant expression', e, { fhirpath: constraint.expression })\n      );\n      return false;\n    }\n  }\n\n  private validatePrimitiveType(typedValue: TypedValue, path: string): void {\n    const [primitiveValue, extensionElement] = unpackPrimitiveElement(typedValue);\n    if (primitiveValue) {\n      const { type, value } = primitiveValue;\n      // First, make sure the value is the correct JS type\n      if (!(type in fhirTypeToJsType)) {\n        this.issues.push(createStructureIssue(path, `Invalid JSON type: ${type} is not a valid FHIR type`));\n        return;\n      }\n      const expectedType = fhirTypeToJsType[type as keyof typeof fhirTypeToJsType];\n      // rome-ignore lint/suspicious/useValidTypeof: expected value ensured to be one of: 'string' | 'boolean' | 'number'\n      if (typeof value !== expectedType) {\n        if (value !== null) {\n          this.issues.push(\n            createStructureIssue(path, `Invalid JSON type: expected ${expectedType}, but got ${typeof value}`)\n          );\n        }\n        return;\n      }\n      // Then, perform additional checks for specialty types\n      if (expectedType === 'string') {\n        this.validateString(value as string, type, path);\n      } else if (expectedType === 'number') {\n        this.validateNumber(value as number, type, path);\n      }\n    }\n    if (extensionElement) {\n      crawlResource(extensionElement.value, this, getDataType('Element'), path);\n    }\n  }\n\n  private validateString(str: string, type: string, path: string): void {\n    if (!str.trim()) {\n      this.issues.push(createStructureIssue(path, 'String must contain non-whitespace content'));\n      return;\n    }\n\n    const regex = validationRegexes[type];\n    if (regex && !regex.exec(str)) {\n      this.issues.push(createStructureIssue(path, 'Invalid ' + type + ' format'));\n    }\n  }\n\n  private validateNumber(n: number, type: string, path: string): void {\n    if (isNaN(n) || !isFinite(n)) {\n      this.issues.push(createStructureIssue(path, 'Invalid numeric value'));\n    } else if (isIntegerType(type) && !Number.isInteger(n)) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be an integer'));\n    } else if (type === PropertyType.positiveInt && n <= 0) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be positive'));\n    } else if (type === PropertyType.unsignedInt && n < 0) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be non-negative'));\n    }\n  }\n}\n\nfunction isIntegerType(propertyType: string): boolean {\n  return (\n    propertyType === PropertyType.integer ||\n    propertyType === PropertyType.positiveInt ||\n    propertyType === PropertyType.unsignedInt\n  );\n}\n\nfunction isChoiceOfType(\n  typedValue: TypedValue,\n  key: string,\n  propertyDefinitions: Record<string, InternalSchemaElement>\n): boolean {\n  if (key.startsWith('_')) {\n    key = key.slice(1);\n  }\n  const parts = key.split(/(?=[A-Z])/g); // Split before capital letters\n  let testProperty = '';\n  for (const part of parts) {\n    testProperty += part;\n    if (propertyDefinitions[testProperty + '[x]']) {\n      const typedPropertyValue = getTypedPropertyValue(typedValue, testProperty);\n      return !!typedPropertyValue;\n    }\n  }\n  return false;\n}\n\nfunction checkObjectForNull(obj: Record<string, unknown>, path: string, issues: OperationOutcomeIssue[]): void {\n  for (const [key, value] of Object.entries(obj)) {\n    const propertyPath = `${path}.${key}`;\n    const partnerKey = key.startsWith('_') ? key.slice(1) : `_${key}`;\n    if (value === null) {\n      issues.push(createStructureIssue(propertyPath, 'Invalid null value'));\n    } else if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (value[i] === undefined) {\n          issues.push(createStructureIssue(`${propertyPath}[${i}]`, 'Invalid undefined value'));\n        } else if (value[i] === null && !(obj[partnerKey] as any)?.[i]) {\n          // This tests for the one case where `null` is allowed in FHIR JSON, where an array of primitive values\n          // has extensions for some but not all values\n          issues.push(createStructureIssue(`${propertyPath}[${i}]`, 'Invalid null value'));\n        } else if (value[i]) {\n          checkObjectForNull(value[i], `${propertyPath}[${i}]`, issues);\n        }\n      }\n    } else if (typeof value === 'object') {\n      checkObjectForNull(value as Record<string, unknown>, propertyPath, issues);\n    }\n  }\n}\n\nfunction matchesSpecifiedValue(value: TypedValue | TypedValue[], element: InternalSchemaElement): boolean {\n  if (element.pattern && !deepIncludes(value, element.pattern)) {\n    return false;\n  } else if (element.fixed && !deepEquals(value, element.fixed)) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchDiscriminant(\n  value: TypedValue | TypedValue[] | undefined,\n  discriminator: SliceDiscriminator,\n  slice: SliceDefinition\n): boolean {\n  if (Array.isArray(value)) {\n    // Only single values can match\n    return false;\n  }\n  const sliceElement = slice.elements[discriminator.path];\n  const sliceType = slice.type;\n  switch (discriminator.type) {\n    case 'value':\n    case 'pattern':\n      if (!value || !sliceElement) {\n        return false;\n      } else if (matchesSpecifiedValue(value, sliceElement)) {\n        return true;\n      }\n      break;\n    case 'type':\n      if (!value || !sliceType?.length) {\n        return false;\n      } else {\n        return sliceType.some((t) => t.code === value.type);\n      }\n    // Other discriminator types are not yet supported, see http://hl7.org/fhir/R4/profiling.html#discriminator\n  }\n  // Default to no match\n  return false;\n}\n\nfunction checkSliceElement(value: TypedValue, slicingRules: SlicingRules | undefined): string | undefined {\n  if (!slicingRules) {\n    return undefined;\n  }\n  for (const slice of slicingRules.slices) {\n    if (\n      slicingRules.discriminator.every(\n        (discriminator) =>\n          arrayify(getNestedProperty(value, discriminator.path))?.some((v) =>\n            matchDiscriminant(v, discriminator, slice)\n          )\n      )\n    ) {\n      return slice.name;\n    }\n  }\n  return undefined;\n}\n\nfunction unpackPrimitiveElement(v: TypedValue): [TypedValue | undefined, TypedValue | undefined] {\n  if (typeof v.value !== 'object' || !v.value) {\n    return [v, undefined];\n  }\n  const primitiveValue = v.value.valueOf();\n  if (primitiveValue === v.value) {\n    return [undefined, { type: 'Element', value: v.value }];\n  }\n  const primitiveKeys = new Set(Object.keys(primitiveValue));\n  const extensionEntries = Object.entries(v.value).filter(([k, _]) => !primitiveKeys.has(k));\n  const extensionElement = extensionEntries.length > 0 ? Object.fromEntries(extensionEntries) : undefined;\n  return [\n    { type: v.type, value: primitiveValue },\n    { type: 'Element', value: extensionElement },\n  ];\n}\n"],
  "mappings": "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F,EACF,EACF,GACA,KAAO,EACL,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,mDACA,yDACA,sDACF,EACF,GACA,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,EACF,EACF,GACA,eAAiB,EACf,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,EACF,EACF,GACA,cAAgB,EACd,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,aAAe,EACb,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,gBACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,6DACF,EACF,CACF,EACF,GACA,cAAc,EACZ,MAAQ,CACN,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACR,eAAiB,CACf,+CACF,EACF,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,4BACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,4BACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,sBACV,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,uBAAyB,EACvB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,GACA,EACE,MAAQ,kBACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,oBACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,QACV,CACF,EACF,GACA,0BAA4B,EAC1B,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,mBAAqB,EACnB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,gBAAkB,EAChB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,qBAAuB,EACrB,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,wBACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,wBACV,CACF,EACF,GACA,mBAAmB,EACjB,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,cAAc,EACZ,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,8BACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,UAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,sDACF,EACF,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,SAAW,EACT,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,WAAa,EACX,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,MAAQ,EACN,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,6DACF,EACF,CACF,EACF,GACA,UAAY,EACV,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,QACV,CACF,EACF,EACF,EACF,GACA,qBAAuB,EACrB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,eAAiB,EACf,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,6DACF,EACF,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAU,EACR,MAAQ,CACN,EACE,MAAQ,QACV,GACA,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,wBAA0B,EACxB,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,oBAAsB,EACpB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,eAAiB,EACf,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,kBAAoB,EAClB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,8BAAgC,EAC9B,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,kDACF,EACF,CACF,EACF,EACF,EACF,GACA,aAAe,EACb,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,4DACA,yDACA,mDACA,kDACA,sDACF,EACF,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,4DACA,yDACA,mDACA,kDACA,sDACF,EACF,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,gBAAkB,EAChB,MAAQ,CACN,EACE,MAAQ,gCACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,mBAAqB,EACnB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,GACA,EACE,MAAQ,aACR,eAAiB,CACf,kDACF,EACF,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,EACF,EACF,GACA,cAAgB,EACd,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,aACR,eAAiB,CACf,0DACA,yDACA,yDACA,6DACA,iDACA,oDACA,sDACF,EACF,CACF,EACF,EACF,EACF,GACA,eAAiB,EACf,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,gBAAkB,EAChB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,kBAAoB,EAClB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,eAAiB,EACf,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,WAAa,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,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,YACR,EACF,CACF,EACF;AAhEA,IAkEaS,KAAiC,EAC5C,cAAc,oBACd,IAAIR,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,SACN,SAAS,EACP,MAAM,eACR,EACF,CACF,EACF;AA9EA,IAgFaS,KAA8B,EACzC,cAAc,oBACd,IAAIR,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,YACR,EACF,CACF,EACF;AA5FA,IA8FaS,KAAyB,EACpC,cAAc,oBACd,IAAIb,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,WACN,SAAS,EACP,MAAM,OACR,EACF,CACF,EACF;AA1GA,IA4Gac,KAAoC,EAC/C,cAAc,oBACd,IAAIT,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,oBACR,EACF,CACF,EACF;AAEO,SAASU,GAASC,IAAoC;AAC3D,SAAO,EACL,cAAc,oBACd,IAAIV,IACJ,OAAO,CACL,EACE,UAAU,eACV,MAAM,iBACN,SAAS,EACP,MAAM,WACR,GACA,aAAaU,GACf,CACF,EACF;AACF;AAEO,SAASC,EAAWC,IAAiBC,GAAuC;AACjF,SAAO,EACL,cAAc,oBACd,OAAO,CACL,EACE,UAAU,SACV,MAAM,WACN,SAAS,EACP,MAAMD,GACR,GACA,YAAYC,IAAa,CAACA,CAAU,IAAI,OAC1C,CACF,EACF;AACF;AAEO,SAASC,EAAgBF,IAAmC;AACjE,SAAO,EACL,cAAc,oBACd,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAMA,GACR,EACF,CACF,EACF;AACF;AAEO,SAASG,GAAYC,IAA8B;AACxD,SAAO,EACL,cAAc,oBACd,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,wBACR,GACA,aAAaA,GAAI,SAAS,EAC5B,CACF,EACF;AACF;AAEO,SAASC,GAAmBvN,IAA2C;AAC5E,SAAO,OAAOA,MAAU,YAAYA,OAAU,QAASA,GAAc,iBAAiB;AACxF;AAEO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",
  "names": ["PrefixOperatorAtom", "operator", "child", "InfixOperatorAtom", "left", "right", "ParserBuilder", "tokenType", "parselet", "precedence", "builder", "parser", "token", "input", "Parser", "tokens", "prefixParselets", "infixParselets", "expected", "_a", "prefix", "next", "nextToken", "expectedId", "expectedValue", "actual", "t", "createReference", "resource", "reference", "getReferenceString", "display", "getDisplayString", "isReference", "resolveId", "parseReference", "type", "id", "isProfileResource", "profileName", "getProfileResourceDisplayString", "deviceName", "getDeviceDisplayString", "names", "formatHumanName", "device", "getImageSrc", "photo", "p", "url", "getPhotoImageSrc", "getDateProperty", "date", "calculateAge", "birthDateStr", "endDateStr", "startDate", "endDate", "startYear", "startMonth", "startDay", "endYear", "endMonth", "endDay", "years", "months", "days", "calculateAgeString", "getQuestionnaireAnswers", "response", "result", "buildQuestionnaireAnswerItems", "items", "item", "getAllQuestionnaireAnswers", "buildAllQuestionnaireAnswerItems", "getIdentifier", "system", "identifiers", "array", "identifier", "setIdentifier", "value", "getExtensionValue", "urls", "curr", "i", "e", "getExtension", "stringify", "pretty", "stringifyReplacer", "k", "v", "isArrayKey", "isEmpty", "deepEquals", "object1", "object2", "path", "deepEqualsArray", "isObject", "deepEqualsObject", "array1", "array2", "keySet", "key", "val1", "val2", "deepIncludes", "pattern", "deepIncludesArray", "deepIncludesObject", "value1", "value2", "deepClone", "isUUID", "obj", "isStringArray", "arr", "byteToHex", "n", "arrayBufferToHex", "arrayBuffer", "bytes", "arrayBufferToBase64", "capitalize", "word", "isLowerCase", "c", "getCodeBySystem", "concept", "coding", "setCodeBySystem", "code", "findObservationInterval", "definition", "patient", "category", "interval", "observationIntervalMatchesPatient", "observationIntervalMatchesValue", "findObservationReferenceRange", "observationIntervalMatchesGender", "observationIntervalMatchesAge", "matchesRange", "precision", "range", "preciseGreaterThanOrEquals", "preciseLessThanOrEquals", "preciseRound", "a", "preciseEquals", "b", "toPreciseInteger", "preciseLessThan", "preciseGreaterThan", "findResourceByCode", "resources", "r", "arrayify", "sleep", "ms", "resolve", "splitN", "str", "delim", "delimIndex", "formatAddress", "address", "options", "cityStateZip", "name", "formatGivenName", "formatFamilyName", "isValidDate", "formatDate", "locales", "d", "formatTime", "time", "formatDateTime", "dateTime", "formatPeriod", "period", "unitAdverbForm", "singularUnits", "pluralUnits", "formatTiming", "timing", "formatTimingRepeat", "repeat", "frequency", "periodUnit", "formatRange", "exclusive", "low", "high", "preciseDecrement", "formatQuantity", "preciseIncrement", "quantity", "formatMoney", "money", "formatCodeableConcept", "codeableConcept", "formatCoding", "formatObservationValue", "obs", "normalizedTypes", "compressElement", "element", "outputPropertySchema", "inflateElement", "partial", "max", "inflateBaseSchema", "base", "output", "schema", "property", "base_schema_default", "booleanToTypedValue", "PropertyType", "toTypedValue", "isQuantity", "isResource", "toJsBoolean", "singleton", "collection", "getTypedPropertyValue", "elementDefinition", "getElementDefinition", "getTypedPropertyValueWithSchema", "getTypedPropertyValueWithoutSchema", "types", "resultValue", "resultType", "path2", "primitiveExtension", "safeAssign", "toTypedValueWithType", "typedValue", "propertyType", "propertyName", "removeDuplicates", "found", "j", "fhirPathEquals", "fhirPathNot", "fhirPathArrayEquals", "x", "y", "val", "index", "xValue", "yValue", "isQuantityEquivalent", "fhirPathArrayEquivalent", "fhirPathEquivalentCompare", "fhirPathEquivalent", "xType", "xValueRaw", "yType", "yValueRaw", "fhirPathIs", "desiredType", "isPeriod", "keys1", "keys2", "target", "source", "OK_ID", "CREATED_ID", "GONE_ID", "NOT_MODIFIED_ID", "NOT_FOUND_ID", "UNAUTHORIZED_ID", "FORBIDDEN_ID", "TOO_MANY_REQUESTS_ID", "ACCEPTED_ID", "allOk", "created", "notModified", "notFound", "unauthorized", "forbidden", "gone", "tooManyRequests", "accepted", "location", "badRequest", "details", "expression", "validationError", "serverError", "err", "isOperationOutcome", "isOk", "outcome", "isCreated", "isAccepted", "isNotFound", "isGone", "getStatus", "assertOk", "OperationOutcomeError", "cause", "operationOutcomeToString", "normalizeOperationOutcome", "error", "normalizeErrorString", "strs", "operationOutcomeIssueToString", "issue", "issueStr", "errorIssue", "message", "data", "createStructureIssue", "createConstraintIssue", "constraint", "createProcessingIssue", "parseStructureDefinition", "sd", "StructureDefinitionParser", "DATA_TYPES", "indexStructureDefinitionBundle", "bundle", "sds", "loadDataType", "inner", "getAllDataTypes", "isDataTypeLoaded", "tryGetDataType", "getDataType", "isResourceType", "resourceType", "typeSchema", "isResourceTypeSchema", "getDescription", "_e", "elementPath", "field", "parentContext", "pathsCompatible", "getElementDefinitionTypeName", "hasDefaultExtensionSlice", "ref", "current", "ed", "parseCardinality", "baseMax", "typedElementDef", "firstValue", "subsetResource", "properties", "extraProperties", "choiceTypeField", "mandatorySubsetProperties", "subsetTag", "trimPrefix", "parent", "discriminators", "indexSearchParameterBundle", "entry", "indexSearchParameter", "searchParam", "globalSchema", "buildTypeName", "components", "getResourceTypes", "getSearchParameters", "getSearchParameter", "getPropertyDisplayName", "capitalizeDisplayWord", "capitalizedWords", "upper", "typeName", "stringifyTypedValue", "stringifyCoding", "parseDateString", "stub", "functions", "_context", "context", "criteria", "num", "numValue", "other", "otherArray", "_input", "_other", "criterion", "trueResult", "otherwiseResult", "evalResult", "validateInput", "lowerStr", "match", "substringAtom", "applyStringFunc", "substring", "startAtom", "lengthAtom", "start", "length", "startIndex", "endIndex", "prefixAtom", "suffixAtom", "suffix", "patternAtom", "substitionAtom", "substition", "regexAtom", "regex", "applyMathFunc", "baseAtom", "expAtom", "nameAtom", "endAtom", "unitsAtom", "unit", "age", "typeAtom", "SymbolAtom", "DotAtom", "refStr", "systemAtom", "expectedResourceType", "func", "argsAtoms", "atom", "numberInput", "returnValue", "count", "FhirPathAtom", "original", "LiteralAtom", "symbol", "EmptySetAtom", "UnaryOperatorAtom", "impl", "AsAtom", "BooleanInfixOperatorAtom", "ArithemticOperatorAtom", "leftEvalResult", "rightEvalResult", "leftValue", "rightValue", "leftNumber", "rightNumber", "ConcatAtom", "ContainsAtom", "InAtom", "UnionAtom", "leftResult", "rightResult", "EqualsAtom", "NotEqualsAtom", "EquivalentAtom", "NotEquivalentAtom", "IsAtom", "AndAtom", "OrAtom", "XorAtom", "ImpliesAtom", "FunctionAtom", "args", "arg", "IndexerAtom", "expr", "STANDARD_UNITS", "Tokenizer", "keywords", "operators", "endChar", "isUnitToken", "twoCharOp", "condition", "mark", "FHIRPATH_KEYWORDS", "FHIRPATH_OPERATORS", "tokenize", "OperatorPrecedence", "PARENTHESES_PARSELET", "INDEXER_PARSELET", "FUNCTION_CALL_PARSELET", "parseQuantity", "parts", "initFhirPathParserBuilder", "_", "fhirPathParserBuilder", "parseFhirPath", "evalFhirPath", "el", "evalFhirPathTyped", "variables", "variableInput", "SearchParameterType", "getSearchParameterDetails", "buildSearchParameterDetails", "setSearchParameterDetails", "columnName", "convertCodeToColumnName", "expressions", "getExpressionsForResourceType", "atomArray", "flattenAtom", "crawlSearchParameterDetails", "getSearchParameterType", "atoms", "baseType", "currAtom", "handleFunctionAtom", "hasArrayIndex", "nextIndex", "elementDefinitionType", "isBackboneElement", "functionAtom", "propertyTypes", "fhirPathExpression", "buildExpressionsForResourceType", "getExpressionForResourceType", "DEFAULT_SEARCH_COUNT", "Operator", "MODIFIER_OPERATORS", "PREFIX_OPERATORS", "parseSearchRequest", "query", "queryArray", "parseSearchImpl", "parseSearchUrl", "part", "parseSearchDefinition", "parseCriteriaAsSearchRequest", "searchRequest", "parseKeyValue", "modifier", "colonIndex", "addFilter", "parseSortRule", "parseIncludeTarget", "param", "parseParameter", "parseUnknownParameter", "descending", "parsePrefixType", "parseModifierType", "parsePrefix", "parseModifier", "prefixOperator", "filter", "subexpressionPattern", "parseXFhirQuery", "replacement", "formatSearchQuery", "params", "formatFilter", "formatSortRules", "formatIncludeTarget", "sortRules", "sr", "kind", "matchesSearchRequest", "matchesSearchFilter", "values", "matchesReferenceFilter", "matchesStringFilter", "matchesTokenFilter", "matchesDateFilter", "negated", "isNegated", "references", "filterValue", "matchesBooleanFilter", "asToken", "resourceValues", "filterValues", "resourceValue", "matchesStringValue", "matchesDateValue", "universalAccessPolicy", "protectedResourceTypes", "projectAdminResourceTypes", "AccessPolicyInteraction", "resourceReadInteractions", "canReadResourceType", "accessPolicy", "resourcePolicy", "matchesAccessPolicyResourceType", "canWriteResourceType", "canWriteResource", "matchesAccessPolicy", "readonlyMode", "matchesAccessPolicyResourcePolicy", "satisfiedAccessPolicy", "interaction", "accessPolicyResourceType", "decodeBase64", "encodeBase64", "getRandomString", "randomItems", "encryptSHA256", "generateId", "convertToTransactionBundle", "idToUuid", "jsonString", "referenceReplacer", "reorderBundle", "adjacencyList", "buildAdjacencyList", "sortedFullUrls", "cycles", "topologicalSortWithCycles", "entryMap", "reorderedEntries", "fullUrl", "cycle", "originalEntry", "putEntry", "graph", "sorted", "state", "vertex", "visit", "cycleStartIndex", "hasCycle", "neighbor", "findReferences", "callback", "convertContainedResourcesToBundle", "simpleBundle", "contained", "LRUCache", "ContentType", "EventTarget", "event", "listener", "TypedEventTarget", "handler", "FHIRCAST_EVENT_NAMES", "FHIRCAST_RESOURCE_TYPES", "FHIRCAST_EVENT_VERSION_REQUIRED", "isContextVersionRequired", "assertContextVersionOptional", "FHIRCAST_EVENT_RESOURCES", "isFhircastResourceType", "isCompletedSubscriptionRequest", "subscriptionRequest", "serializeFhircastSubscriptionRequest", "validateFhircastSubscriptionRequest", "channelType", "mode", "topic", "events", "formattedSubRequest", "validateSingleResourceContext", "keySchema", "validateFhircastContext", "keysSeen", "validateFhircastContexts", "contexts", "eventSchema", "createFhircastMessagePayload", "versionId", "normalizedContexts", "FhircastConnection", "subRequest", "websocket", "fhircastMessage", "decodePayload", "payload", "cleanedPayload", "decodedPayload", "uriEncodedPayload", "acc", "char", "uriEncodedChar", "jsonPayload", "isJwt", "parseJWTPayload", "_header", "_signature", "isMedplumAccessToken", "accessToken", "ReadablePromise", "requestPromise", "res", "onfulfilled", "onrejected", "onfinally", "ClientStorage", "MemoryStorage", "MEDPLUM_VERSION", "DEFAULT_ACCEPT", "DEFAULT_BASE_URL", "DEFAULT_RESOURCE_CACHE_SIZE", "DEFAULT_CACHE_TIME", "BINARY_URL_PREFIX", "OAuthGrantType", "OAuthTokenType", "OAuthTokenAuthMethod", "OAuthClientAssertionType", "MedplumClient", "getDefaultFetch", "ensureTrailingSlash", "concatUrls", "activeLogin", "cached", "promise", "reject", "readablePromise", "body", "contentType", "operations", "newUserRequest", "codeChallengeMethod", "codeChallenge", "newProjectRequest", "newPatientRequest", "loginRequest", "loginParams", "authorizeUrl", "clientId", "redirectUri", "baseLogin", "pkceEnabled", "formBody", "cacheKey", "bundleToResourceArray", "searchParams", "nextLink", "link", "refString", "searchParameter", "vid", "filename", "onProgress", "binary", "xhr", "docDefinition", "tableLayouts", "fonts", "blob", "text", "profile", "encounter", "subject", "idOrIdentifier", "email", "operationName", "graphName", "agent", "destination", "login", "refreshToken", "newLogin", "logins", "profileChanged", "urlString", "contents", "additionalFields", "exportLevel", "resourceTypes", "since", "fhirPath", "headers", "contentLocation", "tryGetContentLocation", "method", "isJson", "redirectMode", "maxRetries", "retryDelay", "retry", "entries", "statusUrl", "checkStatus", "resultResponse", "fetchOptions", "statusResponse", "batch", "responseEntry", "pkceState", "codeVerifier", "arrayHash", "getWindowOrigin", "clientSecret", "assertion", "scope", "jwt", "endpoint", "projectId", "tokenPayload", "retryNumber", "baseUrl", "ExternalSecretSystems", "UCUM", "LOINC", "SNOMED", "RXNORM", "CPT", "ICD10", "MAPPING_LANGUAGE_OPERATORS", "StructureMapParser", "parameters", "rules", "sources", "_i", "whereFhirPath", "checkFhirPath", "targets", "transformFhirPath", "literalAtom", "functionName", "parseMappingLanguage", "FhirFilterComparison", "FhirFilterNegation", "FhirFilterConnective", "keyword", "operatorMap", "getOperator", "FilterParameterParser", "parseFilterParameter", "Hl7Context", "segmentSeparator", "fieldSeparator", "componentSeparator", "repetitionSeparator", "escapeCharacter", "subcomponentSeparator", "Hl7Message", "_Hl7Message", "segments", "s", "now", "msh", "sendingApp", "sendingFacility", "receivingApp", "receivingFacility", "controlId", "Hl7Segment", "formatHl7DateTime", "messageType", "triggerEvent", "messageStructure", "line", "_Hl7Segment", "fields", "f", "Hl7Field", "fieldIndex", "component", "subcomponent", "repetition", "_Hl7Field", "parseHl7DateTime", "hl7DateTime", "year", "parseIntOrDefault", "month", "day", "hour", "minute", "second", "millisecond", "tzOffset", "parseTimeZoneOffset", "defaultValue", "defaultOffset", "offsetStr", "plusIndex", "minusIndex", "sign", "isoDate", "milliseconds", "validateResourceType", "checkForNull", "issues", "checkArrayForNull", "checkObjectForNull", "streamToBuffer", "stream", "chunks", "chunk", "crawlResource", "visitor", "initialPath", "ResourceCrawler", "rootResource", "objIsResource", "propertyValues", "getNestedProperty", "propertyValue", "firstProp", "nestedProps", "prop", "fhirTypeToJsType", "validationRegexes", "skippedConstraintKeys", "validateResource", "ResourceValidator", "_path", "_parent", "matchesSpecifiedValue", "sliceCounts", "sliceName", "checkSliceElement", "slices", "counts", "slice", "sliceCardinality", "object", "isChoiceOfType", "constraints", "evalValues", "primitiveValue", "extensionElement", "unpackPrimitiveElement", "expectedType", "isIntegerType", "propertyDefinitions", "testProperty", "propertyPath", "partnerKey", "matchDiscriminant", "discriminator", "sliceElement", "sliceType", "slicingRules", "primitiveKeys", "extensionEntries"]
}
